import{i as h,r as c,a as l,x as f}from"./index-lhkfOjOH.js";import{n as m,c as p}from"./if-defined-DRopHhnz.js";const v=h`
  :host {
    display: block;
    width: var(--wui-box-size-md);
    height: var(--wui-box-size-md);
  }

  svg {
    width: var(--wui-box-size-md);
    height: var(--wui-box-size-md);
  }

  rect {
    fill: none;
    stroke: var(--wui-color-accent-100);
    stroke-width: 4px;
    stroke-linecap: round;
    animation: dash 1s linear infinite;
  }

  @keyframes dash {
    to {
      stroke-dashoffset: 0px;
    }
  }
`;var u=function(o,t,s,r){var i=arguments.length,e=i<3?t:r===null?r=Object.getOwnPropertyDescriptor(t,s):r,a;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")e=Reflect.decorate(o,t,s,r);else for(var d=o.length-1;d>=0;d--)(a=o[d])&&(e=(i<3?a(e):i>3?a(t,s,e):a(t,s))||e);return i>3&&e&&Object.defineProperty(t,s,e),e};let n=class extends l{constructor(){super(...arguments),this.radius=36}render(){return this.svgLoaderTemplate()}svgLoaderTemplate(){const t=this.radius>50?50:this.radius,r=36-t,i=116+r,e=245+r,a=360+r*1.75;return f`
      <svg viewBox="0 0 110 110" width="110" height="110">
        <rect
          x="2"
          y="2"
          width="106"
          height="106"
          rx=${t}
          stroke-dasharray="${i} ${e}"
          stroke-dashoffset=${a}
        />
      </svg>
    `}};n.styles=[c,v];u([m({type:Number})],n.prototype,"radius",void 0);n=u([p("wui-loading-thumbnail")],n);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtRDVtemZYWVQuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9AcmVvd24vYXBwa2l0LXVpL2Rpc3QvZXNtL3NyYy9jb21wb25lbnRzL3d1aS1sb2FkaW5nLXRodW1ibmFpbC9zdHlsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHJlb3duL2FwcGtpdC11aS9kaXN0L2VzbS9zcmMvY29tcG9uZW50cy93dWktbG9hZGluZy10aHVtYm5haWwvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogdmFyKC0td3VpLWJveC1zaXplLW1kKTtcbiAgICBoZWlnaHQ6IHZhcigtLXd1aS1ib3gtc2l6ZS1tZCk7XG4gIH1cblxuICBzdmcge1xuICAgIHdpZHRoOiB2YXIoLS13dWktYm94LXNpemUtbWQpO1xuICAgIGhlaWdodDogdmFyKC0td3VpLWJveC1zaXplLW1kKTtcbiAgfVxuXG4gIHJlY3Qge1xuICAgIGZpbGw6IG5vbmU7XG4gICAgc3Ryb2tlOiB2YXIoLS13dWktY29sb3ItYWNjZW50LTEwMCk7XG4gICAgc3Ryb2tlLXdpZHRoOiA0cHg7XG4gICAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xuICAgIGFuaW1hdGlvbjogZGFzaCAxcyBsaW5lYXIgaW5maW5pdGU7XG4gIH1cblxuICBAa2V5ZnJhbWVzIGRhc2gge1xuICAgIHRvIHtcbiAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwcHg7XG4gICAgfVxuICB9XG5gO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVzLmpzLm1hcCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyByZXNldFN0eWxlcyB9IGZyb20gJy4uLy4uL3V0aWxzL1RoZW1lVXRpbC5qcyc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvV2ViQ29tcG9uZW50c1V0aWwuanMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5qcyc7XG5sZXQgV3VpTG9hZGluZ1RodW1ibmFpbCA9IGNsYXNzIFd1aUxvYWRpbmdUaHVtYm5haWwgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAzNjtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdmdMb2FkZXJUZW1wbGF0ZSgpO1xuICAgIH1cbiAgICBzdmdMb2FkZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXMgPiA1MCA/IDUwIDogdGhpcy5yYWRpdXM7XG4gICAgICAgIGNvbnN0IHN0YW5kYXJkVmFsdWUgPSAzNjtcbiAgICAgICAgY29uc3QgcmFkaXVzRmFjdG9yID0gc3RhbmRhcmRWYWx1ZSAtIHJhZGl1cztcbiAgICAgICAgY29uc3QgZGFzaEFycmF5U3RhcnQgPSAxMTYgKyByYWRpdXNGYWN0b3I7XG4gICAgICAgIGNvbnN0IGRhc2hBcnJheUVuZCA9IDI0NSArIHJhZGl1c0ZhY3RvcjtcbiAgICAgICAgY29uc3QgZGFzaE9mZnNldCA9IDM2MCArIHJhZGl1c0ZhY3RvciAqIDEuNzU7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAxMTAgMTEwXCIgd2lkdGg9XCIxMTBcIiBoZWlnaHQ9XCIxMTBcIj5cbiAgICAgICAgPHJlY3RcbiAgICAgICAgICB4PVwiMlwiXG4gICAgICAgICAgeT1cIjJcIlxuICAgICAgICAgIHdpZHRoPVwiMTA2XCJcbiAgICAgICAgICBoZWlnaHQ9XCIxMDZcIlxuICAgICAgICAgIHJ4PSR7cmFkaXVzfVxuICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk9XCIke2Rhc2hBcnJheVN0YXJ0fSAke2Rhc2hBcnJheUVuZH1cIlxuICAgICAgICAgIHN0cm9rZS1kYXNob2Zmc2V0PSR7ZGFzaE9mZnNldH1cbiAgICAgICAgLz5cbiAgICAgIDwvc3ZnPlxuICAgIGA7XG4gICAgfVxufTtcbld1aUxvYWRpbmdUaHVtYm5haWwuc3R5bGVzID0gW3Jlc2V0U3R5bGVzLCBzdHlsZXNdO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIgfSlcbl0sIFd1aUxvYWRpbmdUaHVtYm5haWwucHJvdG90eXBlLCBcInJhZGl1c1wiLCB2b2lkIDApO1xuV3VpTG9hZGluZ1RodW1ibmFpbCA9IF9fZGVjb3JhdGUoW1xuICAgIGN1c3RvbUVsZW1lbnQoJ3d1aS1sb2FkaW5nLXRodW1ibmFpbCcpXG5dLCBXdWlMb2FkaW5nVGh1bWJuYWlsKTtcbmV4cG9ydCB7IFd1aUxvYWRpbmdUaHVtYm5haWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJzdHlsZXMiLCJjc3MiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiciIsImQiLCJpIiwiV3VpTG9hZGluZ1RodW1ibmFpbCIsIkxpdEVsZW1lbnQiLCJyYWRpdXMiLCJyYWRpdXNGYWN0b3IiLCJkYXNoQXJyYXlTdGFydCIsImRhc2hBcnJheUVuZCIsImRhc2hPZmZzZXQiLCJodG1sIiwicmVzZXRTdHlsZXMiLCJwcm9wZXJ0eSIsImN1c3RvbUVsZW1lbnQiXSwibWFwcGluZ3MiOiJpSEFDQSxNQUFBQSxFQUFlQztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQSxFQ0RmLElBQUlDLEVBQTBDLFNBQVVDLEVBQVlDLEVBQVFDLEVBQUtDLEVBQU0sQ0FDbkYsSUFBSUMsRUFBSSxVQUFVLE9BQVFDLEVBQUlELEVBQUksRUFBSUgsRUFBU0UsSUFBUyxLQUFPQSxFQUFPLE9BQU8seUJBQXlCRixFQUFRQyxDQUFHLEVBQUlDLEVBQU1HLEVBQzNILEdBQUksT0FBTyxTQUFZLFVBQVksT0FBTyxRQUFRLFVBQWEsV0FBWUQsRUFBSSxRQUFRLFNBQVNMLEVBQVlDLEVBQVFDLEVBQUtDLENBQUksTUFDeEgsU0FBU0ksRUFBSVAsRUFBVyxPQUFTLEVBQUdPLEdBQUssRUFBR0EsS0FBU0QsRUFBSU4sRUFBV08sQ0FBQyxLQUFHRixHQUFLRCxFQUFJLEVBQUlFLEVBQUVELENBQUMsRUFBSUQsRUFBSSxFQUFJRSxFQUFFTCxFQUFRQyxFQUFLRyxDQUFDLEVBQUlDLEVBQUVMLEVBQVFDLENBQUcsSUFBTUcsR0FDaEosT0FBT0QsRUFBSSxHQUFLQyxHQUFLLE9BQU8sZUFBZUosRUFBUUMsRUFBS0csQ0FBQyxFQUFHQSxDQUNoRSxFQU1BLElBQUlHLEVBQXNCLGNBQWtDQyxDQUFXLENBQ25FLGFBQWMsQ0FDVixNQUFNLEdBQUcsU0FBUyxFQUNsQixLQUFLLE9BQVMsRUFDdEIsQ0FDSSxRQUFTLENBQ0wsT0FBTyxLQUFLLGtCQUFtQixDQUN2QyxDQUNJLG1CQUFvQixDQUNoQixNQUFNQyxFQUFTLEtBQUssT0FBUyxHQUFLLEdBQUssS0FBSyxPQUV0Q0MsRUFEZ0IsR0FDZUQsRUFDL0JFLEVBQWlCLElBQU1ELEVBQ3ZCRSxFQUFlLElBQU1GLEVBQ3JCRyxFQUFhLElBQU1ILEVBQWUsS0FDeEMsT0FBT0k7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsZUFPQUwsQ0FBTTtBQUFBLDhCQUNTRSxDQUFjLElBQUlDLENBQVk7QUFBQSw4QkFDOUJDLENBQVU7QUFBQTtBQUFBO0FBQUEsS0FJeEMsQ0FDQSxFQUNBTixFQUFvQixPQUFTLENBQUNRLEVBQWFuQixDQUFNLEVBQ2pERSxFQUFXLENBQ1BrQixFQUFTLENBQUUsS0FBTSxNQUFRLENBQUEsQ0FDN0IsRUFBR1QsRUFBb0IsVUFBVyxTQUFVLE1BQU0sRUFDbERBLEVBQXNCVCxFQUFXLENBQzdCbUIsRUFBYyx1QkFBdUIsQ0FDekMsRUFBR1YsQ0FBbUIiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxXX0=
