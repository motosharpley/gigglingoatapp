import{ao as me,ap as Mt,aq as Ot,ar as ye,as as Ze,at as Ve,au as W,av as ze,aw as Me,ax as pe,ay as Pe}from"./index-C4QAg8YX.js";function je(t,n,e,r){if(typeof t.setBigUint64=="function")return t.setBigUint64(n,e,r);const o=BigInt(32),i=BigInt(4294967295),c=Number(e>>o&i),f=Number(e&i),s=r?4:0,u=r?0:4;t.setUint32(n+s,c,r),t.setUint32(n+u,f,r)}function Ke(t,n,e){return t&n^~t&e}function De(t,n,e){return t&n^t&e^n&e}class Ye extends me{constructor(n,e,r,o){super(),this.blockLen=n,this.outputLen=e,this.padOffset=r,this.isLE=o,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(n),this.view=Mt(this.buffer)}update(n){Ot(this);const{view:e,buffer:r,blockLen:o}=this;n=ye(n);const i=n.length;for(let c=0;c<i;){const f=Math.min(o-this.pos,i-c);if(f===o){const s=Mt(n);for(;o<=i-c;c+=o)this.process(s,c);continue}r.set(n.subarray(c,c+f),this.pos),this.pos+=f,c+=f,this.pos===o&&(this.process(e,0),this.pos=0)}return this.length+=n.length,this.roundClean(),this}digestInto(n){Ot(this),Ze(n,this),this.finished=!0;const{buffer:e,view:r,blockLen:o,isLE:i}=this;let{pos:c}=this;e[c++]=128,this.buffer.subarray(c).fill(0),this.padOffset>o-c&&(this.process(r,0),c=0);for(let l=c;l<o;l++)e[l]=0;je(r,o-8,BigInt(this.length*8),i),this.process(r,0);const f=Mt(n),s=this.outputLen;if(s%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const u=s/4,g=this.get();if(u>g.length)throw new Error("_sha2: outputLen bigger than state");for(let l=0;l<u;l++)f.setUint32(4*l,g[l],i)}digest(){const{buffer:n,outputLen:e}=this;this.digestInto(n);const r=n.slice(0,e);return this.destroy(),r}_cloneInto(n){n||(n=new this.constructor),n.set(...this.get());const{blockLen:e,buffer:r,length:o,finished:i,destroyed:c,pos:f}=this;return n.length=o,n.pos=f,n.finished=i,n.destroyed=c,o%e&&n.buffer.set(r),n}}const Ge=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),et=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),nt=new Uint32Array(64);class We extends Ye{constructor(){super(64,32,8,!1),this.A=et[0]|0,this.B=et[1]|0,this.C=et[2]|0,this.D=et[3]|0,this.E=et[4]|0,this.F=et[5]|0,this.G=et[6]|0,this.H=et[7]|0}get(){const{A:n,B:e,C:r,D:o,E:i,F:c,G:f,H:s}=this;return[n,e,r,o,i,c,f,s]}set(n,e,r,o,i,c,f,s){this.A=n|0,this.B=e|0,this.C=r|0,this.D=o|0,this.E=i|0,this.F=c|0,this.G=f|0,this.H=s|0}process(n,e){for(let l=0;l<16;l++,e+=4)nt[l]=n.getUint32(e,!1);for(let l=16;l<64;l++){const d=nt[l-15],w=nt[l-2],B=W(d,7)^W(d,18)^d>>>3,y=W(w,17)^W(w,19)^w>>>10;nt[l]=y+nt[l-7]+B+nt[l-16]|0}let{A:r,B:o,C:i,D:c,E:f,F:s,G:u,H:g}=this;for(let l=0;l<64;l++){const d=W(f,6)^W(f,11)^W(f,25),w=g+d+Ke(f,s,u)+Ge[l]+nt[l]|0,y=(W(r,2)^W(r,13)^W(r,22))+De(r,o,i)|0;g=u,u=s,s=f,f=c+w|0,c=i,i=o,o=r,r=w+y|0}r=r+this.A|0,o=o+this.B|0,i=i+this.C|0,c=c+this.D|0,f=f+this.E|0,s=s+this.F|0,u=u+this.G|0,g=g+this.H|0,this.set(r,o,i,c,f,s,u,g)}roundClean(){nt.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Nt=Ve(()=>new We);/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const Rt=BigInt(0),Ct=BigInt(1),$e=BigInt(2);function lt(t){return t instanceof Uint8Array||ArrayBuffer.isView(t)&&t.constructor.name==="Uint8Array"}function X(t){if(!lt(t))throw new Error("Uint8Array expected")}function mt(t,n){if(typeof n!="boolean")throw new Error(t+" boolean expected, got "+n)}const Xe=Array.from({length:256},(t,n)=>n.toString(16).padStart(2,"0"));function yt(t){X(t);let n="";for(let e=0;e<t.length;e++)n+=Xe[t[e]];return n}function wt(t){const n=t.toString(16);return n.length&1?"0"+n:n}function te(t){if(typeof t!="string")throw new Error("hex string expected, got "+typeof t);return t===""?Rt:BigInt("0x"+t)}const J={_0:48,_9:57,A:65,F:70,a:97,f:102};function ce(t){if(t>=J._0&&t<=J._9)return t-J._0;if(t>=J.A&&t<=J.F)return t-(J.A-10);if(t>=J.a&&t<=J.f)return t-(J.a-10)}function pt(t){if(typeof t!="string")throw new Error("hex string expected, got "+typeof t);const n=t.length,e=n/2;if(n%2)throw new Error("hex string expected, got unpadded hex of length "+n);const r=new Uint8Array(e);for(let o=0,i=0;o<e;o++,i+=2){const c=ce(t.charCodeAt(i)),f=ce(t.charCodeAt(i+1));if(c===void 0||f===void 0){const s=t[i]+t[i+1];throw new Error('hex string expected, got non-hex character "'+s+'" at index '+i)}r[o]=c*16+f}return r}function $(t){return te(yt(t))}function ee(t){return X(t),te(yt(Uint8Array.from(t).reverse()))}function st(t,n){return pt(t.toString(16).padStart(n*2,"0"))}function ne(t,n){return st(t,n).reverse()}function Qe(t){return pt(wt(t))}function V(t,n,e){let r;if(typeof n=="string")try{r=pt(n)}catch(i){throw new Error(t+" must be hex string or Uint8Array, cause: "+i)}else if(lt(n))r=Uint8Array.from(n);else throw new Error(t+" must be hex string or Uint8Array");const o=r.length;if(typeof e=="number"&&o!==e)throw new Error(t+" of length "+e+" expected, got "+o);return r}function K(...t){let n=0;for(let r=0;r<t.length;r++){const o=t[r];X(o),n+=o.length}const e=new Uint8Array(n);for(let r=0,o=0;r<t.length;r++){const i=t[r];e.set(i,o),o+=i.length}return e}function Je(t,n){if(t.length!==n.length)return!1;let e=0;for(let r=0;r<t.length;r++)e|=t[r]^n[r];return e===0}function kt(t){if(typeof t!="string")throw new Error("string expected");return new Uint8Array(new TextEncoder().encode(t))}const Pt=t=>typeof t=="bigint"&&Rt<=t;function xt(t,n,e){return Pt(t)&&Pt(n)&&Pt(e)&&n<=t&&t<e}function it(t,n,e,r){if(!xt(n,e,r))throw new Error("expected valid "+t+": "+e+" <= n < "+r+", got "+n)}function xe(t){let n;for(n=0;t>Rt;t>>=Ct,n+=1);return n}function Fe(t,n){return t>>BigInt(n)&Ct}function tn(t,n,e){return t|(e?Ct:Rt)<<BigInt(n)}const re=t=>($e<<BigInt(t-1))-Ct,jt=t=>new Uint8Array(t),fe=t=>Uint8Array.from(t);function Ee(t,n,e){if(typeof t!="number"||t<2)throw new Error("hashLen must be a number");if(typeof n!="number"||n<2)throw new Error("qByteLen must be a number");if(typeof e!="function")throw new Error("hmacFn must be a function");let r=jt(t),o=jt(t),i=0;const c=()=>{r.fill(1),o.fill(0),i=0},f=(...l)=>e(o,r,...l),s=(l=jt())=>{o=f(fe([0]),l),r=f(),l.length!==0&&(o=f(fe([1]),l),r=f())},u=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let l=0;const d=[];for(;l<n;){r=f();const w=r.slice();d.push(w),l+=r.length}return K(...d)};return(l,d)=>{c(),s(l);let w;for(;!(w=d(u()));)s();return c(),w}}const en={bigint:t=>typeof t=="bigint",function:t=>typeof t=="function",boolean:t=>typeof t=="boolean",string:t=>typeof t=="string",stringOrUint8Array:t=>typeof t=="string"||lt(t),isSafeInteger:t=>Number.isSafeInteger(t),array:t=>Array.isArray(t),field:(t,n)=>n.Fp.isValid(t),hash:t=>typeof t=="function"&&Number.isSafeInteger(t.outputLen)};function Et(t,n,e={}){const r=(o,i,c)=>{const f=en[i];if(typeof f!="function")throw new Error("invalid validator function");const s=t[o];if(!(c&&s===void 0)&&!f(s,t))throw new Error("param "+String(o)+" is invalid. Expected "+i+", got "+s)};for(const[o,i]of Object.entries(n))r(o,i,!1);for(const[o,i]of Object.entries(e))r(o,i,!0);return t}const nn=()=>{throw new Error("not implemented")};function $t(t){const n=new WeakMap;return(e,...r)=>{const o=n.get(e);if(o!==void 0)return o;const i=t(e,...r);return n.set(e,i),i}}const rn=Object.freeze(Object.defineProperty({__proto__:null,aInRange:it,abool:mt,abytes:X,bitGet:Fe,bitLen:xe,bitMask:re,bitSet:tn,bytesToHex:yt,bytesToNumberBE:$,bytesToNumberLE:ee,concatBytes:K,createHmacDrbg:Ee,ensureBytes:V,equalBytes:Je,hexToBytes:pt,hexToNumber:te,inRange:xt,isBytes:lt,memoized:$t,notImplemented:nn,numberToBytesBE:st,numberToBytesLE:ne,numberToHexUnpadded:wt,numberToVarBytesBE:Qe,utf8ToBytes:kt,validateObject:Et},Symbol.toStringTag,{value:"Module"}));class Be extends me{constructor(n,e){super(),this.finished=!1,this.destroyed=!1,ze(n);const r=ye(e);if(this.iHash=n.create(),typeof this.iHash.update!="function")throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const o=this.blockLen,i=new Uint8Array(o);i.set(r.length>o?n.create().update(r).digest():r);for(let c=0;c<i.length;c++)i[c]^=54;this.iHash.update(i),this.oHash=n.create();for(let c=0;c<i.length;c++)i[c]^=106;this.oHash.update(i),i.fill(0)}update(n){return Ot(this),this.iHash.update(n),this}digestInto(n){Ot(this),Me(n,this.outputLen),this.finished=!0,this.iHash.digestInto(n),this.oHash.update(n),this.oHash.digestInto(n),this.destroy()}digest(){const n=new Uint8Array(this.oHash.outputLen);return this.digestInto(n),n}_cloneInto(n){n||(n=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:r,finished:o,destroyed:i,blockLen:c,outputLen:f}=this;return n=n,n.finished=o,n.destroyed=i,n.blockLen=c,n.outputLen=f,n.oHash=e._cloneInto(n.oHash),n.iHash=r._cloneInto(n.iHash),n}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const ve=(t,n,e)=>new Be(t,n).update(e).digest();ve.create=(t,n)=>new Be(t,n);/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const k=BigInt(0),H=BigInt(1),ut=BigInt(2),on=BigInt(3),Xt=BigInt(4),ae=BigInt(5),ue=BigInt(8);function C(t,n){const e=t%n;return e>=k?e:n+e}function sn(t,n,e){if(n<k)throw new Error("invalid exponent, negatives unsupported");if(e<=k)throw new Error("invalid modulus");if(e===H)return k;let r=H;for(;n>k;)n&H&&(r=r*t%e),t=t*t%e,n>>=H;return r}function D(t,n,e){let r=t;for(;n-- >k;)r*=r,r%=e;return r}function Qt(t,n){if(t===k)throw new Error("invert: expected non-zero number");if(n<=k)throw new Error("invert: expected positive modulus, got "+n);let e=C(t,n),r=n,o=k,i=H;for(;e!==k;){const f=r/e,s=r%e,u=o-i*f;r=e,e=s,o=i,i=u}if(r!==H)throw new Error("invert: does not exist");return C(o,n)}function cn(t){const n=(t-H)/ut;let e,r,o;for(e=t-H,r=0;e%ut===k;e/=ut,r++);for(o=ut;o<t&&sn(o,n,t)!==t-H;o++)if(o>1e3)throw new Error("Cannot find square root: likely non-prime P");if(r===1){const c=(t+H)/Xt;return function(s,u){const g=s.pow(u,c);if(!s.eql(s.sqr(g),u))throw new Error("Cannot find square root");return g}}const i=(e+H)/ut;return function(f,s){if(f.pow(s,n)===f.neg(f.ONE))throw new Error("Cannot find square root");let u=r,g=f.pow(f.mul(f.ONE,o),e),l=f.pow(s,i),d=f.pow(s,e);for(;!f.eql(d,f.ONE);){if(f.eql(d,f.ZERO))return f.ZERO;let w=1;for(let y=f.sqr(d);w<u&&!f.eql(y,f.ONE);w++)y=f.sqr(y);const B=f.pow(g,H<<BigInt(u-w-1));g=f.sqr(B),l=f.mul(l,B),d=f.mul(d,g),u=w}return l}}function fn(t){if(t%Xt===on){const n=(t+H)/Xt;return function(r,o){const i=r.pow(o,n);if(!r.eql(r.sqr(i),o))throw new Error("Cannot find square root");return i}}if(t%ue===ae){const n=(t-ae)/ue;return function(r,o){const i=r.mul(o,ut),c=r.pow(i,n),f=r.mul(o,c),s=r.mul(r.mul(f,ut),c),u=r.mul(f,r.sub(s,r.ONE));if(!r.eql(r.sqr(u),o))throw new Error("Cannot find square root");return u}}return cn(t)}const an=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function Se(t){const n={ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"},e=an.reduce((r,o)=>(r[o]="function",r),n);return Et(t,e)}function un(t,n,e){if(e<k)throw new Error("invalid exponent, negatives unsupported");if(e===k)return t.ONE;if(e===H)return n;let r=t.ONE,o=n;for(;e>k;)e&H&&(r=t.mul(r,o)),o=t.sqr(o),e>>=H;return r}function ln(t,n){const e=new Array(n.length),r=n.reduce((i,c,f)=>t.is0(c)?i:(e[f]=i,t.mul(i,c)),t.ONE),o=t.inv(r);return n.reduceRight((i,c,f)=>t.is0(c)?i:(e[f]=t.mul(i,e[f]),t.mul(i,c)),o),e}function Ae(t,n){const e=n!==void 0?n:t.toString(2).length,r=Math.ceil(e/8);return{nBitLength:e,nByteLength:r}}function Ie(t,n,e=!1,r={}){if(t<=k)throw new Error("invalid field: expected ORDER > 0, got "+t);const{nBitLength:o,nByteLength:i}=Ae(t,n);if(i>2048)throw new Error("invalid field: expected ORDER of <= 2048 bytes");let c;const f=Object.freeze({ORDER:t,isLE:e,BITS:o,BYTES:i,MASK:re(o),ZERO:k,ONE:H,create:s=>C(s,t),isValid:s=>{if(typeof s!="bigint")throw new Error("invalid field element: expected bigint, got "+typeof s);return k<=s&&s<t},is0:s=>s===k,isOdd:s=>(s&H)===H,neg:s=>C(-s,t),eql:(s,u)=>s===u,sqr:s=>C(s*s,t),add:(s,u)=>C(s+u,t),sub:(s,u)=>C(s-u,t),mul:(s,u)=>C(s*u,t),pow:(s,u)=>un(f,s,u),div:(s,u)=>C(s*Qt(u,t),t),sqrN:s=>s*s,addN:(s,u)=>s+u,subN:(s,u)=>s-u,mulN:(s,u)=>s*u,inv:s=>Qt(s,t),sqrt:r.sqrt||(s=>(c||(c=fn(t)),c(f,s))),invertBatch:s=>ln(f,s),cmov:(s,u,g)=>g?u:s,toBytes:s=>e?ne(s,i):st(s,i),fromBytes:s=>{if(s.length!==i)throw new Error("Field.fromBytes: expected "+i+" bytes, got "+s.length);return e?ee(s):$(s)}});return Object.freeze(f)}function _e(t){if(typeof t!="bigint")throw new Error("field order must be bigint");const n=t.toString(2).length;return Math.ceil(n/8)}function qe(t){const n=_e(t);return n+Math.ceil(n/2)}function dn(t,n,e=!1){const r=t.length,o=_e(n),i=qe(n);if(r<16||r<i||r>1024)throw new Error("expected "+i+"-1024 bytes of input, got "+r);const c=e?ee(t):$(t),f=C(c,n-H)+H;return e?ne(f,o):st(f,o)}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const le=BigInt(0),qt=BigInt(1);function Kt(t,n){const e=n.negate();return t?e:n}function Oe(t,n){if(!Number.isSafeInteger(t)||t<=0||t>n)throw new Error("invalid window size, expected [1.."+n+"], got W="+t)}function Dt(t,n){Oe(t,n);const e=Math.ceil(n/t)+1,r=2**(t-1);return{windows:e,windowSize:r}}function hn(t,n){if(!Array.isArray(t))throw new Error("array expected");t.forEach((e,r)=>{if(!(e instanceof n))throw new Error("invalid point at index "+r)})}function gn(t,n){if(!Array.isArray(t))throw new Error("array of scalars expected");t.forEach((e,r)=>{if(!n.isValid(e))throw new Error("invalid scalar at index "+r)})}const Yt=new WeakMap,Ne=new WeakMap;function Gt(t){return Ne.get(t)||1}function wn(t,n){return{constTimeNegate:Kt,hasPrecomputes(e){return Gt(e)!==1},unsafeLadder(e,r,o=t.ZERO){let i=e;for(;r>le;)r&qt&&(o=o.add(i)),i=i.double(),r>>=qt;return o},precomputeWindow(e,r){const{windows:o,windowSize:i}=Dt(r,n),c=[];let f=e,s=f;for(let u=0;u<o;u++){s=f,c.push(s);for(let g=1;g<i;g++)s=s.add(f),c.push(s);f=s.double()}return c},wNAF(e,r,o){const{windows:i,windowSize:c}=Dt(e,n);let f=t.ZERO,s=t.BASE;const u=BigInt(2**e-1),g=2**e,l=BigInt(e);for(let d=0;d<i;d++){const w=d*c;let B=Number(o&u);o>>=l,B>c&&(B-=g,o+=qt);const y=w,a=w+Math.abs(B)-1,h=d%2!==0,b=B<0;B===0?s=s.add(Kt(h,r[y])):f=f.add(Kt(b,r[a]))}return{p:f,f:s}},wNAFUnsafe(e,r,o,i=t.ZERO){const{windows:c,windowSize:f}=Dt(e,n),s=BigInt(2**e-1),u=2**e,g=BigInt(e);for(let l=0;l<c;l++){const d=l*f;if(o===le)break;let w=Number(o&s);if(o>>=g,w>f&&(w-=u,o+=qt),w===0)continue;let B=r[d+Math.abs(w)-1];w<0&&(B=B.negate()),i=i.add(B)}return i},getPrecomputes(e,r,o){let i=Yt.get(r);return i||(i=this.precomputeWindow(r,e),e!==1&&Yt.set(r,o(i))),i},wNAFCached(e,r,o){const i=Gt(e);return this.wNAF(i,this.getPrecomputes(i,e,o),r)},wNAFCachedUnsafe(e,r,o,i){const c=Gt(e);return c===1?this.unsafeLadder(e,r,i):this.wNAFUnsafe(c,this.getPrecomputes(c,e,o),r,i)},setWindowSize(e,r){Oe(r,n),Ne.set(e,r),Yt.delete(e)}}}function bn(t,n,e,r){if(hn(e,t),gn(r,n),e.length!==r.length)throw new Error("arrays of points and scalars must have equal length");const o=t.ZERO,i=xe(BigInt(e.length)),c=i>12?i-3:i>4?i-2:i?2:1,f=(1<<c)-1,s=new Array(f+1).fill(o),u=Math.floor((n.BITS-1)/c)*c;let g=o;for(let l=u;l>=0;l-=c){s.fill(o);for(let w=0;w<r.length;w++){const B=r[w],y=Number(B>>BigInt(l)&BigInt(f));s[y]=s[y].add(e[w])}let d=o;for(let w=s.length-1,B=o;w>0;w--)B=B.add(s[w]),d=d.add(B);if(g=g.add(d),l!==0)for(let w=0;w<c;w++)g=g.double()}return g}function Ue(t){return Se(t.Fp),Et(t,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...Ae(t.n,t.nBitLength),...t,p:t.Fp.ORDER})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */function de(t){t.lowS!==void 0&&mt("lowS",t.lowS),t.prehash!==void 0&&mt("prehash",t.prehash)}function mn(t){const n=Ue(t);Et(n,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:e,Fp:r,a:o}=n;if(e){if(!r.eql(o,r.ZERO))throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");if(typeof e!="object"||typeof e.beta!="bigint"||typeof e.splitScalar!="function")throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function")}return Object.freeze({...n})}const{bytesToNumberBE:yn,hexToBytes:pn}=rn;class xn extends Error{constructor(n=""){super(n)}}const F={Err:xn,_tlv:{encode:(t,n)=>{const{Err:e}=F;if(t<0||t>256)throw new e("tlv.encode: wrong tag");if(n.length&1)throw new e("tlv.encode: unpadded data");const r=n.length/2,o=wt(r);if(o.length/2&128)throw new e("tlv.encode: long form length too big");const i=r>127?wt(o.length/2|128):"";return wt(t)+i+o+n},decode(t,n){const{Err:e}=F;let r=0;if(t<0||t>256)throw new e("tlv.encode: wrong tag");if(n.length<2||n[r++]!==t)throw new e("tlv.decode: wrong tlv");const o=n[r++],i=!!(o&128);let c=0;if(!i)c=o;else{const s=o&127;if(!s)throw new e("tlv.decode(long): indefinite length not supported");if(s>4)throw new e("tlv.decode(long): byte length is too big");const u=n.subarray(r,r+s);if(u.length!==s)throw new e("tlv.decode: length bytes not complete");if(u[0]===0)throw new e("tlv.decode(long): zero leftmost byte");for(const g of u)c=c<<8|g;if(r+=s,c<128)throw new e("tlv.decode(long): not minimal encoding")}const f=n.subarray(r,r+c);if(f.length!==c)throw new e("tlv.decode: wrong value length");return{v:f,l:n.subarray(r+c)}}},_int:{encode(t){const{Err:n}=F;if(t<G)throw new n("integer: negative integers are not allowed");let e=wt(t);if(Number.parseInt(e[0],16)&8&&(e="00"+e),e.length&1)throw new n("unexpected DER parsing assertion: unpadded hex");return e},decode(t){const{Err:n}=F;if(t[0]&128)throw new n("invalid signature integer: negative");if(t[0]===0&&!(t[1]&128))throw new n("invalid signature integer: unnecessary leading zero");return yn(t)}},toSig(t){const{Err:n,_int:e,_tlv:r}=F,o=typeof t=="string"?pn(t):t;X(o);const{v:i,l:c}=r.decode(48,o);if(c.length)throw new n("invalid signature: left bytes after parsing");const{v:f,l:s}=r.decode(2,i),{v:u,l:g}=r.decode(2,s);if(g.length)throw new n("invalid signature: left bytes after parsing");return{r:e.decode(f),s:e.decode(u)}},hexFromSig(t){const{_tlv:n,_int:e}=F,r=n.encode(2,e.encode(t.r)),o=n.encode(2,e.encode(t.s)),i=r+o;return n.encode(48,i)}},G=BigInt(0),L=BigInt(1),rt=BigInt(2),Ut=BigInt(3),he=BigInt(4);function En(t){const n=mn(t),{Fp:e}=n,r=Ie(n.n,n.nBitLength),o=n.toBytes||((y,a,h)=>{const b=a.toAffine();return K(Uint8Array.from([4]),e.toBytes(b.x),e.toBytes(b.y))}),i=n.fromBytes||(y=>{const a=y.subarray(1),h=e.fromBytes(a.subarray(0,e.BYTES)),b=e.fromBytes(a.subarray(e.BYTES,2*e.BYTES));return{x:h,y:b}});function c(y){const{a,b:h}=n,b=e.sqr(y),p=e.mul(b,y);return e.add(e.add(p,e.mul(y,a)),h)}if(!e.eql(e.sqr(n.Gy),c(n.Gx)))throw new Error("bad generator point: equation left != right");function f(y){return xt(y,L,n.n)}function s(y){const{allowedPrivateKeyLengths:a,nByteLength:h,wrapPrivateKey:b,n:p}=n;if(a&&typeof y!="bigint"){if(lt(y)&&(y=yt(y)),typeof y!="string"||!a.includes(y.length))throw new Error("invalid private key");y=y.padStart(h*2,"0")}let v;try{v=typeof y=="bigint"?y:$(V("private key",y,h))}catch{throw new Error("invalid private key, expected hex or "+h+" bytes, got "+typeof y)}return b&&(v=C(v,p)),it("private key",v,L,p),v}function u(y){if(!(y instanceof d))throw new Error("ProjectivePoint expected")}const g=$t((y,a)=>{const{px:h,py:b,pz:p}=y;if(e.eql(p,e.ONE))return{x:h,y:b};const v=y.is0();a==null&&(a=v?e.ONE:e.inv(p));const O=e.mul(h,a),_=e.mul(b,a),S=e.mul(p,a);if(v)return{x:e.ZERO,y:e.ZERO};if(!e.eql(S,e.ONE))throw new Error("invZ was invalid");return{x:O,y:_}}),l=$t(y=>{if(y.is0()){if(n.allowInfinityPoint&&!e.is0(y.py))return;throw new Error("bad point: ZERO")}const{x:a,y:h}=y.toAffine();if(!e.isValid(a)||!e.isValid(h))throw new Error("bad point: x or y not FE");const b=e.sqr(h),p=c(a);if(!e.eql(b,p))throw new Error("bad point: equation left != right");if(!y.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0});class d{constructor(a,h,b){if(this.px=a,this.py=h,this.pz=b,a==null||!e.isValid(a))throw new Error("x required");if(h==null||!e.isValid(h))throw new Error("y required");if(b==null||!e.isValid(b))throw new Error("z required");Object.freeze(this)}static fromAffine(a){const{x:h,y:b}=a||{};if(!a||!e.isValid(h)||!e.isValid(b))throw new Error("invalid affine point");if(a instanceof d)throw new Error("projective point not allowed");const p=v=>e.eql(v,e.ZERO);return p(h)&&p(b)?d.ZERO:new d(h,b,e.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(a){const h=e.invertBatch(a.map(b=>b.pz));return a.map((b,p)=>b.toAffine(h[p])).map(d.fromAffine)}static fromHex(a){const h=d.fromAffine(i(V("pointHex",a)));return h.assertValidity(),h}static fromPrivateKey(a){return d.BASE.multiply(s(a))}static msm(a,h){return bn(d,r,a,h)}_setWindowSize(a){B.setWindowSize(this,a)}assertValidity(){l(this)}hasEvenY(){const{y:a}=this.toAffine();if(e.isOdd)return!e.isOdd(a);throw new Error("Field doesn't support isOdd")}equals(a){u(a);const{px:h,py:b,pz:p}=this,{px:v,py:O,pz:_}=a,S=e.eql(e.mul(h,_),e.mul(v,p)),I=e.eql(e.mul(b,_),e.mul(O,p));return S&&I}negate(){return new d(this.px,e.neg(this.py),this.pz)}double(){const{a,b:h}=n,b=e.mul(h,Ut),{px:p,py:v,pz:O}=this;let _=e.ZERO,S=e.ZERO,I=e.ZERO,A=e.mul(p,p),Z=e.mul(v,v),T=e.mul(O,O),U=e.mul(p,v);return U=e.add(U,U),I=e.mul(p,O),I=e.add(I,I),_=e.mul(a,I),S=e.mul(b,T),S=e.add(_,S),_=e.sub(Z,S),S=e.add(Z,S),S=e.mul(_,S),_=e.mul(U,_),I=e.mul(b,I),T=e.mul(a,T),U=e.sub(A,T),U=e.mul(a,U),U=e.add(U,I),I=e.add(A,A),A=e.add(I,A),A=e.add(A,T),A=e.mul(A,U),S=e.add(S,A),T=e.mul(v,O),T=e.add(T,T),A=e.mul(T,U),_=e.sub(_,A),I=e.mul(T,Z),I=e.add(I,I),I=e.add(I,I),new d(_,S,I)}add(a){u(a);const{px:h,py:b,pz:p}=this,{px:v,py:O,pz:_}=a;let S=e.ZERO,I=e.ZERO,A=e.ZERO;const Z=n.a,T=e.mul(n.b,Ut);let U=e.mul(h,v),j=e.mul(b,O),m=e.mul(p,_),x=e.add(h,b),E=e.add(v,O);x=e.mul(x,E),E=e.add(U,j),x=e.sub(x,E),E=e.add(h,p);let q=e.add(v,_);return E=e.mul(E,q),q=e.add(U,m),E=e.sub(E,q),q=e.add(b,p),S=e.add(O,_),q=e.mul(q,S),S=e.add(j,m),q=e.sub(q,S),A=e.mul(Z,E),S=e.mul(T,m),A=e.add(S,A),S=e.sub(j,A),A=e.add(j,A),I=e.mul(S,A),j=e.add(U,U),j=e.add(j,U),m=e.mul(Z,m),E=e.mul(T,E),j=e.add(j,m),m=e.sub(U,m),m=e.mul(Z,m),E=e.add(E,m),U=e.mul(j,E),I=e.add(I,U),U=e.mul(q,E),S=e.mul(x,S),S=e.sub(S,U),U=e.mul(x,j),A=e.mul(q,A),A=e.add(A,U),new d(S,I,A)}subtract(a){return this.add(a.negate())}is0(){return this.equals(d.ZERO)}wNAF(a){return B.wNAFCached(this,a,d.normalizeZ)}multiplyUnsafe(a){const{endo:h,n:b}=n;it("scalar",a,G,b);const p=d.ZERO;if(a===G)return p;if(this.is0()||a===L)return this;if(!h||B.hasPrecomputes(this))return B.wNAFCachedUnsafe(this,a,d.normalizeZ);let{k1neg:v,k1:O,k2neg:_,k2:S}=h.splitScalar(a),I=p,A=p,Z=this;for(;O>G||S>G;)O&L&&(I=I.add(Z)),S&L&&(A=A.add(Z)),Z=Z.double(),O>>=L,S>>=L;return v&&(I=I.negate()),_&&(A=A.negate()),A=new d(e.mul(A.px,h.beta),A.py,A.pz),I.add(A)}multiply(a){const{endo:h,n:b}=n;it("scalar",a,L,b);let p,v;if(h){const{k1neg:O,k1:_,k2neg:S,k2:I}=h.splitScalar(a);let{p:A,f:Z}=this.wNAF(_),{p:T,f:U}=this.wNAF(I);A=B.constTimeNegate(O,A),T=B.constTimeNegate(S,T),T=new d(e.mul(T.px,h.beta),T.py,T.pz),p=A.add(T),v=Z.add(U)}else{const{p:O,f:_}=this.wNAF(a);p=O,v=_}return d.normalizeZ([p,v])[0]}multiplyAndAddUnsafe(a,h,b){const p=d.BASE,v=(_,S)=>S===G||S===L||!_.equals(p)?_.multiplyUnsafe(S):_.multiply(S),O=v(this,h).add(v(a,b));return O.is0()?void 0:O}toAffine(a){return g(this,a)}isTorsionFree(){const{h:a,isTorsionFree:h}=n;if(a===L)return!0;if(h)return h(d,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:a,clearCofactor:h}=n;return a===L?this:h?h(d,this):this.multiplyUnsafe(n.h)}toRawBytes(a=!0){return mt("isCompressed",a),this.assertValidity(),o(d,this,a)}toHex(a=!0){return mt("isCompressed",a),yt(this.toRawBytes(a))}}d.BASE=new d(n.Gx,n.Gy,e.ONE),d.ZERO=new d(e.ZERO,e.ONE,e.ZERO);const w=n.nBitLength,B=wn(d,n.endo?Math.ceil(w/2):w);return{CURVE:n,ProjectivePoint:d,normPrivateKeyToScalar:s,weierstrassEquation:c,isWithinCurveOrder:f}}function Bn(t){const n=Ue(t);return Et(n,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...n})}function vn(t){const n=Bn(t),{Fp:e,n:r}=n,o=e.BYTES+1,i=2*e.BYTES+1;function c(m){return C(m,r)}function f(m){return Qt(m,r)}const{ProjectivePoint:s,normPrivateKeyToScalar:u,weierstrassEquation:g,isWithinCurveOrder:l}=En({...n,toBytes(m,x,E){const q=x.toAffine(),N=e.toBytes(q.x),R=K;return mt("isCompressed",E),E?R(Uint8Array.from([x.hasEvenY()?2:3]),N):R(Uint8Array.from([4]),N,e.toBytes(q.y))},fromBytes(m){const x=m.length,E=m[0],q=m.subarray(1);if(x===o&&(E===2||E===3)){const N=$(q);if(!xt(N,L,e.ORDER))throw new Error("Point is not on curve");const R=g(N);let M;try{M=e.sqrt(R)}catch(Y){const P=Y instanceof Error?": "+Y.message:"";throw new Error("Point is not on curve"+P)}const z=(M&L)===L;return(E&1)===1!==z&&(M=e.neg(M)),{x:N,y:M}}else if(x===i&&E===4){const N=e.fromBytes(q.subarray(0,e.BYTES)),R=e.fromBytes(q.subarray(e.BYTES,2*e.BYTES));return{x:N,y:R}}else{const N=o,R=i;throw new Error("invalid Point, expected length of "+N+", or uncompressed "+R+", got "+x)}}}),d=m=>yt(st(m,n.nByteLength));function w(m){const x=r>>L;return m>x}function B(m){return w(m)?c(-m):m}const y=(m,x,E)=>$(m.slice(x,E));class a{constructor(x,E,q){this.r=x,this.s=E,this.recovery=q,this.assertValidity()}static fromCompact(x){const E=n.nByteLength;return x=V("compactSignature",x,E*2),new a(y(x,0,E),y(x,E,2*E))}static fromDER(x){const{r:E,s:q}=F.toSig(V("DER",x));return new a(E,q)}assertValidity(){it("r",this.r,L,r),it("s",this.s,L,r)}addRecoveryBit(x){return new a(this.r,this.s,x)}recoverPublicKey(x){const{r:E,s:q,recovery:N}=this,R=_(V("msgHash",x));if(N==null||![0,1,2,3].includes(N))throw new Error("recovery id invalid");const M=N===2||N===3?E+n.n:E;if(M>=e.ORDER)throw new Error("recovery id 2 or 3 invalid");const z=N&1?"03":"02",Q=s.fromHex(z+d(M)),Y=f(M),P=c(-R*Y),dt=c(q*Y),tt=s.BASE.multiplyAndAddUnsafe(Q,P,dt);if(!tt)throw new Error("point at infinify");return tt.assertValidity(),tt}hasHighS(){return w(this.s)}normalizeS(){return this.hasHighS()?new a(this.r,c(-this.s),this.recovery):this}toDERRawBytes(){return pt(this.toDERHex())}toDERHex(){return F.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return pt(this.toCompactHex())}toCompactHex(){return d(this.r)+d(this.s)}}const h={isValidPrivateKey(m){try{return u(m),!0}catch{return!1}},normPrivateKeyToScalar:u,randomPrivateKey:()=>{const m=qe(n.n);return dn(n.randomBytes(m),n.n)},precompute(m=8,x=s.BASE){return x._setWindowSize(m),x.multiply(BigInt(3)),x}};function b(m,x=!0){return s.fromPrivateKey(m).toRawBytes(x)}function p(m){const x=lt(m),E=typeof m=="string",q=(x||E)&&m.length;return x?q===o||q===i:E?q===2*o||q===2*i:m instanceof s}function v(m,x,E=!0){if(p(m))throw new Error("first arg must be private key");if(!p(x))throw new Error("second arg must be public key");return s.fromHex(x).multiply(u(m)).toRawBytes(E)}const O=n.bits2int||function(m){if(m.length>8192)throw new Error("input is too large");const x=$(m),E=m.length*8-n.nBitLength;return E>0?x>>BigInt(E):x},_=n.bits2int_modN||function(m){return c(O(m))},S=re(n.nBitLength);function I(m){return it("num < 2^"+n.nBitLength,m,G,S),st(m,n.nByteLength)}function A(m,x,E=Z){if(["recovered","canonical"].some(ft=>ft in E))throw new Error("sign() legacy options not supported");const{hash:q,randomBytes:N}=n;let{lowS:R,prehash:M,extraEntropy:z}=E;R==null&&(R=!0),m=V("msgHash",m),de(E),M&&(m=V("prehashed msgHash",q(m)));const Q=_(m),Y=u(x),P=[I(Y),I(Q)];if(z!=null&&z!==!1){const ft=z===!0?N(e.BYTES):z;P.push(V("extraEntropy",ft))}const dt=K(...P),tt=Q;function Vt(ft){const ht=O(ft);if(!l(ht))return;const zt=f(ht),Bt=s.BASE.multiply(ht).toAffine(),at=c(Bt.x);if(at===G)return;const vt=c(zt*c(tt+at*Y));if(vt===G)return;let gt=(Bt.x===at?0:2)|Number(Bt.y&L),se=vt;return R&&w(vt)&&(se=B(vt),gt^=1),new a(at,se,gt)}return{seed:dt,k2sig:Vt}}const Z={lowS:n.lowS,prehash:!1},T={lowS:n.lowS,prehash:!1};function U(m,x,E=Z){const{seed:q,k2sig:N}=A(m,x,E),R=n;return Ee(R.hash.outputLen,R.nByteLength,R.hmac)(q,N)}s.BASE._setWindowSize(8);function j(m,x,E,q=T){const N=m;x=V("msgHash",x),E=V("publicKey",E);const{lowS:R,prehash:M,format:z}=q;if(de(q),"strict"in q)throw new Error("options.strict was renamed to lowS");if(z!==void 0&&z!=="compact"&&z!=="der")throw new Error("format must be compact or der");const Q=typeof N=="string"||lt(N),Y=!Q&&!z&&typeof N=="object"&&N!==null&&typeof N.r=="bigint"&&typeof N.s=="bigint";if(!Q&&!Y)throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");let P,dt;try{if(Y&&(P=new a(N.r,N.s)),Q){try{z!=="compact"&&(P=a.fromDER(N))}catch(gt){if(!(gt instanceof F.Err))throw gt}!P&&z!=="der"&&(P=a.fromCompact(N))}dt=s.fromHex(E)}catch{return!1}if(!P||R&&P.hasHighS())return!1;M&&(x=n.hash(x));const{r:tt,s:Vt}=P,ft=_(x),ht=f(Vt),zt=c(ft*ht),Bt=c(tt*ht),at=s.BASE.multiplyAndAddUnsafe(dt,zt,Bt)?.toAffine();return at?c(at.x)===tt:!1}return{CURVE:n,getPublicKey:b,getSharedSecret:v,sign:U,verify:j,ProjectivePoint:s,Signature:a,utils:h}}function Sn(t,n){const e=t.ORDER;let r=G;for(let B=e-L;B%rt===G;B/=rt)r+=L;const o=r,i=rt<<o-L-L,c=i*rt,f=(e-L)/c,s=(f-L)/rt,u=c-L,g=i,l=t.pow(n,f),d=t.pow(n,(f+L)/rt);let w=(B,y)=>{let a=l,h=t.pow(y,u),b=t.sqr(h);b=t.mul(b,y);let p=t.mul(B,b);p=t.pow(p,s),p=t.mul(p,h),h=t.mul(p,y),b=t.mul(p,B);let v=t.mul(b,h);p=t.pow(v,g);let O=t.eql(p,t.ONE);h=t.mul(b,d),p=t.mul(v,a),b=t.cmov(h,b,O),v=t.cmov(p,v,O);for(let _=o;_>L;_--){let S=_-rt;S=rt<<S-L;let I=t.pow(v,S);const A=t.eql(I,t.ONE);h=t.mul(b,a),a=t.mul(a,a),I=t.mul(v,a),b=t.cmov(h,b,A),v=t.cmov(I,v,A)}return{isValid:O,value:b}};if(t.ORDER%he===Ut){const B=(t.ORDER-Ut)/he,y=t.sqrt(t.neg(n));w=(a,h)=>{let b=t.sqr(h);const p=t.mul(a,h);b=t.mul(b,p);let v=t.pow(b,B);v=t.mul(v,p);const O=t.mul(v,y),_=t.mul(t.sqr(v),h),S=t.eql(_,a);let I=t.cmov(O,v,S);return{isValid:S,value:I}}}return w}function An(t,n){if(Se(t),!t.isValid(n.A)||!t.isValid(n.B)||!t.isValid(n.Z))throw new Error("mapToCurveSimpleSWU: invalid opts");const e=Sn(t,n.Z);if(!t.isOdd)throw new Error("Fp.isOdd is not implemented!");return r=>{let o,i,c,f,s,u,g,l;o=t.sqr(r),o=t.mul(o,n.Z),i=t.sqr(o),i=t.add(i,o),c=t.add(i,t.ONE),c=t.mul(c,n.B),f=t.cmov(n.Z,t.neg(i),!t.eql(i,t.ZERO)),f=t.mul(f,n.A),i=t.sqr(c),u=t.sqr(f),s=t.mul(u,n.A),i=t.add(i,s),i=t.mul(i,c),u=t.mul(u,f),s=t.mul(u,n.B),i=t.add(i,s),g=t.mul(o,c);const{isValid:d,value:w}=e(i,u);l=t.mul(o,r),l=t.mul(l,w),g=t.cmov(g,c,d),l=t.cmov(l,w,d);const B=t.isOdd(r)===t.isOdd(l);return l=t.cmov(t.neg(l),l,B),g=t.div(g,f),{x:g,y:l}}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */function In(t){return{hash:t,hmac:(n,...e)=>ve(t,n,Pe(...e)),randomBytes:pe}}function _n(t,n){const e=r=>vn({...t,...In(r)});return{...e(n),create:e}}const qn=$;function ot(t,n){if(St(t),St(n),t<0||t>=1<<8*n)throw new Error("invalid I2OSP input: "+t);const e=Array.from({length:n}).fill(0);for(let r=n-1;r>=0;r--)e[r]=t&255,t>>>=8;return new Uint8Array(e)}function On(t,n){const e=new Uint8Array(t.length);for(let r=0;r<t.length;r++)e[r]=t[r]^n[r];return e}function St(t){if(!Number.isSafeInteger(t))throw new Error("number expected")}function Nn(t,n,e,r){X(t),X(n),St(e),n.length>255&&(n=r(K(kt("H2C-OVERSIZE-DST-"),n)));const{outputLen:o,blockLen:i}=r,c=Math.ceil(e/o);if(e>65535||c>255)throw new Error("expand_message_xmd: invalid lenInBytes");const f=K(n,ot(n.length,1)),s=ot(0,i),u=ot(e,2),g=new Array(c),l=r(K(s,t,u,ot(0,1),f));g[0]=r(K(l,ot(1,1),f));for(let w=1;w<=c;w++){const B=[On(l,g[w-1]),ot(w+1,1),f];g[w]=r(K(...B))}return K(...g).slice(0,e)}function Un(t,n,e,r,o){if(X(t),X(n),St(e),n.length>255){const i=Math.ceil(2*r/8);n=o.create({dkLen:i}).update(kt("H2C-OVERSIZE-DST-")).update(n).digest()}if(e>65535||n.length>255)throw new Error("expand_message_xof: invalid lenInBytes");return o.create({dkLen:e}).update(t).update(ot(e,2)).update(n).update(ot(n.length,1)).digest()}function ge(t,n,e){Et(e,{DST:"stringOrUint8Array",p:"bigint",m:"isSafeInteger",k:"isSafeInteger",hash:"hash"});const{p:r,k:o,m:i,hash:c,expand:f,DST:s}=e;X(t),St(n);const u=typeof s=="string"?kt(s):s,g=r.toString(2).length,l=Math.ceil((g+o)/8),d=n*i*l;let w;if(f==="xmd")w=Nn(t,u,d,c);else if(f==="xof")w=Un(t,u,d,o,c);else if(f==="_internal_pass")w=t;else throw new Error('expand must be "xmd" or "xof"');const B=new Array(n);for(let y=0;y<n;y++){const a=new Array(i);for(let h=0;h<i;h++){const b=l*(h+y*i),p=w.subarray(b,b+l);a[h]=C(qn(p),r)}B[y]=a}return B}function Ln(t,n){const e=n.map(r=>Array.from(r).reverse());return(r,o)=>{const[i,c,f,s]=e.map(u=>u.reduce((g,l)=>t.add(t.mul(g,r),l)));return r=t.div(i,c),o=t.mul(o,t.div(f,s)),{x:r,y:o}}}function Tn(t,n,e){if(typeof n!="function")throw new Error("mapToCurve() must be defined");return{hashToCurve(r,o){const i=ge(r,2,{...e,DST:e.DST,...o}),c=t.fromAffine(n(i[0])),f=t.fromAffine(n(i[1])),s=c.add(f).clearCofactor();return s.assertValidity(),s},encodeToCurve(r,o){const i=ge(r,1,{...e,DST:e.encodeDST,...o}),c=t.fromAffine(n(i[0])).clearCofactor();return c.assertValidity(),c},mapToCurve(r){if(!Array.isArray(r))throw new Error("mapToCurve: expected array of bigints");for(const i of r)if(typeof i!="bigint")throw new Error("mapToCurve: expected array of bigints");const o=t.fromAffine(n(r)).clearCofactor();return o.assertValidity(),o}}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const _t=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),Lt=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),At=BigInt(1),Tt=BigInt(2),we=(t,n)=>(t+n/Tt)/n;function Le(t){const n=_t,e=BigInt(3),r=BigInt(6),o=BigInt(11),i=BigInt(22),c=BigInt(23),f=BigInt(44),s=BigInt(88),u=t*t*t%n,g=u*u*t%n,l=D(g,e,n)*g%n,d=D(l,e,n)*g%n,w=D(d,Tt,n)*u%n,B=D(w,o,n)*w%n,y=D(B,i,n)*B%n,a=D(y,f,n)*y%n,h=D(a,s,n)*a%n,b=D(h,f,n)*y%n,p=D(b,e,n)*g%n,v=D(p,c,n)*B%n,O=D(v,r,n)*u%n,_=D(O,Tt,n);if(!ct.eql(ct.sqr(_),t))throw new Error("Cannot find square root");return _}const ct=Ie(_t,void 0,void 0,{sqrt:Le}),Zt=_n({a:BigInt(0),b:BigInt(7),Fp:ct,n:Lt,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:t=>{const n=Lt,e=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-At*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=e,c=BigInt("0x100000000000000000000000000000000"),f=we(i*t,n),s=we(-r*t,n);let u=C(t-f*e-s*o,n),g=C(-f*r-s*i,n);const l=u>c,d=g>c;if(l&&(u=n-u),d&&(g=n-g),u>c||g>c)throw new Error("splitScalar: Endomorphism failed, k="+t);return{k1neg:l,k1:u,k2neg:d,k2:g}}}},Nt),Te=BigInt(0),be={};function Ht(t,...n){let e=be[t];if(e===void 0){const r=Nt(Uint8Array.from(t,o=>o.charCodeAt(0)));e=K(r,r),be[t]=e}return Nt(K(e,...n))}const oe=t=>t.toRawBytes(!0).slice(1),Jt=t=>st(t,32),Wt=t=>C(t,_t),It=t=>C(t,Lt),ie=Zt.ProjectivePoint,Hn=(t,n,e)=>ie.BASE.multiplyAndAddUnsafe(t,n,e);function Ft(t){let n=Zt.utils.normPrivateKeyToScalar(t),e=ie.fromPrivateKey(n);return{scalar:e.hasEvenY()?n:It(-n),bytes:oe(e)}}function He(t){it("x",t,At,_t);const n=Wt(t*t),e=Wt(n*t+BigInt(7));let r=Le(e);r%Tt!==Te&&(r=Wt(-r));const o=new ie(t,r,At);return o.assertValidity(),o}const bt=$;function Re(...t){return It(bt(Ht("BIP0340/challenge",...t)))}function Rn(t){return Ft(t).bytes}function Cn(t,n,e=pe(32)){const r=V("message",t),{bytes:o,scalar:i}=Ft(n),c=V("auxRand",e,32),f=Jt(i^bt(Ht("BIP0340/aux",c))),s=Ht("BIP0340/nonce",f,o,r),u=It(bt(s));if(u===Te)throw new Error("sign failed: k is zero");const{bytes:g,scalar:l}=Ft(u),d=Re(g,o,r),w=new Uint8Array(64);if(w.set(g,0),w.set(Jt(It(l+d*i)),32),!Ce(w,r,o))throw new Error("sign: Invalid signature produced");return w}function Ce(t,n,e){const r=V("signature",t,64),o=V("message",n),i=V("publicKey",e,32);try{const c=He(bt(i)),f=bt(r.subarray(0,32));if(!xt(f,At,_t))return!1;const s=bt(r.subarray(32,64));if(!xt(s,At,Lt))return!1;const u=Re(Jt(f),oe(c),o),g=Hn(c,s,It(-u));return!(!g||!g.hasEvenY()||g.toAffine().x!==f)}catch{return!1}}const zn={getPublicKey:Rn,sign:Cn,verify:Ce,utils:{randomPrivateKey:Zt.utils.randomPrivateKey,lift_x:He,pointToBytes:oe,numberToBytesBE:st,bytesToNumberBE:$,taggedHash:Ht,mod:C}},kn=Ln(ct,[["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map(t=>t.map(n=>BigInt(n)))),Zn=An(ct,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:ct.create(BigInt("-11"))}),ke=Tn(Zt.ProjectivePoint,t=>{const{x:n,y:e}=Zn(ct.create(t[0]));return kn(n,e)},{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:ct.ORDER,m:1,k:128,expand:"xmd",hash:Nt}),Mn=ke.hashToCurve,Pn=ke.encodeToCurve;export{Pn as encodeToCurve,Mn as hashToCurve,zn as schnorr,Zt as secp256k1};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
