import{i as d,r as f,a as p,x as g}from"./index-C4QAg8YX.js";import{n as c,c as u}from"./if-defined-BYYrXBY0.js";const x=d`
  :host {
    display: flex;
  }

  :host([data-size='sm']) > svg {
    width: 12px;
    height: 12px;
  }

  :host([data-size='md']) > svg {
    width: 16px;
    height: 16px;
  }

  :host([data-size='lg']) > svg {
    width: 24px;
    height: 24px;
  }

  :host([data-size='xl']) > svg {
    width: 32px;
    height: 32px;
  }

  svg {
    animation: rotate 2s linear infinite;
  }

  circle {
    fill: none;
    stroke: var(--local-color);
    stroke-width: 4px;
    stroke-dasharray: 1, 124;
    stroke-dashoffset: 0;
    stroke-linecap: round;
    animation: dash 1.5s ease-in-out infinite;
  }

  :host([data-size='md']) > svg > circle {
    stroke-width: 6px;
  }

  :host([data-size='sm']) > svg > circle {
    stroke-width: 8px;
  }

  @keyframes rotate {
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes dash {
    0% {
      stroke-dasharray: 1, 124;
      stroke-dashoffset: 0;
    }

    50% {
      stroke-dasharray: 90, 124;
      stroke-dashoffset: -35;
    }

    100% {
      stroke-dashoffset: -125;
    }
  }
`;var l=function(o,t,s,r){var a=arguments.length,e=a<3?t:r===null?r=Object.getOwnPropertyDescriptor(t,s):r,n;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")e=Reflect.decorate(o,t,s,r);else for(var h=o.length-1;h>=0;h--)(n=o[h])&&(e=(a<3?n(e):a>3?n(t,s,e):n(t,s))||e);return a>3&&e&&Object.defineProperty(t,s,e),e};let i=class extends p{constructor(){super(...arguments),this.color="accent-100",this.size="lg"}render(){return this.style.cssText=`--local-color: ${this.color==="inherit"?"inherit":`var(--wui-color-${this.color})`}`,this.dataset.size=this.size,g`<svg viewBox="25 25 50 50">
      <circle r="20" cy="50" cx="50"></circle>
    </svg>`}};i.styles=[f,x];l([c()],i.prototype,"color",void 0);l([c()],i.prototype,"size",void 0);i=l([u("wui-loading-spinner")],i);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtQlRhMncyUjUuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9AcmVvd24vYXBwa2l0LXVpL2Rpc3QvZXNtL3NyYy9jb21wb25lbnRzL3d1aS1sb2FkaW5nLXNwaW5uZXIvc3R5bGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0ByZW93bi9hcHBraXQtdWkvZGlzdC9lc20vc3JjL2NvbXBvbmVudHMvd3VpLWxvYWRpbmctc3Bpbm5lci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuZXhwb3J0IGRlZmF1bHQgY3NzIGBcbiAgOmhvc3Qge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gIH1cblxuICA6aG9zdChbZGF0YS1zaXplPSdzbSddKSA+IHN2ZyB7XG4gICAgd2lkdGg6IDEycHg7XG4gICAgaGVpZ2h0OiAxMnB4O1xuICB9XG5cbiAgOmhvc3QoW2RhdGEtc2l6ZT0nbWQnXSkgPiBzdmcge1xuICAgIHdpZHRoOiAxNnB4O1xuICAgIGhlaWdodDogMTZweDtcbiAgfVxuXG4gIDpob3N0KFtkYXRhLXNpemU9J2xnJ10pID4gc3ZnIHtcbiAgICB3aWR0aDogMjRweDtcbiAgICBoZWlnaHQ6IDI0cHg7XG4gIH1cblxuICA6aG9zdChbZGF0YS1zaXplPSd4bCddKSA+IHN2ZyB7XG4gICAgd2lkdGg6IDMycHg7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5cbiAgc3ZnIHtcbiAgICBhbmltYXRpb246IHJvdGF0ZSAycyBsaW5lYXIgaW5maW5pdGU7XG4gIH1cblxuICBjaXJjbGUge1xuICAgIGZpbGw6IG5vbmU7XG4gICAgc3Ryb2tlOiB2YXIoLS1sb2NhbC1jb2xvcik7XG4gICAgc3Ryb2tlLXdpZHRoOiA0cHg7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMSwgMTI0O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbiAgICBhbmltYXRpb246IGRhc2ggMS41cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgfVxuXG4gIDpob3N0KFtkYXRhLXNpemU9J21kJ10pID4gc3ZnID4gY2lyY2xlIHtcbiAgICBzdHJva2Utd2lkdGg6IDZweDtcbiAgfVxuXG4gIDpob3N0KFtkYXRhLXNpemU9J3NtJ10pID4gc3ZnID4gY2lyY2xlIHtcbiAgICBzdHJva2Utd2lkdGg6IDhweDtcbiAgfVxuXG4gIEBrZXlmcmFtZXMgcm90YXRlIHtcbiAgICAxMDAlIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gICAgfVxuICB9XG5cbiAgQGtleWZyYW1lcyBkYXNoIHtcbiAgICAwJSB7XG4gICAgICBzdHJva2UtZGFzaGFycmF5OiAxLCAxMjQ7XG4gICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICB9XG5cbiAgICA1MCUge1xuICAgICAgc3Ryb2tlLWRhc2hhcnJheTogOTAsIDEyNDtcbiAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMzU7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBzdHJva2UtZGFzaG9mZnNldDogLTEyNTtcbiAgICB9XG4gIH1cbmA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZXMuanMubWFwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHJlc2V0U3R5bGVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvVGhlbWVVdGlsLmpzJztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tICcuLi8uLi91dGlscy9XZWJDb21wb25lbnRzVXRpbC5qcyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLmpzJztcbmxldCBXdWlMb2FkaW5nU3Bpbm5lciA9IGNsYXNzIFd1aUxvYWRpbmdTcGlubmVyIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnYWNjZW50LTEwMCc7XG4gICAgICAgIHRoaXMuc2l6ZSA9ICdsZyc7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gYC0tbG9jYWwtY29sb3I6ICR7dGhpcy5jb2xvciA9PT0gJ2luaGVyaXQnID8gJ2luaGVyaXQnIDogYHZhcigtLXd1aS1jb2xvci0ke3RoaXMuY29sb3J9KWB9YDtcbiAgICAgICAgdGhpcy5kYXRhc2V0WydzaXplJ10gPSB0aGlzLnNpemU7XG4gICAgICAgIHJldHVybiBodG1sIGA8c3ZnIHZpZXdCb3g9XCIyNSAyNSA1MCA1MFwiPlxuICAgICAgPGNpcmNsZSByPVwiMjBcIiBjeT1cIjUwXCIgY3g9XCI1MFwiPjwvY2lyY2xlPlxuICAgIDwvc3ZnPmA7XG4gICAgfVxufTtcbld1aUxvYWRpbmdTcGlubmVyLnN0eWxlcyA9IFtyZXNldFN0eWxlcywgc3R5bGVzXTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KClcbl0sIFd1aUxvYWRpbmdTcGlubmVyLnByb3RvdHlwZSwgXCJjb2xvclwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoKVxuXSwgV3VpTG9hZGluZ1NwaW5uZXIucHJvdG90eXBlLCBcInNpemVcIiwgdm9pZCAwKTtcbld1aUxvYWRpbmdTcGlubmVyID0gX19kZWNvcmF0ZShbXG4gICAgY3VzdG9tRWxlbWVudCgnd3VpLWxvYWRpbmctc3Bpbm5lcicpXG5dLCBXdWlMb2FkaW5nU3Bpbm5lcik7XG5leHBvcnQgeyBXdWlMb2FkaW5nU3Bpbm5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbInN0eWxlcyIsImNzcyIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJyIiwiZCIsImkiLCJXdWlMb2FkaW5nU3Bpbm5lciIsIkxpdEVsZW1lbnQiLCJodG1sIiwicmVzZXRTdHlsZXMiLCJwcm9wZXJ0eSIsImN1c3RvbUVsZW1lbnQiXSwibWFwcGluZ3MiOiJpSEFDQSxNQUFBQSxFQUFlQztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQSxFQ0RmLElBQUlDLEVBQTBDLFNBQVVDLEVBQVlDLEVBQVFDLEVBQUtDLEVBQU0sQ0FDbkYsSUFBSUMsRUFBSSxVQUFVLE9BQVFDLEVBQUlELEVBQUksRUFBSUgsRUFBU0UsSUFBUyxLQUFPQSxFQUFPLE9BQU8seUJBQXlCRixFQUFRQyxDQUFHLEVBQUlDLEVBQU1HLEVBQzNILEdBQUksT0FBTyxTQUFZLFVBQVksT0FBTyxRQUFRLFVBQWEsV0FBWUQsRUFBSSxRQUFRLFNBQVNMLEVBQVlDLEVBQVFDLEVBQUtDLENBQUksTUFDeEgsU0FBU0ksRUFBSVAsRUFBVyxPQUFTLEVBQUdPLEdBQUssRUFBR0EsS0FBU0QsRUFBSU4sRUFBV08sQ0FBQyxLQUFHRixHQUFLRCxFQUFJLEVBQUlFLEVBQUVELENBQUMsRUFBSUQsRUFBSSxFQUFJRSxFQUFFTCxFQUFRQyxFQUFLRyxDQUFDLEVBQUlDLEVBQUVMLEVBQVFDLENBQUcsSUFBTUcsR0FDaEosT0FBT0QsRUFBSSxHQUFLQyxHQUFLLE9BQU8sZUFBZUosRUFBUUMsRUFBS0csQ0FBQyxFQUFHQSxDQUNoRSxFQU1BLElBQUlHLEVBQW9CLGNBQWdDQyxDQUFXLENBQy9ELGFBQWMsQ0FDVixNQUFNLEdBQUcsU0FBUyxFQUNsQixLQUFLLE1BQVEsYUFDYixLQUFLLEtBQU8sSUFDcEIsQ0FDSSxRQUFTLENBQ0wsWUFBSyxNQUFNLFFBQVUsa0JBQWtCLEtBQUssUUFBVSxVQUFZLFVBQVksbUJBQW1CLEtBQUssS0FBSyxHQUFHLEdBQzlHLEtBQUssUUFBUSxLQUFVLEtBQUssS0FDckJDO0FBQUFBO0FBQUFBLFdBR2YsQ0FDQSxFQUNBRixFQUFrQixPQUFTLENBQUNHLEVBQWFkLENBQU0sRUFDL0NFLEVBQVcsQ0FDUGEsRUFBUSxDQUNaLEVBQUdKLEVBQWtCLFVBQVcsUUFBUyxNQUFNLEVBQy9DVCxFQUFXLENBQ1BhLEVBQVEsQ0FDWixFQUFHSixFQUFrQixVQUFXLE9BQVEsTUFBTSxFQUM5Q0EsRUFBb0JULEVBQVcsQ0FDM0JjLEVBQWMscUJBQXFCLENBQ3ZDLEVBQUdMLENBQWlCIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMV19
