import{e as T,A as w,B as m,k as A,N as u,w as _,u as L,R as g,S as k,f as I,W as y,d as v,n as G,v as E,b as D,C as R,c as O,y as z,z as $,i as q,r as j,h as Q,a as V,x as N}from"./index-lhkfOjOH.js";import{n as x,c as H}from"./if-defined-DRopHhnz.js";import"./index-YqHXSjNe.js";import"./index-Dp4YtckF.js";const C={async getTokenList(){const n=T.state.activeCaipNetwork;return(await m.fetchSwapTokens({chainId:n?.caipNetworkId}))?.tokens?.map(s=>({...s,eip2612:!1,quantity:{decimals:"0",numeric:"0"},price:0,value:0}))||[]},async fetchGasPrice(){const n=T.state.activeCaipNetwork;if(!n)return null;try{switch(n.chainNamespace){case"solana":const t=(await A?.estimateGas({chainNamespace:"solana"}))?.toString();return{standard:t,fast:t,instant:t};case"eip155":default:return await m.fetchGasPrice({chainId:n.caipNetworkId})}}catch{return null}},async fetchSwapAllowance({tokenAddress:n,userAddress:t,sourceTokenAmount:o,sourceTokenDecimals:s}){const r=await m.fetchSwapAllowance({tokenAddress:n,userAddress:t});if(r?.allowance&&o&&s){const i=A.parseUnits(o,s)||0;return BigInt(r.allowance)>=i}return!1},async getMyTokensWithBalance(n){const t=w.state.address,o=T.state.activeCaipNetwork;if(!t||!o)return[];const r=(await m.getBalance(t,o.caipNetworkId,n)).balances.filter(i=>i.quantity.decimals!=="0");return w.setTokenBalance(r,T.state.activeChain),this.mapBalancesToSwapTokens(r)},mapBalancesToSwapTokens(n){return n?.map(t=>({...t,address:t?.address?t.address:T.getActiveNetworkTokenAddress(),decimals:parseInt(t.quantity.decimals,10),logoUri:t.iconUrl,eip2612:!1}))||[]}},f={getGasPriceInEther(n,t){const o=t*n;return Number(o)/1e18},getGasPriceInUSD(n,t,o){const s=f.getGasPriceInEther(t,o);return u.bigNumber(n).times(s).toNumber()},getPriceImpact({sourceTokenAmount:n,sourceTokenPriceInUSD:t,toTokenPriceInUSD:o,toTokenAmount:s}){const r=u.bigNumber(n).times(t),i=u.bigNumber(s).times(o);return r.minus(i).div(r).times(100).toNumber()},getMaxSlippage(n,t){const o=u.bigNumber(n).div(100);return u.multiply(t,o).toNumber()},getProviderFee(n,t=.0085){return u.bigNumber(n).times(t).toString()},isInsufficientNetworkTokenForGas(n,t){const o=t||"0";return u.bigNumber(n).eq(0)?!0:u.bigNumber(u.bigNumber(o)).gt(n)},isInsufficientSourceTokenForSwap(n,t,o){const s=o?.find(i=>i.address===t)?.quantity?.numeric;return u.bigNumber(s||"0").lt(n)},getToTokenAmount({sourceToken:n,toToken:t,sourceTokenPrice:o,toTokenPrice:s,sourceTokenAmount:r}){if(r==="0"||!n||!t)return"0";const i=n.decimals,c=o,d=t.decimals,p=s;if(p<=0)return"0";const h=u.bigNumber(r).times(.0085),F=u.bigNumber(r).minus(h).times(u.bigNumber(10).pow(i)),M=u.bigNumber(c).div(p),W=i-d;return F.times(M).div(u.bigNumber(10).pow(W)).div(u.bigNumber(10).pow(d)).toFixed(d).toString()}},B=15e4,K=6,l={initializing:!1,initialized:!1,loadingPrices:!1,loadingQuote:!1,loadingApprovalTransaction:!1,loadingBuildTransaction:!1,loadingTransaction:!1,fetchError:!1,approvalTransaction:void 0,swapTransaction:void 0,transactionError:void 0,sourceToken:void 0,sourceTokenAmount:"",sourceTokenPriceInUSD:0,toToken:void 0,toTokenAmount:"",toTokenPriceInUSD:0,networkPrice:"0",networkBalanceInUSD:"0",networkTokenSymbol:"",inputError:void 0,slippage:D.CONVERT_SLIPPAGE_TOLERANCE,tokens:void 0,popularTokens:void 0,suggestedTokens:void 0,foundTokens:void 0,myTokensWithBalance:void 0,tokensPriceMap:{},gasFee:"0",gasPriceInUSD:0,priceImpact:void 0,maxSlippage:void 0,providerFee:void 0},e=L(l),P={state:e,subscribe(n){return $(e,()=>n(e))},subscribeKey(n,t){return z(e,n,t)},getParams(){const n=T.state.activeCaipAddress,t=T.state.activeChain,o=v.getPlainAddress(n),s=T.getActiveNetworkTokenAddress(),r=R.getConnectorId(t);if(!o)throw new Error("No address found to swap the tokens from.");const i=!e.toToken?.address||!e.toToken?.decimals,c=!e.sourceToken?.address||!e.sourceToken?.decimals||!u.bigNumber(e.sourceTokenAmount).gt(0),d=!e.sourceTokenAmount;return{networkAddress:s,fromAddress:o,fromCaipAddress:n,sourceTokenAddress:e.sourceToken?.address,toTokenAddress:e.toToken?.address,toTokenAmount:e.toTokenAmount,toTokenDecimals:e.toToken?.decimals,sourceTokenAmount:e.sourceTokenAmount,sourceTokenDecimals:e.sourceToken?.decimals,invalidToToken:i,invalidSourceToken:c,invalidSourceTokenAmount:d,availableToSwap:n&&!i&&!c&&!d,isAuthConnector:r===O.CONNECTOR_ID.AUTH}},setSourceToken(n){if(!n){e.sourceToken=n,e.sourceTokenAmount="",e.sourceTokenPriceInUSD=0;return}e.sourceToken=n,a.setTokenPrice(n.address,"sourceToken")},setSourceTokenAmount(n){e.sourceTokenAmount=n},setToToken(n){if(!n){e.toToken=n,e.toTokenAmount="",e.toTokenPriceInUSD=0;return}e.toToken=n,a.setTokenPrice(n.address,"toToken")},setToTokenAmount(n){e.toTokenAmount=n?u.formatNumberToLocalString(n,K):""},async setTokenPrice(n,t){let o=e.tokensPriceMap[n]||0;o||(e.loadingPrices=!0,o=await a.getAddressPrice(n)),t==="sourceToken"?e.sourceTokenPriceInUSD=o:t==="toToken"&&(e.toTokenPriceInUSD=o),e.loadingPrices&&(e.loadingPrices=!1),a.getParams().availableToSwap&&a.swapTokens()},switchTokens(){if(e.initializing||!e.initialized)return;const n=e.toToken?{...e.toToken}:void 0,t=e.sourceToken?{...e.sourceToken}:void 0,o=n&&e.toTokenAmount===""?"1":e.toTokenAmount;a.setSourceToken(n),a.setToToken(t),a.setSourceTokenAmount(o),a.setToTokenAmount(""),a.swapTokens()},resetState(){e.myTokensWithBalance=l.myTokensWithBalance,e.tokensPriceMap=l.tokensPriceMap,e.initialized=l.initialized,e.sourceToken=l.sourceToken,e.sourceTokenAmount=l.sourceTokenAmount,e.sourceTokenPriceInUSD=l.sourceTokenPriceInUSD,e.toToken=l.toToken,e.toTokenAmount=l.toTokenAmount,e.toTokenPriceInUSD=l.toTokenPriceInUSD,e.networkPrice=l.networkPrice,e.networkTokenSymbol=l.networkTokenSymbol,e.networkBalanceInUSD=l.networkBalanceInUSD,e.inputError=l.inputError,e.myTokensWithBalance=l.myTokensWithBalance},resetValues(){const{networkAddress:n}=a.getParams(),t=e.tokens?.find(o=>o.address===n);a.setSourceToken(t),a.setToToken(void 0)},getApprovalLoadingState(){return e.loadingApprovalTransaction},clearError(){e.transactionError=void 0},async initializeState(){if(!e.initializing){if(e.initializing=!0,!e.initialized)try{await a.fetchTokens(),e.initialized=!0}catch{e.initialized=!1,k.showError("Failed to initialize swap"),g.goBack()}e.initializing=!1}},async fetchTokens(){const{networkAddress:n}=a.getParams();await a.getTokenList(),await a.getNetworkTokenPrice(),await a.getMyTokensWithBalance();const t=e.tokens?.find(o=>o.address===n);t&&(e.networkTokenSymbol=t.symbol,a.setSourceToken(t),a.setSourceTokenAmount("1"))},async getTokenList(){const n=await C.getTokenList();e.tokens=n,e.popularTokens=n.sort((t,o)=>t.symbol<o.symbol?-1:t.symbol>o.symbol?1:0),e.suggestedTokens=n.filter(t=>!!D.SWAP_SUGGESTED_TOKENS.includes(t.symbol),{})},async getAddressPrice(n){const t=e.tokensPriceMap[n];if(t)return t;const s=(await m.fetchTokenPrice({addresses:[n]}))?.fungibles||[],i=[...e.tokens||[],...e.myTokensWithBalance||[]]?.find(p=>p.address===n)?.symbol,c=s.find(p=>p.symbol.toLowerCase()===i?.toLowerCase())?.price||0,d=parseFloat(c.toString());return e.tokensPriceMap[n]=d,d},async getNetworkTokenPrice(){const{networkAddress:n}=a.getParams(),o=(await m.fetchTokenPrice({addresses:[n]}).catch(()=>(k.showError("Failed to fetch network token price"),{fungibles:[]}))).fungibles?.[0],s=o?.price.toString()||"0";e.tokensPriceMap[n]=parseFloat(s),e.networkTokenSymbol=o?.symbol||"",e.networkPrice=s},async getMyTokensWithBalance(n){const t=await E.getMyTokensWithBalance(n),o=E.mapBalancesToSwapTokens(t);o&&(await a.getInitialGasPrice(),a.setBalances(o))},setBalances(n){const{networkAddress:t}=a.getParams(),o=T.state.activeCaipNetwork;if(!o)return;const s=n.find(r=>r.address===t);n.forEach(r=>{e.tokensPriceMap[r.address]=r.price||0}),e.myTokensWithBalance=n.filter(r=>r.address.startsWith(o.caipNetworkId)),e.networkBalanceInUSD=s?u.multiply(s.quantity.numeric,s.price).toString():"0"},async getInitialGasPrice(){const n=await C.fetchGasPrice();if(!n)return{gasPrice:null,gasPriceInUSD:null};switch(T.state?.activeCaipNetwork?.chainNamespace){case"solana":return e.gasFee=n.standard??"0",e.gasPriceInUSD=u.multiply(n.standard,e.networkPrice).div(1e9).toNumber(),{gasPrice:BigInt(e.gasFee),gasPriceInUSD:Number(e.gasPriceInUSD)};case"eip155":default:const t=n.standard??"0",o=BigInt(t),s=BigInt(B),r=f.getGasPriceInUSD(e.networkPrice,s,o);return e.gasFee=t,e.gasPriceInUSD=r,{gasPrice:o,gasPriceInUSD:r}}},async swapTokens(){const n=w.state.address,t=e.sourceToken,o=e.toToken,s=u.bigNumber(e.sourceTokenAmount).gt(0);if(s||a.setToTokenAmount(""),!o||!t||e.loadingPrices||!s)return;e.loadingQuote=!0;const r=u.bigNumber(e.sourceTokenAmount).times(10**t.decimals).round(0);try{const i=await m.fetchSwapQuote({userAddress:n,from:t.address,to:o.address,gasPrice:e.gasFee,amount:r.toString()});e.loadingQuote=!1;const c=i?.quotes?.[0]?.toAmount;if(!c){G.open({shortMessage:"Incorrect amount",longMessage:"Please enter a valid amount"},"error");return}const d=u.bigNumber(c).div(10**o.decimals).toString();a.setToTokenAmount(d),a.hasInsufficientToken(e.sourceTokenAmount,t.address)?e.inputError="Insufficient balance":(e.inputError=void 0,a.setTransactionDetails())}catch{e.loadingQuote=!1,e.inputError="Insufficient balance"}},async getTransaction(){const{fromCaipAddress:n,availableToSwap:t}=a.getParams(),o=e.sourceToken,s=e.toToken;if(!(!n||!t||!o||!s||e.loadingQuote))try{e.loadingBuildTransaction=!0;const r=await C.fetchSwapAllowance({userAddress:n,tokenAddress:o.address,sourceTokenAmount:e.sourceTokenAmount,sourceTokenDecimals:o.decimals});let i;return r?i=await a.createSwapTransaction():i=await a.createAllowanceTransaction(),e.loadingBuildTransaction=!1,e.fetchError=!1,i}catch{g.goBack(),k.showError("Failed to check allowance"),e.loadingBuildTransaction=!1,e.approvalTransaction=void 0,e.swapTransaction=void 0,e.fetchError=!0;return}},async createAllowanceTransaction(){const{fromCaipAddress:n,sourceTokenAddress:t,toTokenAddress:o}=a.getParams();if(!(!n||!o)){if(!t)throw new Error("createAllowanceTransaction - No source token address found.");try{const s=await m.generateApproveCalldata({from:t,to:o,userAddress:n}),r={data:s.tx.data,to:v.getPlainAddress(s.tx.from),gasPrice:BigInt(s.tx.eip155.gasPrice),value:BigInt(s.tx.value),toAmount:e.toTokenAmount};return e.swapTransaction=void 0,e.approvalTransaction={data:r.data,to:r.to,gasPrice:r.gasPrice,value:r.value,toAmount:r.toAmount},{data:r.data,to:r.to,gasPrice:r.gasPrice,value:r.value,toAmount:r.toAmount}}catch{g.goBack(),k.showError("Failed to create approval transaction"),e.approvalTransaction=void 0,e.swapTransaction=void 0,e.fetchError=!0;return}}},async createSwapTransaction(){const{networkAddress:n,fromCaipAddress:t,sourceTokenAmount:o}=a.getParams(),s=e.sourceToken,r=e.toToken;if(!t||!o||!s||!r)return;const i=A.parseUnits(o,s.decimals)?.toString();try{const c=await m.generateSwapCalldata({userAddress:t,from:s.address,to:r.address,amount:i,disableEstimate:!0}),d=s.address===n,p=BigInt(c.tx.eip155.gas),h=BigInt(c.tx.eip155.gasPrice),b={data:c.tx.data,to:v.getPlainAddress(c.tx.to),gas:p,gasPrice:h,value:BigInt(d?i??"0":"0"),toAmount:e.toTokenAmount};return e.gasPriceInUSD=f.getGasPriceInUSD(e.networkPrice,p,h),e.approvalTransaction=void 0,e.swapTransaction=b,b}catch{g.goBack(),k.showError("Failed to create transaction"),e.approvalTransaction=void 0,e.swapTransaction=void 0,e.fetchError=!0;return}},async sendTransactionForApproval(n){const{fromAddress:t,isAuthConnector:o}=a.getParams();e.loadingApprovalTransaction=!0;const s="Approve limit increase in your wallet";o?g.pushTransactionStack({onSuccess(){k.showLoading(s)}}):k.showLoading(s);try{await A.sendTransaction({address:t,to:n.to,data:n.data,value:n.value,chainNamespace:"eip155"}),await a.swapTokens(),await a.getTransaction(),e.approvalTransaction=void 0,e.loadingApprovalTransaction=!1}catch(r){const i=r;e.transactionError=i?.shortMessage,e.loadingApprovalTransaction=!1,k.showError(i?.shortMessage||"Transaction error"),I.sendEvent({type:"track",event:"SWAP_APPROVAL_ERROR",properties:{message:i?.shortMessage||i?.message||"Unknown",network:T.state.activeCaipNetwork?.caipNetworkId||"",swapFromToken:a.state.sourceToken?.symbol||"",swapToToken:a.state.toToken?.symbol||"",swapFromAmount:a.state.sourceTokenAmount||"",swapToAmount:a.state.toTokenAmount||"",isSmartAccount:w.state.preferredAccountTypes?.eip155===y.ACCOUNT_TYPES.SMART_ACCOUNT}})}},async sendTransactionForSwap(n){if(!n)return;const{fromAddress:t,toTokenAmount:o,isAuthConnector:s}=a.getParams();e.loadingTransaction=!0;const r=`Swapping ${e.sourceToken?.symbol} to ${u.formatNumberToLocalString(o,3)} ${e.toToken?.symbol}`,i=`Swapped ${e.sourceToken?.symbol} to ${u.formatNumberToLocalString(o,3)} ${e.toToken?.symbol}`;s?g.pushTransactionStack({onSuccess(){g.replace("Account"),k.showLoading(r),P.resetState()}}):k.showLoading("Confirm transaction in your wallet");try{const c=[e.sourceToken?.address,e.toToken?.address].join(","),d=await A.sendTransaction({address:t,to:n.to,data:n.data,value:n.value,chainNamespace:"eip155"});return e.loadingTransaction=!1,k.showSuccess(i),I.sendEvent({type:"track",event:"SWAP_SUCCESS",properties:{network:T.state.activeCaipNetwork?.caipNetworkId||"",swapFromToken:a.state.sourceToken?.symbol||"",swapToToken:a.state.toToken?.symbol||"",swapFromAmount:a.state.sourceTokenAmount||"",swapToAmount:a.state.toTokenAmount||"",isSmartAccount:w.state.preferredAccountTypes?.eip155===y.ACCOUNT_TYPES.SMART_ACCOUNT}}),P.resetState(),s||g.replace("Account"),P.getMyTokensWithBalance(c),d}catch(c){const d=c;e.transactionError=d?.shortMessage,e.loadingTransaction=!1,k.showError(d?.shortMessage||"Transaction error"),I.sendEvent({type:"track",event:"SWAP_ERROR",properties:{message:d?.shortMessage||d?.message||"Unknown",network:T.state.activeCaipNetwork?.caipNetworkId||"",swapFromToken:a.state.sourceToken?.symbol||"",swapToToken:a.state.toToken?.symbol||"",swapFromAmount:a.state.sourceTokenAmount||"",swapToAmount:a.state.toTokenAmount||"",isSmartAccount:w.state.preferredAccountTypes?.eip155===y.ACCOUNT_TYPES.SMART_ACCOUNT}});return}},hasInsufficientToken(n,t){return f.isInsufficientSourceTokenForSwap(n,t,e.myTokensWithBalance)},setTransactionDetails(){const{toTokenAddress:n,toTokenDecimals:t}=a.getParams();!n||!t||(e.gasPriceInUSD=f.getGasPriceInUSD(e.networkPrice,BigInt(e.gasFee),BigInt(B)),e.priceImpact=f.getPriceImpact({sourceTokenAmount:e.sourceTokenAmount,sourceTokenPriceInUSD:e.sourceTokenPriceInUSD,toTokenPriceInUSD:e.toTokenPriceInUSD,toTokenAmount:e.toTokenAmount}),e.maxSlippage=f.getMaxSlippage(e.slippage,e.toTokenAmount),e.providerFee=f.getProviderFee(e.sourceTokenAmount))}},a=_(P),Y=q`
  :host {
    display: block;
  }

  :host > button {
    gap: var(--wui-spacing-xxs);
    padding: var(--wui-spacing-xs);
    padding-right: var(--wui-spacing-1xs);
    height: 40px;
    border-radius: var(--wui-border-radius-l);
    background: var(--wui-color-gray-glass-002);
    border-width: 0px;
    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-002);
  }

  :host > button wui-image {
    width: 24px;
    height: 24px;
    border-radius: var(--wui-border-radius-s);
    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-010);
  }
`;var U=function(n,t,o,s){var r=arguments.length,i=r<3?t:s===null?s=Object.getOwnPropertyDescriptor(t,o):s,c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")i=Reflect.decorate(n,t,o,s);else for(var d=n.length-1;d>=0;d--)(c=n[d])&&(i=(r<3?c(i):r>3?c(t,o,i):c(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};let S=class extends V{constructor(){super(...arguments),this.text=""}render(){return N`
      <button>
        ${this.tokenTemplate()}
        <wui-text variant="paragraph-600" color="fg-100">${this.text}</wui-text>
      </button>
    `}tokenTemplate(){return this.imageSrc?N`<wui-image src=${this.imageSrc}></wui-image>`:N`
      <wui-icon-box
        size="sm"
        iconColor="fg-200"
        backgroundColor="fg-300"
        icon="networkPlaceholder"
      ></wui-icon-box>
    `}};S.styles=[j,Q,Y];U([x()],S.prototype,"imageSrc",void 0);U([x()],S.prototype,"text",void 0);S=U([H("wui-token-button")],S);export{a as S};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtQ1hqTnN5cXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9AcmVvd24vYXBwa2l0LWNvbnRyb2xsZXJzL2Rpc3QvZXNtL3NyYy91dGlscy9Td2FwQXBpVXRpbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AcmVvd24vYXBwa2l0LWNvbnRyb2xsZXJzL2Rpc3QvZXNtL3NyYy91dGlscy9Td2FwQ2FsY3VsYXRpb25VdGlsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0ByZW93bi9hcHBraXQtY29udHJvbGxlcnMvZGlzdC9lc20vc3JjL2NvbnRyb2xsZXJzL1N3YXBDb250cm9sbGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0ByZW93bi9hcHBraXQtdWkvZGlzdC9lc20vc3JjL2NvbXBvc2l0ZXMvd3VpLXRva2VuLWJ1dHRvbi9zdHlsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHJlb3duL2FwcGtpdC11aS9kaXN0L2VzbS9zcmMvY29tcG9zaXRlcy93dWktdG9rZW4tYnV0dG9uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY291bnRDb250cm9sbGVyIH0gZnJvbSAnLi4vY29udHJvbGxlcnMvQWNjb3VudENvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIgfSBmcm9tICcuLi9jb250cm9sbGVycy9CbG9ja2NoYWluQXBpQ29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBDaGFpbkNvbnRyb2xsZXIgfSBmcm9tICcuLi9jb250cm9sbGVycy9DaGFpbkNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgQ29ubmVjdGlvbkNvbnRyb2xsZXIgfSBmcm9tICcuLi9jb250cm9sbGVycy9Db25uZWN0aW9uQ29udHJvbGxlci5qcyc7XG4vLyAtLSBDb250cm9sbGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbmV4cG9ydCBjb25zdCBTd2FwQXBpVXRpbCA9IHtcbiAgICBhc3luYyBnZXRUb2tlbkxpc3QoKSB7XG4gICAgICAgIGNvbnN0IGNhaXBOZXR3b3JrID0gQ2hhaW5Db250cm9sbGVyLnN0YXRlLmFjdGl2ZUNhaXBOZXR3b3JrO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEJsb2NrY2hhaW5BcGlDb250cm9sbGVyLmZldGNoU3dhcFRva2Vucyh7XG4gICAgICAgICAgICBjaGFpbklkOiBjYWlwTmV0d29yaz8uY2FpcE5ldHdvcmtJZFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gcmVzcG9uc2U/LnRva2Vucz8ubWFwKHRva2VuID0+ICh7XG4gICAgICAgICAgICAuLi50b2tlbixcbiAgICAgICAgICAgIGVpcDI2MTI6IGZhbHNlLFxuICAgICAgICAgICAgcXVhbnRpdHk6IHtcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogJzAnLFxuICAgICAgICAgICAgICAgIG51bWVyaWM6ICcwJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaWNlOiAwLFxuICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgfSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH0sXG4gICAgYXN5bmMgZmV0Y2hHYXNQcmljZSgpIHtcbiAgICAgICAgY29uc3QgY2FpcE5ldHdvcmsgPSBDaGFpbkNvbnRyb2xsZXIuc3RhdGUuYWN0aXZlQ2FpcE5ldHdvcms7XG4gICAgICAgIGlmICghY2FpcE5ldHdvcmspIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNhaXBOZXR3b3JrLmNoYWluTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc29sYW5hJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhbXBvcnRzUGVyU2lnbmF0dXJlID0gKGF3YWl0IENvbm5lY3Rpb25Db250cm9sbGVyPy5lc3RpbWF0ZUdhcyh7IGNoYWluTmFtZXNwYWNlOiAnc29sYW5hJyB9KSk/LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFuZGFyZDogbGFtcG9ydHNQZXJTaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYXN0OiBsYW1wb3J0c1BlclNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnQ6IGxhbXBvcnRzUGVyU2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2FzZSAnZWlwMTU1JzpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIuZmV0Y2hHYXNQcmljZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiBjYWlwTmV0d29yay5jYWlwTmV0d29ya0lkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBmZXRjaFN3YXBBbGxvd2FuY2UoeyB0b2tlbkFkZHJlc3MsIHVzZXJBZGRyZXNzLCBzb3VyY2VUb2tlbkFtb3VudCwgc291cmNlVG9rZW5EZWNpbWFscyB9KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIuZmV0Y2hTd2FwQWxsb3dhbmNlKHtcbiAgICAgICAgICAgIHRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgIHVzZXJBZGRyZXNzXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2U/LmFsbG93YW5jZSAmJiBzb3VyY2VUb2tlbkFtb3VudCAmJiBzb3VyY2VUb2tlbkRlY2ltYWxzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IENvbm5lY3Rpb25Db250cm9sbGVyLnBhcnNlVW5pdHMoc291cmNlVG9rZW5BbW91bnQsIHNvdXJjZVRva2VuRGVjaW1hbHMpIHx8IDA7XG4gICAgICAgICAgICBjb25zdCBoYXNBbGxvd2FuY2UgPSBCaWdJbnQocmVzcG9uc2UuYWxsb3dhbmNlKSA+PSBwYXJzZWRWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBoYXNBbGxvd2FuY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgYXN5bmMgZ2V0TXlUb2tlbnNXaXRoQmFsYW5jZShmb3JjZVVwZGF0ZSkge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gQWNjb3VudENvbnRyb2xsZXIuc3RhdGUuYWRkcmVzcztcbiAgICAgICAgY29uc3QgY2FpcE5ldHdvcmsgPSBDaGFpbkNvbnRyb2xsZXIuc3RhdGUuYWN0aXZlQ2FpcE5ldHdvcms7XG4gICAgICAgIGlmICghYWRkcmVzcyB8fCAhY2FpcE5ldHdvcmspIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEJsb2NrY2hhaW5BcGlDb250cm9sbGVyLmdldEJhbGFuY2UoYWRkcmVzcywgY2FpcE5ldHdvcmsuY2FpcE5ldHdvcmtJZCwgZm9yY2VVcGRhdGUpO1xuICAgICAgICAvKlxuICAgICAgICAgKiBUaGUgMUluY2ggQVBJIGluY2x1ZGVzIG1hbnkgbG93LXF1YWxpdHkgdG9rZW5zIGluIHRoZSBiYWxhbmNlIHJlc3BvbnNlLFxuICAgICAgICAgKiB3aGljaCBhcHBlYXIgaW5jb25zaXN0ZW50bHkuIFRoaXMgZmlsdGVyIHByZXZlbnRzIHRoZW0gZnJvbSBiZWluZyBkaXNwbGF5ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBiYWxhbmNlcyA9IHJlc3BvbnNlLmJhbGFuY2VzLmZpbHRlcihiYWxhbmNlID0+IGJhbGFuY2UucXVhbnRpdHkuZGVjaW1hbHMgIT09ICcwJyk7XG4gICAgICAgIEFjY291bnRDb250cm9sbGVyLnNldFRva2VuQmFsYW5jZShiYWxhbmNlcywgQ2hhaW5Db250cm9sbGVyLnN0YXRlLmFjdGl2ZUNoYWluKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwQmFsYW5jZXNUb1N3YXBUb2tlbnMoYmFsYW5jZXMpO1xuICAgIH0sXG4gICAgbWFwQmFsYW5jZXNUb1N3YXBUb2tlbnMoYmFsYW5jZXMpIHtcbiAgICAgICAgcmV0dXJuIChiYWxhbmNlcz8ubWFwKHRva2VuID0+ICh7XG4gICAgICAgICAgICAuLi50b2tlbixcbiAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuPy5hZGRyZXNzXG4gICAgICAgICAgICAgICAgPyB0b2tlbi5hZGRyZXNzXG4gICAgICAgICAgICAgICAgOiBDaGFpbkNvbnRyb2xsZXIuZ2V0QWN0aXZlTmV0d29ya1Rva2VuQWRkcmVzcygpLFxuICAgICAgICAgICAgZGVjaW1hbHM6IHBhcnNlSW50KHRva2VuLnF1YW50aXR5LmRlY2ltYWxzLCAxMCksXG4gICAgICAgICAgICBsb2dvVXJpOiB0b2tlbi5pY29uVXJsLFxuICAgICAgICAgICAgZWlwMjYxMjogZmFsc2VcbiAgICAgICAgfSkpIHx8IFtdKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3dhcEFwaVV0aWwuanMubWFwIiwiLy8gLS0gVHlwZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5pbXBvcnQgeyBOdW1iZXJVdGlsIH0gZnJvbSAnQHJlb3duL2FwcGtpdC1jb21tb24nO1xuLy8gLS0gVXRpbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5leHBvcnQgY29uc3QgU3dhcENhbGN1bGF0aW9uVXRpbCA9IHtcbiAgICBnZXRHYXNQcmljZUluRXRoZXIoZ2FzLCBnYXNQcmljZSkge1xuICAgICAgICBjb25zdCB0b3RhbEdhc0Nvc3RJbldlaSA9IGdhc1ByaWNlICogZ2FzO1xuICAgICAgICBjb25zdCB0b3RhbEdhc0Nvc3RJbkV0aGVyID0gTnVtYmVyKHRvdGFsR2FzQ29zdEluV2VpKSAvIDFlMTg7XG4gICAgICAgIHJldHVybiB0b3RhbEdhc0Nvc3RJbkV0aGVyO1xuICAgIH0sXG4gICAgZ2V0R2FzUHJpY2VJblVTRChuZXR3b3JrUHJpY2UsIGdhcywgZ2FzUHJpY2UpIHtcbiAgICAgICAgY29uc3QgdG90YWxHYXNDb3N0SW5FdGhlciA9IFN3YXBDYWxjdWxhdGlvblV0aWwuZ2V0R2FzUHJpY2VJbkV0aGVyKGdhcywgZ2FzUHJpY2UpO1xuICAgICAgICBjb25zdCBuZXR3b3JrUHJpY2VJblVTRCA9IE51bWJlclV0aWwuYmlnTnVtYmVyKG5ldHdvcmtQcmljZSk7XG4gICAgICAgIGNvbnN0IGdhc0Nvc3RJblVTRCA9IG5ldHdvcmtQcmljZUluVVNELnRpbWVzKHRvdGFsR2FzQ29zdEluRXRoZXIpO1xuICAgICAgICByZXR1cm4gZ2FzQ29zdEluVVNELnRvTnVtYmVyKCk7XG4gICAgfSxcbiAgICBnZXRQcmljZUltcGFjdCh7IHNvdXJjZVRva2VuQW1vdW50LCBzb3VyY2VUb2tlblByaWNlSW5VU0QsIHRvVG9rZW5QcmljZUluVVNELCB0b1Rva2VuQW1vdW50IH0pIHtcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IE51bWJlclV0aWwuYmlnTnVtYmVyKHNvdXJjZVRva2VuQW1vdW50KS50aW1lcyhzb3VyY2VUb2tlblByaWNlSW5VU0QpO1xuICAgICAgICBjb25zdCBvdXRwdXRWYWx1ZSA9IE51bWJlclV0aWwuYmlnTnVtYmVyKHRvVG9rZW5BbW91bnQpLnRpbWVzKHRvVG9rZW5QcmljZUluVVNEKTtcbiAgICAgICAgY29uc3QgcHJpY2VJbXBhY3QgPSBpbnB1dFZhbHVlLm1pbnVzKG91dHB1dFZhbHVlKS5kaXYoaW5wdXRWYWx1ZSkudGltZXMoMTAwKTtcbiAgICAgICAgcmV0dXJuIHByaWNlSW1wYWN0LnRvTnVtYmVyKCk7XG4gICAgfSxcbiAgICBnZXRNYXhTbGlwcGFnZShzbGlwcGFnZSwgdG9Ub2tlbkFtb3VudCkge1xuICAgICAgICBjb25zdCBzbGlwcGFnZVRvbGVyYW5jZURlY2ltYWwgPSBOdW1iZXJVdGlsLmJpZ051bWJlcihzbGlwcGFnZSkuZGl2KDEwMCk7XG4gICAgICAgIGNvbnN0IG1heFNsaXBwYWdlQW1vdW50ID0gTnVtYmVyVXRpbC5tdWx0aXBseSh0b1Rva2VuQW1vdW50LCBzbGlwcGFnZVRvbGVyYW5jZURlY2ltYWwpO1xuICAgICAgICByZXR1cm4gbWF4U2xpcHBhZ2VBbW91bnQudG9OdW1iZXIoKTtcbiAgICB9LFxuICAgIGdldFByb3ZpZGVyRmVlKHNvdXJjZVRva2VuQW1vdW50LCBmZWVQZXJjZW50YWdlID0gMC4wMDg1KSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyRmVlID0gTnVtYmVyVXRpbC5iaWdOdW1iZXIoc291cmNlVG9rZW5BbW91bnQpLnRpbWVzKGZlZVBlcmNlbnRhZ2UpO1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJGZWUudG9TdHJpbmcoKTtcbiAgICB9LFxuICAgIGlzSW5zdWZmaWNpZW50TmV0d29ya1Rva2VuRm9yR2FzKG5ldHdvcmtCYWxhbmNlSW5VU0QsIGdhc1ByaWNlSW5VU0QpIHtcbiAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSBnYXNQcmljZUluVVNEIHx8ICcwJztcbiAgICAgICAgaWYgKE51bWJlclV0aWwuYmlnTnVtYmVyKG5ldHdvcmtCYWxhbmNlSW5VU0QpLmVxKDApKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyVXRpbC5iaWdOdW1iZXIoTnVtYmVyVXRpbC5iaWdOdW1iZXIoZ2FzUHJpY2UpKS5ndChuZXR3b3JrQmFsYW5jZUluVVNEKTtcbiAgICB9LFxuICAgIGlzSW5zdWZmaWNpZW50U291cmNlVG9rZW5Gb3JTd2FwKHNvdXJjZVRva2VuQW1vdW50LCBzb3VyY2VUb2tlbkFkZHJlc3MsIGJhbGFuY2UpIHtcbiAgICAgICAgY29uc3Qgc291cmNlVG9rZW5CYWxhbmNlID0gYmFsYW5jZT8uZmluZCh0b2tlbiA9PiB0b2tlbi5hZGRyZXNzID09PSBzb3VyY2VUb2tlbkFkZHJlc3MpXG4gICAgICAgICAgICA/LnF1YW50aXR5Py5udW1lcmljO1xuICAgICAgICBjb25zdCBpc0luU3VmZmljaWVudEJhbGFuY2UgPSBOdW1iZXJVdGlsLmJpZ051bWJlcihzb3VyY2VUb2tlbkJhbGFuY2UgfHwgJzAnKS5sdChzb3VyY2VUb2tlbkFtb3VudCk7XG4gICAgICAgIHJldHVybiBpc0luU3VmZmljaWVudEJhbGFuY2U7XG4gICAgfSxcbiAgICBnZXRUb1Rva2VuQW1vdW50KHsgc291cmNlVG9rZW4sIHRvVG9rZW4sIHNvdXJjZVRva2VuUHJpY2UsIHRvVG9rZW5QcmljZSwgc291cmNlVG9rZW5BbW91bnQgfSkge1xuICAgICAgICBpZiAoc291cmNlVG9rZW5BbW91bnQgPT09ICcwJykge1xuICAgICAgICAgICAgcmV0dXJuICcwJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNvdXJjZVRva2VuIHx8ICF0b1Rva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvdXJjZVRva2VuRGVjaW1hbHMgPSBzb3VyY2VUb2tlbi5kZWNpbWFscztcbiAgICAgICAgY29uc3Qgc291cmNlVG9rZW5QcmljZUluVVNEID0gc291cmNlVG9rZW5QcmljZTtcbiAgICAgICAgY29uc3QgdG9Ub2tlbkRlY2ltYWxzID0gdG9Ub2tlbi5kZWNpbWFscztcbiAgICAgICAgY29uc3QgdG9Ub2tlblByaWNlSW5VU0QgPSB0b1Rva2VuUHJpY2U7XG4gICAgICAgIGlmICh0b1Rva2VuUHJpY2VJblVTRCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcHJvdmlkZXIgZmVlICgwLjg1JSBvZiB0aGUgc291cmNlIHRva2VuIGFtb3VudClcbiAgICAgICAgY29uc3QgcHJvdmlkZXJGZWUgPSBOdW1iZXJVdGlsLmJpZ051bWJlcihzb3VyY2VUb2tlbkFtb3VudCkudGltZXMoMC4wMDg1KTtcbiAgICAgICAgLy8gQWRqdXN0IHRoZSBzb3VyY2UgdG9rZW4gYW1vdW50IGJ5IHN1YnRyYWN0aW5nIHRoZSBwcm92aWRlciBmZWVcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRTb3VyY2VUb2tlbkFtb3VudCA9IE51bWJlclV0aWwuYmlnTnVtYmVyKHNvdXJjZVRva2VuQW1vdW50KS5taW51cyhwcm92aWRlckZlZSk7XG4gICAgICAgIC8vIFByb2NlZWQgd2l0aCBjb252ZXJzaW9uIHVzaW5nIHRoZSBhZGp1c3RlZCBzb3VyY2UgdG9rZW4gYW1vdW50XG4gICAgICAgIGNvbnN0IHNvdXJjZUFtb3VudEluU21hbGxlc3RVbml0ID0gYWRqdXN0ZWRTb3VyY2VUb2tlbkFtb3VudC50aW1lcyhOdW1iZXJVdGlsLmJpZ051bWJlcigxMCkucG93KHNvdXJjZVRva2VuRGVjaW1hbHMpKTtcbiAgICAgICAgY29uc3QgcHJpY2VSYXRpbyA9IE51bWJlclV0aWwuYmlnTnVtYmVyKHNvdXJjZVRva2VuUHJpY2VJblVTRCkuZGl2KHRvVG9rZW5QcmljZUluVVNEKTtcbiAgICAgICAgY29uc3QgZGVjaW1hbERpZmZlcmVuY2UgPSBzb3VyY2VUb2tlbkRlY2ltYWxzIC0gdG9Ub2tlbkRlY2ltYWxzO1xuICAgICAgICBjb25zdCB0b1Rva2VuQW1vdW50SW5TbWFsbGVzdFVuaXQgPSBzb3VyY2VBbW91bnRJblNtYWxsZXN0VW5pdFxuICAgICAgICAgICAgLnRpbWVzKHByaWNlUmF0aW8pXG4gICAgICAgICAgICAuZGl2KE51bWJlclV0aWwuYmlnTnVtYmVyKDEwKS5wb3coZGVjaW1hbERpZmZlcmVuY2UpKTtcbiAgICAgICAgY29uc3QgdG9Ub2tlbkFtb3VudCA9IHRvVG9rZW5BbW91bnRJblNtYWxsZXN0VW5pdC5kaXYoTnVtYmVyVXRpbC5iaWdOdW1iZXIoMTApLnBvdyh0b1Rva2VuRGVjaW1hbHMpKTtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gdG9Ub2tlbkFtb3VudC50b0ZpeGVkKHRvVG9rZW5EZWNpbWFscykudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3dhcENhbGN1bGF0aW9uVXRpbC5qcy5tYXAiLCJpbXBvcnQgeyBwcm94eSwgc3Vic2NyaWJlIGFzIHN1YiB9IGZyb20gJ3ZhbHRpby92YW5pbGxhJztcbmltcG9ydCB7IHN1YnNjcmliZUtleSBhcyBzdWJLZXkgfSBmcm9tICd2YWx0aW8vdmFuaWxsYS91dGlscyc7XG5pbXBvcnQgeyBOdW1iZXJVdGlsIH0gZnJvbSAnQHJlb3duL2FwcGtpdC1jb21tb24nO1xuaW1wb3J0IHsgQ29uc3RhbnRzVXRpbCBhcyBDb21tb25Db25zdGFudHNVdGlsIH0gZnJvbSAnQHJlb3duL2FwcGtpdC1jb21tb24nO1xuaW1wb3J0IHsgVzNtRnJhbWVScGNDb25zdGFudHMgfSBmcm9tICdAcmVvd24vYXBwa2l0LXdhbGxldC91dGlscyc7XG5pbXBvcnQgeyBDb25zdGFudHNVdGlsIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzVXRpbC5qcyc7XG5pbXBvcnQgeyBDb3JlSGVscGVyVXRpbCB9IGZyb20gJy4uL3V0aWxzL0NvcmVIZWxwZXJVdGlsLmpzJztcbmltcG9ydCB7IFNlbmRBcGlVdGlsIH0gZnJvbSAnLi4vdXRpbHMvU2VuZEFwaVV0aWwuanMnO1xuaW1wb3J0IHsgU3dhcEFwaVV0aWwgfSBmcm9tICcuLi91dGlscy9Td2FwQXBpVXRpbC5qcyc7XG5pbXBvcnQgeyBTd2FwQ2FsY3VsYXRpb25VdGlsIH0gZnJvbSAnLi4vdXRpbHMvU3dhcENhbGN1bGF0aW9uVXRpbC5qcyc7XG5pbXBvcnQgeyB3aXRoRXJyb3JCb3VuZGFyeSB9IGZyb20gJy4uL3V0aWxzL3dpdGhFcnJvckJvdW5kYXJ5LmpzJztcbmltcG9ydCB7IEFjY291bnRDb250cm9sbGVyIH0gZnJvbSAnLi9BY2NvdW50Q29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBBbGVydENvbnRyb2xsZXIgfSBmcm9tICcuL0FsZXJ0Q29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBCbG9ja2NoYWluQXBpQ29udHJvbGxlciB9IGZyb20gJy4vQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgQ2hhaW5Db250cm9sbGVyIH0gZnJvbSAnLi9DaGFpbkNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgQ29ubmVjdGlvbkNvbnRyb2xsZXIgfSBmcm9tICcuL0Nvbm5lY3Rpb25Db250cm9sbGVyLmpzJztcbmltcG9ydCB7IENvbm5lY3RvckNvbnRyb2xsZXIgfSBmcm9tICcuL0Nvbm5lY3RvckNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgRXZlbnRzQ29udHJvbGxlciB9IGZyb20gJy4vRXZlbnRzQ29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBSb3V0ZXJDb250cm9sbGVyIH0gZnJvbSAnLi9Sb3V0ZXJDb250cm9sbGVyLmpzJztcbmltcG9ydCB7IFNuYWNrQ29udHJvbGxlciB9IGZyb20gJy4vU25hY2tDb250cm9sbGVyLmpzJztcbi8vIC0tIENvbnN0YW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5leHBvcnQgY29uc3QgSU5JVElBTF9HQVNfTElNSVQgPSAxNTAwMDA7XG5leHBvcnQgY29uc3QgVE9fQU1PVU5UX0RFQ0lNQUxTID0gNjtcbmNsYXNzIFRyYW5zYWN0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc2hvcnRNZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVHJhbnNhY3Rpb25FcnJvcic7XG4gICAgICAgIHRoaXMuc2hvcnRNZXNzYWdlID0gc2hvcnRNZXNzYWdlO1xuICAgIH1cbn1cbi8vIC0tIFN0YXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIC8vIExvYWRpbmcgc3RhdGVzXG4gICAgaW5pdGlhbGl6aW5nOiBmYWxzZSxcbiAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgbG9hZGluZ1ByaWNlczogZmFsc2UsXG4gICAgbG9hZGluZ1F1b3RlOiBmYWxzZSxcbiAgICBsb2FkaW5nQXBwcm92YWxUcmFuc2FjdGlvbjogZmFsc2UsXG4gICAgbG9hZGluZ0J1aWxkVHJhbnNhY3Rpb246IGZhbHNlLFxuICAgIGxvYWRpbmdUcmFuc2FjdGlvbjogZmFsc2UsXG4gICAgLy8gRXJyb3Igc3RhdGVzXG4gICAgZmV0Y2hFcnJvcjogZmFsc2UsXG4gICAgLy8gQXBwcm92YWwgJiBTd2FwIHRyYW5zYWN0aW9uIHN0YXRlc1xuICAgIGFwcHJvdmFsVHJhbnNhY3Rpb246IHVuZGVmaW5lZCxcbiAgICBzd2FwVHJhbnNhY3Rpb246IHVuZGVmaW5lZCxcbiAgICB0cmFuc2FjdGlvbkVycm9yOiB1bmRlZmluZWQsXG4gICAgLy8gSW5wdXQgdmFsdWVzXG4gICAgc291cmNlVG9rZW46IHVuZGVmaW5lZCxcbiAgICBzb3VyY2VUb2tlbkFtb3VudDogJycsXG4gICAgc291cmNlVG9rZW5QcmljZUluVVNEOiAwLFxuICAgIHRvVG9rZW46IHVuZGVmaW5lZCxcbiAgICB0b1Rva2VuQW1vdW50OiAnJyxcbiAgICB0b1Rva2VuUHJpY2VJblVTRDogMCxcbiAgICBuZXR3b3JrUHJpY2U6ICcwJyxcbiAgICBuZXR3b3JrQmFsYW5jZUluVVNEOiAnMCcsXG4gICAgbmV0d29ya1Rva2VuU3ltYm9sOiAnJyxcbiAgICBpbnB1dEVycm9yOiB1bmRlZmluZWQsXG4gICAgLy8gUmVxdWVzdCB2YWx1ZXNcbiAgICBzbGlwcGFnZTogQ29uc3RhbnRzVXRpbC5DT05WRVJUX1NMSVBQQUdFX1RPTEVSQU5DRSxcbiAgICAvLyBUb2tlbnNcbiAgICB0b2tlbnM6IHVuZGVmaW5lZCxcbiAgICBwb3B1bGFyVG9rZW5zOiB1bmRlZmluZWQsXG4gICAgc3VnZ2VzdGVkVG9rZW5zOiB1bmRlZmluZWQsXG4gICAgZm91bmRUb2tlbnM6IHVuZGVmaW5lZCxcbiAgICBteVRva2Vuc1dpdGhCYWxhbmNlOiB1bmRlZmluZWQsXG4gICAgdG9rZW5zUHJpY2VNYXA6IHt9LFxuICAgIC8vIENhbGN1bGF0aW9uc1xuICAgIGdhc0ZlZTogJzAnLFxuICAgIGdhc1ByaWNlSW5VU0Q6IDAsXG4gICAgcHJpY2VJbXBhY3Q6IHVuZGVmaW5lZCxcbiAgICBtYXhTbGlwcGFnZTogdW5kZWZpbmVkLFxuICAgIHByb3ZpZGVyRmVlOiB1bmRlZmluZWRcbn07XG5jb25zdCBzdGF0ZSA9IHByb3h5KGluaXRpYWxTdGF0ZSk7XG4vLyAtLSBDb250cm9sbGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbmNvbnN0IGNvbnRyb2xsZXIgPSB7XG4gICAgc3RhdGUsXG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBzdWIoc3RhdGUsICgpID0+IGNhbGxiYWNrKHN0YXRlKSk7XG4gICAgfSxcbiAgICBzdWJzY3JpYmVLZXkoa2V5LCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gc3ViS2V5KHN0YXRlLCBrZXksIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGdldFBhcmFtcygpIHtcbiAgICAgICAgY29uc3QgY2FpcEFkZHJlc3MgPSBDaGFpbkNvbnRyb2xsZXIuc3RhdGUuYWN0aXZlQ2FpcEFkZHJlc3M7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IENoYWluQ29udHJvbGxlci5zdGF0ZS5hY3RpdmVDaGFpbjtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IENvcmVIZWxwZXJVdGlsLmdldFBsYWluQWRkcmVzcyhjYWlwQWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IG5ldHdvcmtBZGRyZXNzID0gQ2hhaW5Db250cm9sbGVyLmdldEFjdGl2ZU5ldHdvcmtUb2tlbkFkZHJlc3MoKTtcbiAgICAgICAgY29uc3QgY29ubmVjdG9ySWQgPSBDb25uZWN0b3JDb250cm9sbGVyLmdldENvbm5lY3RvcklkKG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghYWRkcmVzcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBhZGRyZXNzIGZvdW5kIHRvIHN3YXAgdGhlIHRva2VucyBmcm9tLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludmFsaWRUb1Rva2VuID0gIXN0YXRlLnRvVG9rZW4/LmFkZHJlc3MgfHwgIXN0YXRlLnRvVG9rZW4/LmRlY2ltYWxzO1xuICAgICAgICBjb25zdCBpbnZhbGlkU291cmNlVG9rZW4gPSAhc3RhdGUuc291cmNlVG9rZW4/LmFkZHJlc3MgfHxcbiAgICAgICAgICAgICFzdGF0ZS5zb3VyY2VUb2tlbj8uZGVjaW1hbHMgfHxcbiAgICAgICAgICAgICFOdW1iZXJVdGlsLmJpZ051bWJlcihzdGF0ZS5zb3VyY2VUb2tlbkFtb3VudCkuZ3QoMCk7XG4gICAgICAgIGNvbnN0IGludmFsaWRTb3VyY2VUb2tlbkFtb3VudCA9ICFzdGF0ZS5zb3VyY2VUb2tlbkFtb3VudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5ldHdvcmtBZGRyZXNzLFxuICAgICAgICAgICAgZnJvbUFkZHJlc3M6IGFkZHJlc3MsXG4gICAgICAgICAgICBmcm9tQ2FpcEFkZHJlc3M6IGNhaXBBZGRyZXNzLFxuICAgICAgICAgICAgc291cmNlVG9rZW5BZGRyZXNzOiBzdGF0ZS5zb3VyY2VUb2tlbj8uYWRkcmVzcyxcbiAgICAgICAgICAgIHRvVG9rZW5BZGRyZXNzOiBzdGF0ZS50b1Rva2VuPy5hZGRyZXNzLFxuICAgICAgICAgICAgdG9Ub2tlbkFtb3VudDogc3RhdGUudG9Ub2tlbkFtb3VudCxcbiAgICAgICAgICAgIHRvVG9rZW5EZWNpbWFsczogc3RhdGUudG9Ub2tlbj8uZGVjaW1hbHMsXG4gICAgICAgICAgICBzb3VyY2VUb2tlbkFtb3VudDogc3RhdGUuc291cmNlVG9rZW5BbW91bnQsXG4gICAgICAgICAgICBzb3VyY2VUb2tlbkRlY2ltYWxzOiBzdGF0ZS5zb3VyY2VUb2tlbj8uZGVjaW1hbHMsXG4gICAgICAgICAgICBpbnZhbGlkVG9Ub2tlbixcbiAgICAgICAgICAgIGludmFsaWRTb3VyY2VUb2tlbixcbiAgICAgICAgICAgIGludmFsaWRTb3VyY2VUb2tlbkFtb3VudCxcbiAgICAgICAgICAgIGF2YWlsYWJsZVRvU3dhcDogY2FpcEFkZHJlc3MgJiYgIWludmFsaWRUb1Rva2VuICYmICFpbnZhbGlkU291cmNlVG9rZW4gJiYgIWludmFsaWRTb3VyY2VUb2tlbkFtb3VudCxcbiAgICAgICAgICAgIGlzQXV0aENvbm5lY3RvcjogY29ubmVjdG9ySWQgPT09IENvbW1vbkNvbnN0YW50c1V0aWwuQ09OTkVDVE9SX0lELkFVVEhcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHNldFNvdXJjZVRva2VuKHNvdXJjZVRva2VuKSB7XG4gICAgICAgIGlmICghc291cmNlVG9rZW4pIHtcbiAgICAgICAgICAgIHN0YXRlLnNvdXJjZVRva2VuID0gc291cmNlVG9rZW47XG4gICAgICAgICAgICBzdGF0ZS5zb3VyY2VUb2tlbkFtb3VudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUuc291cmNlVG9rZW5QcmljZUluVVNEID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5zb3VyY2VUb2tlbiA9IHNvdXJjZVRva2VuO1xuICAgICAgICBTd2FwQ29udHJvbGxlci5zZXRUb2tlblByaWNlKHNvdXJjZVRva2VuLmFkZHJlc3MsICdzb3VyY2VUb2tlbicpO1xuICAgIH0sXG4gICAgc2V0U291cmNlVG9rZW5BbW91bnQoYW1vdW50KSB7XG4gICAgICAgIHN0YXRlLnNvdXJjZVRva2VuQW1vdW50ID0gYW1vdW50O1xuICAgIH0sXG4gICAgc2V0VG9Ub2tlbih0b1Rva2VuKSB7XG4gICAgICAgIGlmICghdG9Ub2tlbikge1xuICAgICAgICAgICAgc3RhdGUudG9Ub2tlbiA9IHRvVG9rZW47XG4gICAgICAgICAgICBzdGF0ZS50b1Rva2VuQW1vdW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZS50b1Rva2VuUHJpY2VJblVTRCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUudG9Ub2tlbiA9IHRvVG9rZW47XG4gICAgICAgIFN3YXBDb250cm9sbGVyLnNldFRva2VuUHJpY2UodG9Ub2tlbi5hZGRyZXNzLCAndG9Ub2tlbicpO1xuICAgIH0sXG4gICAgc2V0VG9Ub2tlbkFtb3VudChhbW91bnQpIHtcbiAgICAgICAgc3RhdGUudG9Ub2tlbkFtb3VudCA9IGFtb3VudFxuICAgICAgICAgICAgPyBOdW1iZXJVdGlsLmZvcm1hdE51bWJlclRvTG9jYWxTdHJpbmcoYW1vdW50LCBUT19BTU9VTlRfREVDSU1BTFMpXG4gICAgICAgICAgICA6ICcnO1xuICAgIH0sXG4gICAgYXN5bmMgc2V0VG9rZW5QcmljZShhZGRyZXNzLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IHByaWNlID0gc3RhdGUudG9rZW5zUHJpY2VNYXBbYWRkcmVzc10gfHwgMDtcbiAgICAgICAgaWYgKCFwcmljZSkge1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ1ByaWNlcyA9IHRydWU7XG4gICAgICAgICAgICBwcmljZSA9IGF3YWl0IFN3YXBDb250cm9sbGVyLmdldEFkZHJlc3NQcmljZShhZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0ID09PSAnc291cmNlVG9rZW4nKSB7XG4gICAgICAgICAgICBzdGF0ZS5zb3VyY2VUb2tlblByaWNlSW5VU0QgPSBwcmljZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09ICd0b1Rva2VuJykge1xuICAgICAgICAgICAgc3RhdGUudG9Ub2tlblByaWNlSW5VU0QgPSBwcmljZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUubG9hZGluZ1ByaWNlcykge1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ1ByaWNlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKS5hdmFpbGFibGVUb1N3YXApIHtcbiAgICAgICAgICAgIFN3YXBDb250cm9sbGVyLnN3YXBUb2tlbnMoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc3dpdGNoVG9rZW5zKCkge1xuICAgICAgICBpZiAoc3RhdGUuaW5pdGlhbGl6aW5nIHx8ICFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld1NvdXJjZVRva2VuID0gc3RhdGUudG9Ub2tlbiA/IHsgLi4uc3RhdGUudG9Ub2tlbiB9IDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBuZXdUb1Rva2VuID0gc3RhdGUuc291cmNlVG9rZW4gPyB7IC4uLnN0YXRlLnNvdXJjZVRva2VuIH0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IG5ld1NvdXJjZVRva2VuQW1vdW50ID0gbmV3U291cmNlVG9rZW4gJiYgc3RhdGUudG9Ub2tlbkFtb3VudCA9PT0gJycgPyAnMScgOiBzdGF0ZS50b1Rva2VuQW1vdW50O1xuICAgICAgICBTd2FwQ29udHJvbGxlci5zZXRTb3VyY2VUb2tlbihuZXdTb3VyY2VUb2tlbik7XG4gICAgICAgIFN3YXBDb250cm9sbGVyLnNldFRvVG9rZW4obmV3VG9Ub2tlbik7XG4gICAgICAgIFN3YXBDb250cm9sbGVyLnNldFNvdXJjZVRva2VuQW1vdW50KG5ld1NvdXJjZVRva2VuQW1vdW50KTtcbiAgICAgICAgU3dhcENvbnRyb2xsZXIuc2V0VG9Ub2tlbkFtb3VudCgnJyk7XG4gICAgICAgIFN3YXBDb250cm9sbGVyLnN3YXBUb2tlbnMoKTtcbiAgICB9LFxuICAgIHJlc2V0U3RhdGUoKSB7XG4gICAgICAgIHN0YXRlLm15VG9rZW5zV2l0aEJhbGFuY2UgPSBpbml0aWFsU3RhdGUubXlUb2tlbnNXaXRoQmFsYW5jZTtcbiAgICAgICAgc3RhdGUudG9rZW5zUHJpY2VNYXAgPSBpbml0aWFsU3RhdGUudG9rZW5zUHJpY2VNYXA7XG4gICAgICAgIHN0YXRlLmluaXRpYWxpemVkID0gaW5pdGlhbFN0YXRlLmluaXRpYWxpemVkO1xuICAgICAgICBzdGF0ZS5zb3VyY2VUb2tlbiA9IGluaXRpYWxTdGF0ZS5zb3VyY2VUb2tlbjtcbiAgICAgICAgc3RhdGUuc291cmNlVG9rZW5BbW91bnQgPSBpbml0aWFsU3RhdGUuc291cmNlVG9rZW5BbW91bnQ7XG4gICAgICAgIHN0YXRlLnNvdXJjZVRva2VuUHJpY2VJblVTRCA9IGluaXRpYWxTdGF0ZS5zb3VyY2VUb2tlblByaWNlSW5VU0Q7XG4gICAgICAgIHN0YXRlLnRvVG9rZW4gPSBpbml0aWFsU3RhdGUudG9Ub2tlbjtcbiAgICAgICAgc3RhdGUudG9Ub2tlbkFtb3VudCA9IGluaXRpYWxTdGF0ZS50b1Rva2VuQW1vdW50O1xuICAgICAgICBzdGF0ZS50b1Rva2VuUHJpY2VJblVTRCA9IGluaXRpYWxTdGF0ZS50b1Rva2VuUHJpY2VJblVTRDtcbiAgICAgICAgc3RhdGUubmV0d29ya1ByaWNlID0gaW5pdGlhbFN0YXRlLm5ldHdvcmtQcmljZTtcbiAgICAgICAgc3RhdGUubmV0d29ya1Rva2VuU3ltYm9sID0gaW5pdGlhbFN0YXRlLm5ldHdvcmtUb2tlblN5bWJvbDtcbiAgICAgICAgc3RhdGUubmV0d29ya0JhbGFuY2VJblVTRCA9IGluaXRpYWxTdGF0ZS5uZXR3b3JrQmFsYW5jZUluVVNEO1xuICAgICAgICBzdGF0ZS5pbnB1dEVycm9yID0gaW5pdGlhbFN0YXRlLmlucHV0RXJyb3I7XG4gICAgICAgIHN0YXRlLm15VG9rZW5zV2l0aEJhbGFuY2UgPSBpbml0aWFsU3RhdGUubXlUb2tlbnNXaXRoQmFsYW5jZTtcbiAgICB9LFxuICAgIHJlc2V0VmFsdWVzKCkge1xuICAgICAgICBjb25zdCB7IG5ldHdvcmtBZGRyZXNzIH0gPSBTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKTtcbiAgICAgICAgY29uc3QgbmV0d29ya1Rva2VuID0gc3RhdGUudG9rZW5zPy5maW5kKHRva2VuID0+IHRva2VuLmFkZHJlc3MgPT09IG5ldHdvcmtBZGRyZXNzKTtcbiAgICAgICAgU3dhcENvbnRyb2xsZXIuc2V0U291cmNlVG9rZW4obmV0d29ya1Rva2VuKTtcbiAgICAgICAgU3dhcENvbnRyb2xsZXIuc2V0VG9Ub2tlbih1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZ2V0QXBwcm92YWxMb2FkaW5nU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5sb2FkaW5nQXBwcm92YWxUcmFuc2FjdGlvbjtcbiAgICB9LFxuICAgIGNsZWFyRXJyb3IoKSB7XG4gICAgICAgIHN0YXRlLnRyYW5zYWN0aW9uRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBhc3luYyBpbml0aWFsaXplU3RhdGUoKSB7XG4gICAgICAgIGlmIChzdGF0ZS5pbml0aWFsaXppbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5pbml0aWFsaXppbmcgPSB0cnVlO1xuICAgICAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IFN3YXBDb250cm9sbGVyLmZldGNoVG9rZW5zKCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBTbmFja0NvbnRyb2xsZXIuc2hvd0Vycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBzd2FwJyk7XG4gICAgICAgICAgICAgICAgUm91dGVyQ29udHJvbGxlci5nb0JhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5pbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICB9LFxuICAgIGFzeW5jIGZldGNoVG9rZW5zKCkge1xuICAgICAgICBjb25zdCB7IG5ldHdvcmtBZGRyZXNzIH0gPSBTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKTtcbiAgICAgICAgYXdhaXQgU3dhcENvbnRyb2xsZXIuZ2V0VG9rZW5MaXN0KCk7XG4gICAgICAgIGF3YWl0IFN3YXBDb250cm9sbGVyLmdldE5ldHdvcmtUb2tlblByaWNlKCk7XG4gICAgICAgIGF3YWl0IFN3YXBDb250cm9sbGVyLmdldE15VG9rZW5zV2l0aEJhbGFuY2UoKTtcbiAgICAgICAgY29uc3QgbmV0d29ya1Rva2VuID0gc3RhdGUudG9rZW5zPy5maW5kKHRva2VuID0+IHRva2VuLmFkZHJlc3MgPT09IG5ldHdvcmtBZGRyZXNzKTtcbiAgICAgICAgaWYgKG5ldHdvcmtUb2tlbikge1xuICAgICAgICAgICAgc3RhdGUubmV0d29ya1Rva2VuU3ltYm9sID0gbmV0d29ya1Rva2VuLnN5bWJvbDtcbiAgICAgICAgICAgIFN3YXBDb250cm9sbGVyLnNldFNvdXJjZVRva2VuKG5ldHdvcmtUb2tlbik7XG4gICAgICAgICAgICBTd2FwQ29udHJvbGxlci5zZXRTb3VyY2VUb2tlbkFtb3VudCgnMScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBnZXRUb2tlbkxpc3QoKSB7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IGF3YWl0IFN3YXBBcGlVdGlsLmdldFRva2VuTGlzdCgpO1xuICAgICAgICBzdGF0ZS50b2tlbnMgPSB0b2tlbnM7XG4gICAgICAgIHN0YXRlLnBvcHVsYXJUb2tlbnMgPSB0b2tlbnMuc29ydCgoYVRva2VuSW5mbywgYlRva2VuSW5mbykgPT4ge1xuICAgICAgICAgICAgaWYgKGFUb2tlbkluZm8uc3ltYm9sIDwgYlRva2VuSW5mby5zeW1ib2wpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYVRva2VuSW5mby5zeW1ib2wgPiBiVG9rZW5JbmZvLnN5bWJvbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0ZS5zdWdnZXN0ZWRUb2tlbnMgPSB0b2tlbnMuZmlsdGVyKHRva2VuID0+IHtcbiAgICAgICAgICAgIGlmIChDb25zdGFudHNVdGlsLlNXQVBfU1VHR0VTVEVEX1RPS0VOUy5pbmNsdWRlcyh0b2tlbi5zeW1ib2wpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9LFxuICAgIGFzeW5jIGdldEFkZHJlc3NQcmljZShhZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0UHJpY2UgPSBzdGF0ZS50b2tlbnNQcmljZU1hcFthZGRyZXNzXTtcbiAgICAgICAgaWYgKGV4aXN0UHJpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdFByaWNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIuZmV0Y2hUb2tlblByaWNlKHtcbiAgICAgICAgICAgIGFkZHJlc3NlczogW2FkZHJlc3NdXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmdW5naWJsZXMgPSByZXNwb25zZT8uZnVuZ2libGVzIHx8IFtdO1xuICAgICAgICBjb25zdCBhbGxUb2tlbnMgPSBbLi4uKHN0YXRlLnRva2VucyB8fCBbXSksIC4uLihzdGF0ZS5teVRva2Vuc1dpdGhCYWxhbmNlIHx8IFtdKV07XG4gICAgICAgIGNvbnN0IHN5bWJvbCA9IGFsbFRva2Vucz8uZmluZCh0b2tlbiA9PiB0b2tlbi5hZGRyZXNzID09PSBhZGRyZXNzKT8uc3ltYm9sO1xuICAgICAgICBjb25zdCBwcmljZSA9IGZ1bmdpYmxlcy5maW5kKHAgPT4gcC5zeW1ib2wudG9Mb3dlckNhc2UoKSA9PT0gc3ltYm9sPy50b0xvd2VyQ2FzZSgpKT8ucHJpY2UgfHwgMDtcbiAgICAgICAgY29uc3QgcHJpY2VBc0Zsb2F0ID0gcGFyc2VGbG9hdChwcmljZS50b1N0cmluZygpKTtcbiAgICAgICAgc3RhdGUudG9rZW5zUHJpY2VNYXBbYWRkcmVzc10gPSBwcmljZUFzRmxvYXQ7XG4gICAgICAgIHJldHVybiBwcmljZUFzRmxvYXQ7XG4gICAgfSxcbiAgICBhc3luYyBnZXROZXR3b3JrVG9rZW5QcmljZSgpIHtcbiAgICAgICAgY29uc3QgeyBuZXR3b3JrQWRkcmVzcyB9ID0gU3dhcENvbnRyb2xsZXIuZ2V0UGFyYW1zKCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIuZmV0Y2hUb2tlblByaWNlKHtcbiAgICAgICAgICAgIGFkZHJlc3NlczogW25ldHdvcmtBZGRyZXNzXVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICBTbmFja0NvbnRyb2xsZXIuc2hvd0Vycm9yKCdGYWlsZWQgdG8gZmV0Y2ggbmV0d29yayB0b2tlbiBwcmljZScpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZnVuZ2libGVzOiBbXSB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSByZXNwb25zZS5mdW5naWJsZXM/LlswXTtcbiAgICAgICAgY29uc3QgcHJpY2UgPSB0b2tlbj8ucHJpY2UudG9TdHJpbmcoKSB8fCAnMCc7XG4gICAgICAgIHN0YXRlLnRva2Vuc1ByaWNlTWFwW25ldHdvcmtBZGRyZXNzXSA9IHBhcnNlRmxvYXQocHJpY2UpO1xuICAgICAgICBzdGF0ZS5uZXR3b3JrVG9rZW5TeW1ib2wgPSB0b2tlbj8uc3ltYm9sIHx8ICcnO1xuICAgICAgICBzdGF0ZS5uZXR3b3JrUHJpY2UgPSBwcmljZTtcbiAgICB9LFxuICAgIGFzeW5jIGdldE15VG9rZW5zV2l0aEJhbGFuY2UoZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgY29uc3QgYmFsYW5jZXMgPSBhd2FpdCBTZW5kQXBpVXRpbC5nZXRNeVRva2Vuc1dpdGhCYWxhbmNlKGZvcmNlVXBkYXRlKTtcbiAgICAgICAgY29uc3Qgc3dhcEJhbGFuY2VzID0gU2VuZEFwaVV0aWwubWFwQmFsYW5jZXNUb1N3YXBUb2tlbnMoYmFsYW5jZXMpO1xuICAgICAgICBpZiAoIXN3YXBCYWxhbmNlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFN3YXBDb250cm9sbGVyLmdldEluaXRpYWxHYXNQcmljZSgpO1xuICAgICAgICBTd2FwQ29udHJvbGxlci5zZXRCYWxhbmNlcyhzd2FwQmFsYW5jZXMpO1xuICAgIH0sXG4gICAgc2V0QmFsYW5jZXMoYmFsYW5jZXMpIHtcbiAgICAgICAgY29uc3QgeyBuZXR3b3JrQWRkcmVzcyB9ID0gU3dhcENvbnRyb2xsZXIuZ2V0UGFyYW1zKCk7XG4gICAgICAgIGNvbnN0IGNhaXBOZXR3b3JrID0gQ2hhaW5Db250cm9sbGVyLnN0YXRlLmFjdGl2ZUNhaXBOZXR3b3JrO1xuICAgICAgICBpZiAoIWNhaXBOZXR3b3JrKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV0d29ya1Rva2VuID0gYmFsYW5jZXMuZmluZCh0b2tlbiA9PiB0b2tlbi5hZGRyZXNzID09PSBuZXR3b3JrQWRkcmVzcyk7XG4gICAgICAgIGJhbGFuY2VzLmZvckVhY2godG9rZW4gPT4ge1xuICAgICAgICAgICAgc3RhdGUudG9rZW5zUHJpY2VNYXBbdG9rZW4uYWRkcmVzc10gPSB0b2tlbi5wcmljZSB8fCAwO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGUubXlUb2tlbnNXaXRoQmFsYW5jZSA9IGJhbGFuY2VzLmZpbHRlcih0b2tlbiA9PiB0b2tlbi5hZGRyZXNzLnN0YXJ0c1dpdGgoY2FpcE5ldHdvcmsuY2FpcE5ldHdvcmtJZCkpO1xuICAgICAgICBzdGF0ZS5uZXR3b3JrQmFsYW5jZUluVVNEID0gbmV0d29ya1Rva2VuXG4gICAgICAgICAgICA/IE51bWJlclV0aWwubXVsdGlwbHkobmV0d29ya1Rva2VuLnF1YW50aXR5Lm51bWVyaWMsIG5ldHdvcmtUb2tlbi5wcmljZSkudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiAnMCc7XG4gICAgfSxcbiAgICBhc3luYyBnZXRJbml0aWFsR2FzUHJpY2UoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IFN3YXBBcGlVdGlsLmZldGNoR2FzUHJpY2UoKTtcbiAgICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGdhc1ByaWNlOiBudWxsLCBnYXNQcmljZUluVVNEOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChDaGFpbkNvbnRyb2xsZXIuc3RhdGU/LmFjdGl2ZUNhaXBOZXR3b3JrPy5jaGFpbk5hbWVzcGFjZSkge1xuICAgICAgICAgICAgY2FzZSAnc29sYW5hJzpcbiAgICAgICAgICAgICAgICBzdGF0ZS5nYXNGZWUgPSByZXMuc3RhbmRhcmQgPz8gJzAnO1xuICAgICAgICAgICAgICAgIHN0YXRlLmdhc1ByaWNlSW5VU0QgPSBOdW1iZXJVdGlsLm11bHRpcGx5KHJlcy5zdGFuZGFyZCwgc3RhdGUubmV0d29ya1ByaWNlKVxuICAgICAgICAgICAgICAgICAgICAuZGl2KDFlOSlcbiAgICAgICAgICAgICAgICAgICAgLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2U6IEJpZ0ludChzdGF0ZS5nYXNGZWUpLFxuICAgICAgICAgICAgICAgICAgICBnYXNQcmljZUluVVNEOiBOdW1iZXIoc3RhdGUuZ2FzUHJpY2VJblVTRClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnZWlwMTU1JzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXMuc3RhbmRhcmQgPz8gJzAnO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgIGNvbnN0IGdhc0ZlZSA9IEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgICAgY29uc3QgZ2FzTGltaXQgPSBCaWdJbnQoSU5JVElBTF9HQVNfTElNSVQpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgIGNvbnN0IGdhc1ByaWNlID0gU3dhcENhbGN1bGF0aW9uVXRpbC5nZXRHYXNQcmljZUluVVNEKHN0YXRlLm5ldHdvcmtQcmljZSwgZ2FzTGltaXQsIGdhc0ZlZSk7XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2FzRmVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2FzUHJpY2VJblVTRCA9IGdhc1ByaWNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGdhc1ByaWNlOiBnYXNGZWUsIGdhc1ByaWNlSW5VU0Q6IGdhc1ByaWNlIH07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tIFN3YXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbiAgICBhc3luYyBzd2FwVG9rZW5zKCkge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gQWNjb3VudENvbnRyb2xsZXIuc3RhdGUuYWRkcmVzcztcbiAgICAgICAgY29uc3Qgc291cmNlVG9rZW4gPSBzdGF0ZS5zb3VyY2VUb2tlbjtcbiAgICAgICAgY29uc3QgdG9Ub2tlbiA9IHN0YXRlLnRvVG9rZW47XG4gICAgICAgIGNvbnN0IGhhdmVTb3VyY2VUb2tlbkFtb3VudCA9IE51bWJlclV0aWwuYmlnTnVtYmVyKHN0YXRlLnNvdXJjZVRva2VuQW1vdW50KS5ndCgwKTtcbiAgICAgICAgaWYgKCFoYXZlU291cmNlVG9rZW5BbW91bnQpIHtcbiAgICAgICAgICAgIFN3YXBDb250cm9sbGVyLnNldFRvVG9rZW5BbW91bnQoJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdG9Ub2tlbiB8fCAhc291cmNlVG9rZW4gfHwgc3RhdGUubG9hZGluZ1ByaWNlcyB8fCAhaGF2ZVNvdXJjZVRva2VuQW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubG9hZGluZ1F1b3RlID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgYW1vdW50RGVjaW1hbCA9IE51bWJlclV0aWwuYmlnTnVtYmVyKHN0YXRlLnNvdXJjZVRva2VuQW1vdW50KVxuICAgICAgICAgICAgLnRpbWVzKDEwICoqIHNvdXJjZVRva2VuLmRlY2ltYWxzKVxuICAgICAgICAgICAgLnJvdW5kKDApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcXVvdGVSZXNwb25zZSA9IGF3YWl0IEJsb2NrY2hhaW5BcGlDb250cm9sbGVyLmZldGNoU3dhcFF1b3RlKHtcbiAgICAgICAgICAgICAgICB1c2VyQWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBmcm9tOiBzb3VyY2VUb2tlbi5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRvOiB0b1Rva2VuLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2U6IHN0YXRlLmdhc0ZlZSxcbiAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudERlY2ltYWwudG9TdHJpbmcoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdGF0ZS5sb2FkaW5nUXVvdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHF1b3RlVG9BbW91bnQgPSBxdW90ZVJlc3BvbnNlPy5xdW90ZXM/LlswXT8udG9BbW91bnQ7XG4gICAgICAgICAgICBpZiAoIXF1b3RlVG9BbW91bnQpIHtcbiAgICAgICAgICAgICAgICBBbGVydENvbnRyb2xsZXIub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHNob3J0TWVzc2FnZTogJ0luY29ycmVjdCBhbW91bnQnLFxuICAgICAgICAgICAgICAgICAgICBsb25nTWVzc2FnZTogJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGFtb3VudCdcbiAgICAgICAgICAgICAgICB9LCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0b1Rva2VuQW1vdW50ID0gTnVtYmVyVXRpbC5iaWdOdW1iZXIocXVvdGVUb0Ftb3VudClcbiAgICAgICAgICAgICAgICAuZGl2KDEwICoqIHRvVG9rZW4uZGVjaW1hbHMpXG4gICAgICAgICAgICAgICAgLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBTd2FwQ29udHJvbGxlci5zZXRUb1Rva2VuQW1vdW50KHRvVG9rZW5BbW91bnQpO1xuICAgICAgICAgICAgY29uc3QgaXNJbnN1ZmZpY2llbnRUb2tlbiA9IFN3YXBDb250cm9sbGVyLmhhc0luc3VmZmljaWVudFRva2VuKHN0YXRlLnNvdXJjZVRva2VuQW1vdW50LCBzb3VyY2VUb2tlbi5hZGRyZXNzKTtcbiAgICAgICAgICAgIGlmIChpc0luc3VmZmljaWVudFRva2VuKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5wdXRFcnJvciA9ICdJbnN1ZmZpY2llbnQgYmFsYW5jZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pbnB1dEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIFN3YXBDb250cm9sbGVyLnNldFRyYW5zYWN0aW9uRGV0YWlscygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ1F1b3RlID0gZmFsc2U7XG4gICAgICAgICAgICBzdGF0ZS5pbnB1dEVycm9yID0gJ0luc3VmZmljaWVudCBiYWxhbmNlJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0gQ3JlYXRlIFRyYW5zYWN0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uKCkge1xuICAgICAgICBjb25zdCB7IGZyb21DYWlwQWRkcmVzcywgYXZhaWxhYmxlVG9Td2FwIH0gPSBTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKTtcbiAgICAgICAgY29uc3Qgc291cmNlVG9rZW4gPSBzdGF0ZS5zb3VyY2VUb2tlbjtcbiAgICAgICAgY29uc3QgdG9Ub2tlbiA9IHN0YXRlLnRvVG9rZW47XG4gICAgICAgIGlmICghZnJvbUNhaXBBZGRyZXNzIHx8ICFhdmFpbGFibGVUb1N3YXAgfHwgIXNvdXJjZVRva2VuIHx8ICF0b1Rva2VuIHx8IHN0YXRlLmxvYWRpbmdRdW90ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ0J1aWxkVHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgaGFzQWxsb3dhbmNlID0gYXdhaXQgU3dhcEFwaVV0aWwuZmV0Y2hTd2FwQWxsb3dhbmNlKHtcbiAgICAgICAgICAgICAgICB1c2VyQWRkcmVzczogZnJvbUNhaXBBZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRva2VuQWRkcmVzczogc291cmNlVG9rZW4uYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzb3VyY2VUb2tlbkFtb3VudDogc3RhdGUuc291cmNlVG9rZW5BbW91bnQsXG4gICAgICAgICAgICAgICAgc291cmNlVG9rZW5EZWNpbWFsczogc291cmNlVG9rZW4uZGVjaW1hbHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHRyYW5zYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGhhc0FsbG93YW5jZSkge1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uID0gYXdhaXQgU3dhcENvbnRyb2xsZXIuY3JlYXRlU3dhcFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiA9IGF3YWl0IFN3YXBDb250cm9sbGVyLmNyZWF0ZUFsbG93YW5jZVRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS5sb2FkaW5nQnVpbGRUcmFuc2FjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgc3RhdGUuZmV0Y2hFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgUm91dGVyQ29udHJvbGxlci5nb0JhY2soKTtcbiAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93RXJyb3IoJ0ZhaWxlZCB0byBjaGVjayBhbGxvd2FuY2UnKTtcbiAgICAgICAgICAgIHN0YXRlLmxvYWRpbmdCdWlsZFRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBzdGF0ZS5hcHByb3ZhbFRyYW5zYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3RhdGUuc3dhcFRyYW5zYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3RhdGUuZmV0Y2hFcnJvciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBjcmVhdGVBbGxvd2FuY2VUcmFuc2FjdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBmcm9tQ2FpcEFkZHJlc3MsIHNvdXJjZVRva2VuQWRkcmVzcywgdG9Ub2tlbkFkZHJlc3MgfSA9IFN3YXBDb250cm9sbGVyLmdldFBhcmFtcygpO1xuICAgICAgICBpZiAoIWZyb21DYWlwQWRkcmVzcyB8fCAhdG9Ub2tlbkFkZHJlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzb3VyY2VUb2tlbkFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlQWxsb3dhbmNlVHJhbnNhY3Rpb24gLSBObyBzb3VyY2UgdG9rZW4gYWRkcmVzcyBmb3VuZC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBCbG9ja2NoYWluQXBpQ29udHJvbGxlci5nZW5lcmF0ZUFwcHJvdmVDYWxsZGF0YSh7XG4gICAgICAgICAgICAgICAgZnJvbTogc291cmNlVG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRvOiB0b1Rva2VuQWRkcmVzcyxcbiAgICAgICAgICAgICAgICB1c2VyQWRkcmVzczogZnJvbUNhaXBBZGRyZXNzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLnR4LmRhdGEsXG4gICAgICAgICAgICAgICAgdG86IENvcmVIZWxwZXJVdGlsLmdldFBsYWluQWRkcmVzcyhyZXNwb25zZS50eC5mcm9tKSxcbiAgICAgICAgICAgICAgICBnYXNQcmljZTogQmlnSW50KHJlc3BvbnNlLnR4LmVpcDE1NS5nYXNQcmljZSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IEJpZ0ludChyZXNwb25zZS50eC52YWx1ZSksXG4gICAgICAgICAgICAgICAgdG9BbW91bnQ6IHN0YXRlLnRvVG9rZW5BbW91bnRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGF0ZS5zd2FwVHJhbnNhY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBzdGF0ZS5hcHByb3ZhbFRyYW5zYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zYWN0aW9uLmRhdGEsXG4gICAgICAgICAgICAgICAgdG86IHRyYW5zYWN0aW9uLnRvLFxuICAgICAgICAgICAgICAgIGdhc1ByaWNlOiB0cmFuc2FjdGlvbi5nYXNQcmljZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdHJhbnNhY3Rpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgdG9BbW91bnQ6IHRyYW5zYWN0aW9uLnRvQW1vdW50XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2FjdGlvbi5kYXRhLFxuICAgICAgICAgICAgICAgIHRvOiB0cmFuc2FjdGlvbi50byxcbiAgICAgICAgICAgICAgICBnYXNQcmljZTogdHJhbnNhY3Rpb24uZ2FzUHJpY2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRyYW5zYWN0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRvQW1vdW50OiB0cmFuc2FjdGlvbi50b0Ftb3VudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIFJvdXRlckNvbnRyb2xsZXIuZ29CYWNrKCk7XG4gICAgICAgICAgICBTbmFja0NvbnRyb2xsZXIuc2hvd0Vycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGFwcHJvdmFsIHRyYW5zYWN0aW9uJyk7XG4gICAgICAgICAgICBzdGF0ZS5hcHByb3ZhbFRyYW5zYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3RhdGUuc3dhcFRyYW5zYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3RhdGUuZmV0Y2hFcnJvciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBjcmVhdGVTd2FwVHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgbmV0d29ya0FkZHJlc3MsIGZyb21DYWlwQWRkcmVzcywgc291cmNlVG9rZW5BbW91bnQgfSA9IFN3YXBDb250cm9sbGVyLmdldFBhcmFtcygpO1xuICAgICAgICBjb25zdCBzb3VyY2VUb2tlbiA9IHN0YXRlLnNvdXJjZVRva2VuO1xuICAgICAgICBjb25zdCB0b1Rva2VuID0gc3RhdGUudG9Ub2tlbjtcbiAgICAgICAgaWYgKCFmcm9tQ2FpcEFkZHJlc3MgfHwgIXNvdXJjZVRva2VuQW1vdW50IHx8ICFzb3VyY2VUb2tlbiB8fCAhdG9Ub2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbW91bnQgPSBDb25uZWN0aW9uQ29udHJvbGxlci5wYXJzZVVuaXRzKHNvdXJjZVRva2VuQW1vdW50LCBzb3VyY2VUb2tlbi5kZWNpbWFscyk/LnRvU3RyaW5nKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEJsb2NrY2hhaW5BcGlDb250cm9sbGVyLmdlbmVyYXRlU3dhcENhbGxkYXRhKHtcbiAgICAgICAgICAgICAgICB1c2VyQWRkcmVzczogZnJvbUNhaXBBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGZyb206IHNvdXJjZVRva2VuLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgdG86IHRvVG9rZW4uYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRXN0aW1hdGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgaXNTb3VyY2VUb2tlbklzTmV0d29ya1Rva2VuID0gc291cmNlVG9rZW4uYWRkcmVzcyA9PT0gbmV0d29ya0FkZHJlc3M7XG4gICAgICAgICAgICBjb25zdCBnYXMgPSBCaWdJbnQocmVzcG9uc2UudHguZWlwMTU1Lmdhcyk7XG4gICAgICAgICAgICBjb25zdCBnYXNQcmljZSA9IEJpZ0ludChyZXNwb25zZS50eC5laXAxNTUuZ2FzUHJpY2UpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UudHguZGF0YSxcbiAgICAgICAgICAgICAgICB0bzogQ29yZUhlbHBlclV0aWwuZ2V0UGxhaW5BZGRyZXNzKHJlc3BvbnNlLnR4LnRvKSxcbiAgICAgICAgICAgICAgICBnYXMsXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGlzU291cmNlVG9rZW5Jc05ldHdvcmtUb2tlbiA/IEJpZ0ludChhbW91bnQgPz8gJzAnKSA6IEJpZ0ludCgnMCcpLFxuICAgICAgICAgICAgICAgIHRvQW1vdW50OiBzdGF0ZS50b1Rva2VuQW1vdW50XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdGUuZ2FzUHJpY2VJblVTRCA9IFN3YXBDYWxjdWxhdGlvblV0aWwuZ2V0R2FzUHJpY2VJblVTRChzdGF0ZS5uZXR3b3JrUHJpY2UsIGdhcywgZ2FzUHJpY2UpO1xuICAgICAgICAgICAgc3RhdGUuYXBwcm92YWxUcmFuc2FjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHN0YXRlLnN3YXBUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgUm91dGVyQ29udHJvbGxlci5nb0JhY2soKTtcbiAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93RXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdHJhbnNhY3Rpb24nKTtcbiAgICAgICAgICAgIHN0YXRlLmFwcHJvdmFsVHJhbnNhY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBzdGF0ZS5zd2FwVHJhbnNhY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBzdGF0ZS5mZXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tIFNlbmQgVHJhbnNhY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIGFzeW5jIHNlbmRUcmFuc2FjdGlvbkZvckFwcHJvdmFsKGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBmcm9tQWRkcmVzcywgaXNBdXRoQ29ubmVjdG9yIH0gPSBTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKTtcbiAgICAgICAgc3RhdGUubG9hZGluZ0FwcHJvdmFsVHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgICBjb25zdCBhcHByb3ZlTGltaXRNZXNzYWdlID0gYEFwcHJvdmUgbGltaXQgaW5jcmVhc2UgaW4geW91ciB3YWxsZXRgO1xuICAgICAgICBpZiAoaXNBdXRoQ29ubmVjdG9yKSB7XG4gICAgICAgICAgICBSb3V0ZXJDb250cm9sbGVyLnB1c2hUcmFuc2FjdGlvblN0YWNrKHtcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoKSB7XG4gICAgICAgICAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93TG9hZGluZyhhcHByb3ZlTGltaXRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93TG9hZGluZyhhcHByb3ZlTGltaXRNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgQ29ubmVjdGlvbkNvbnRyb2xsZXIuc2VuZFRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBmcm9tQWRkcmVzcyxcbiAgICAgICAgICAgICAgICB0bzogZGF0YS50byxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEudmFsdWUsXG4gICAgICAgICAgICAgICAgY2hhaW5OYW1lc3BhY2U6ICdlaXAxNTUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IFN3YXBDb250cm9sbGVyLnN3YXBUb2tlbnMoKTtcbiAgICAgICAgICAgIGF3YWl0IFN3YXBDb250cm9sbGVyLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICBzdGF0ZS5hcHByb3ZhbFRyYW5zYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ0FwcHJvdmFsVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIHN0YXRlLnRyYW5zYWN0aW9uRXJyb3IgPSBlcnJvcj8uc2hvcnRNZXNzYWdlO1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ0FwcHJvdmFsVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93RXJyb3IoZXJyb3I/LnNob3J0TWVzc2FnZSB8fCAnVHJhbnNhY3Rpb24gZXJyb3InKTtcbiAgICAgICAgICAgIEV2ZW50c0NvbnRyb2xsZXIuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndHJhY2snLFxuICAgICAgICAgICAgICAgIGV2ZW50OiAnU1dBUF9BUFBST1ZBTF9FUlJPUicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvcj8uc2hvcnRNZXNzYWdlIHx8IGVycm9yPy5tZXNzYWdlIHx8ICdVbmtub3duJyxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29yazogQ2hhaW5Db250cm9sbGVyLnN0YXRlLmFjdGl2ZUNhaXBOZXR3b3JrPy5jYWlwTmV0d29ya0lkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwRnJvbVRva2VuOiBTd2FwQ29udHJvbGxlci5zdGF0ZS5zb3VyY2VUb2tlbj8uc3ltYm9sIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwVG9Ub2tlbjogU3dhcENvbnRyb2xsZXIuc3RhdGUudG9Ub2tlbj8uc3ltYm9sIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwRnJvbUFtb3VudDogU3dhcENvbnRyb2xsZXIuc3RhdGUuc291cmNlVG9rZW5BbW91bnQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHN3YXBUb0Ftb3VudDogU3dhcENvbnRyb2xsZXIuc3RhdGUudG9Ub2tlbkFtb3VudCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgaXNTbWFydEFjY291bnQ6IEFjY291bnRDb250cm9sbGVyLnN0YXRlLnByZWZlcnJlZEFjY291bnRUeXBlcz8uZWlwMTU1ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgVzNtRnJhbWVScGNDb25zdGFudHMuQUNDT1VOVF9UWVBFUy5TTUFSVF9BQ0NPVU5UXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNlbmRUcmFuc2FjdGlvbkZvclN3YXAoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBmcm9tQWRkcmVzcywgdG9Ub2tlbkFtb3VudCwgaXNBdXRoQ29ubmVjdG9yIH0gPSBTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKTtcbiAgICAgICAgc3RhdGUubG9hZGluZ1RyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc25hY2tiYXJQZW5kaW5nTWVzc2FnZSA9IGBTd2FwcGluZyAke3N0YXRlLnNvdXJjZVRva2VuPy5zeW1ib2x9IHRvICR7TnVtYmVyVXRpbC5mb3JtYXROdW1iZXJUb0xvY2FsU3RyaW5nKHRvVG9rZW5BbW91bnQsIDMpfSAke3N0YXRlLnRvVG9rZW4/LnN5bWJvbH1gO1xuICAgICAgICBjb25zdCBzbmFja2JhclN1Y2Nlc3NNZXNzYWdlID0gYFN3YXBwZWQgJHtzdGF0ZS5zb3VyY2VUb2tlbj8uc3ltYm9sfSB0byAke051bWJlclV0aWwuZm9ybWF0TnVtYmVyVG9Mb2NhbFN0cmluZyh0b1Rva2VuQW1vdW50LCAzKX0gJHtzdGF0ZS50b1Rva2VuPy5zeW1ib2x9YDtcbiAgICAgICAgaWYgKGlzQXV0aENvbm5lY3Rvcikge1xuICAgICAgICAgICAgUm91dGVyQ29udHJvbGxlci5wdXNoVHJhbnNhY3Rpb25TdGFjayh7XG4gICAgICAgICAgICAgICAgb25TdWNjZXNzKCkge1xuICAgICAgICAgICAgICAgICAgICBSb3V0ZXJDb250cm9sbGVyLnJlcGxhY2UoJ0FjY291bnQnKTtcbiAgICAgICAgICAgICAgICAgICAgU25hY2tDb250cm9sbGVyLnNob3dMb2FkaW5nKHNuYWNrYmFyUGVuZGluZ01lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnJlc2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93TG9hZGluZygnQ29uZmlybSB0cmFuc2FjdGlvbiBpbiB5b3VyIHdhbGxldCcpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmb3JjZVVwZGF0ZUFkZHJlc3NlcyA9IFtzdGF0ZS5zb3VyY2VUb2tlbj8uYWRkcmVzcywgc3RhdGUudG9Ub2tlbj8uYWRkcmVzc10uam9pbignLCcpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25IYXNoID0gYXdhaXQgQ29ubmVjdGlvbkNvbnRyb2xsZXIuc2VuZFRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBmcm9tQWRkcmVzcyxcbiAgICAgICAgICAgICAgICB0bzogZGF0YS50byxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEudmFsdWUsXG4gICAgICAgICAgICAgICAgY2hhaW5OYW1lc3BhY2U6ICdlaXAxNTUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN0YXRlLmxvYWRpbmdUcmFuc2FjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgU25hY2tDb250cm9sbGVyLnNob3dTdWNjZXNzKHNuYWNrYmFyU3VjY2Vzc01lc3NhZ2UpO1xuICAgICAgICAgICAgRXZlbnRzQ29udHJvbGxlci5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0cmFjaycsXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICdTV0FQX1NVQ0NFU1MnLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29yazogQ2hhaW5Db250cm9sbGVyLnN0YXRlLmFjdGl2ZUNhaXBOZXR3b3JrPy5jYWlwTmV0d29ya0lkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwRnJvbVRva2VuOiBTd2FwQ29udHJvbGxlci5zdGF0ZS5zb3VyY2VUb2tlbj8uc3ltYm9sIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwVG9Ub2tlbjogU3dhcENvbnRyb2xsZXIuc3RhdGUudG9Ub2tlbj8uc3ltYm9sIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwRnJvbUFtb3VudDogU3dhcENvbnRyb2xsZXIuc3RhdGUuc291cmNlVG9rZW5BbW91bnQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHN3YXBUb0Ftb3VudDogU3dhcENvbnRyb2xsZXIuc3RhdGUudG9Ub2tlbkFtb3VudCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgaXNTbWFydEFjY291bnQ6IEFjY291bnRDb250cm9sbGVyLnN0YXRlLnByZWZlcnJlZEFjY291bnRUeXBlcz8uZWlwMTU1ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgVzNtRnJhbWVScGNDb25zdGFudHMuQUNDT1VOVF9UWVBFUy5TTUFSVF9BQ0NPVU5UXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnJlc2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGlmICghaXNBdXRoQ29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgUm91dGVyQ29udHJvbGxlci5yZXBsYWNlKCdBY2NvdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmdldE15VG9rZW5zV2l0aEJhbGFuY2UoZm9yY2VVcGRhdGVBZGRyZXNzZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uSGFzaDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIHN0YXRlLnRyYW5zYWN0aW9uRXJyb3IgPSBlcnJvcj8uc2hvcnRNZXNzYWdlO1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ1RyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBTbmFja0NvbnRyb2xsZXIuc2hvd0Vycm9yKGVycm9yPy5zaG9ydE1lc3NhZ2UgfHwgJ1RyYW5zYWN0aW9uIGVycm9yJyk7XG4gICAgICAgICAgICBFdmVudHNDb250cm9sbGVyLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RyYWNrJyxcbiAgICAgICAgICAgICAgICBldmVudDogJ1NXQVBfRVJST1InLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3I/LnNob3J0TWVzc2FnZSB8fCBlcnJvcj8ubWVzc2FnZSB8fCAnVW5rbm93bicsXG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcms6IENoYWluQ29udHJvbGxlci5zdGF0ZS5hY3RpdmVDYWlwTmV0d29yaz8uY2FpcE5ldHdvcmtJZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgc3dhcEZyb21Ub2tlbjogU3dhcENvbnRyb2xsZXIuc3RhdGUuc291cmNlVG9rZW4/LnN5bWJvbCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgc3dhcFRvVG9rZW46IFN3YXBDb250cm9sbGVyLnN0YXRlLnRvVG9rZW4/LnN5bWJvbCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgc3dhcEZyb21BbW91bnQ6IFN3YXBDb250cm9sbGVyLnN0YXRlLnNvdXJjZVRva2VuQW1vdW50IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzd2FwVG9BbW91bnQ6IFN3YXBDb250cm9sbGVyLnN0YXRlLnRvVG9rZW5BbW91bnQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGlzU21hcnRBY2NvdW50OiBBY2NvdW50Q29udHJvbGxlci5zdGF0ZS5wcmVmZXJyZWRBY2NvdW50VHlwZXM/LmVpcDE1NSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIFczbUZyYW1lUnBjQ29uc3RhbnRzLkFDQ09VTlRfVFlQRVMuU01BUlRfQUNDT1VOVFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0gQ2hlY2tzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gICAgaGFzSW5zdWZmaWNpZW50VG9rZW4oc291cmNlVG9rZW5BbW91bnQsIHNvdXJjZVRva2VuQWRkcmVzcykge1xuICAgICAgICBjb25zdCBpc0luc3VmZmljaWVudFNvdXJjZVRva2VuRm9yU3dhcCA9IFN3YXBDYWxjdWxhdGlvblV0aWwuaXNJbnN1ZmZpY2llbnRTb3VyY2VUb2tlbkZvclN3YXAoc291cmNlVG9rZW5BbW91bnQsIHNvdXJjZVRva2VuQWRkcmVzcywgc3RhdGUubXlUb2tlbnNXaXRoQmFsYW5jZSk7XG4gICAgICAgIHJldHVybiBpc0luc3VmZmljaWVudFNvdXJjZVRva2VuRm9yU3dhcDtcbiAgICB9LFxuICAgIC8vIC0tIENhbGN1bGF0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuICAgIHNldFRyYW5zYWN0aW9uRGV0YWlscygpIHtcbiAgICAgICAgY29uc3QgeyB0b1Rva2VuQWRkcmVzcywgdG9Ub2tlbkRlY2ltYWxzIH0gPSBTd2FwQ29udHJvbGxlci5nZXRQYXJhbXMoKTtcbiAgICAgICAgaWYgKCF0b1Rva2VuQWRkcmVzcyB8fCAhdG9Ub2tlbkRlY2ltYWxzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZ2FzUHJpY2VJblVTRCA9IFN3YXBDYWxjdWxhdGlvblV0aWwuZ2V0R2FzUHJpY2VJblVTRChzdGF0ZS5uZXR3b3JrUHJpY2UsIEJpZ0ludChzdGF0ZS5nYXNGZWUpLCBCaWdJbnQoSU5JVElBTF9HQVNfTElNSVQpKTtcbiAgICAgICAgc3RhdGUucHJpY2VJbXBhY3QgPSBTd2FwQ2FsY3VsYXRpb25VdGlsLmdldFByaWNlSW1wYWN0KHtcbiAgICAgICAgICAgIHNvdXJjZVRva2VuQW1vdW50OiBzdGF0ZS5zb3VyY2VUb2tlbkFtb3VudCxcbiAgICAgICAgICAgIHNvdXJjZVRva2VuUHJpY2VJblVTRDogc3RhdGUuc291cmNlVG9rZW5QcmljZUluVVNELFxuICAgICAgICAgICAgdG9Ub2tlblByaWNlSW5VU0Q6IHN0YXRlLnRvVG9rZW5QcmljZUluVVNELFxuICAgICAgICAgICAgdG9Ub2tlbkFtb3VudDogc3RhdGUudG9Ub2tlbkFtb3VudFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGUubWF4U2xpcHBhZ2UgPSBTd2FwQ2FsY3VsYXRpb25VdGlsLmdldE1heFNsaXBwYWdlKHN0YXRlLnNsaXBwYWdlLCBzdGF0ZS50b1Rva2VuQW1vdW50KTtcbiAgICAgICAgc3RhdGUucHJvdmlkZXJGZWUgPSBTd2FwQ2FsY3VsYXRpb25VdGlsLmdldFByb3ZpZGVyRmVlKHN0YXRlLnNvdXJjZVRva2VuQW1vdW50KTtcbiAgICB9XG59O1xuLy8gRXhwb3J0IHRoZSBjb250cm9sbGVyIHdyYXBwZWQgd2l0aCBvdXIgZXJyb3IgYm91bmRhcnlcbmV4cG9ydCBjb25zdCBTd2FwQ29udHJvbGxlciA9IHdpdGhFcnJvckJvdW5kYXJ5KGNvbnRyb2xsZXIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3dhcENvbnRyb2xsZXIuanMubWFwIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuXG4gIDpob3N0ID4gYnV0dG9uIHtcbiAgICBnYXA6IHZhcigtLXd1aS1zcGFjaW5nLXh4cyk7XG4gICAgcGFkZGluZzogdmFyKC0td3VpLXNwYWNpbmcteHMpO1xuICAgIHBhZGRpbmctcmlnaHQ6IHZhcigtLXd1aS1zcGFjaW5nLTF4cyk7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLXd1aS1ib3JkZXItcmFkaXVzLWwpO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXd1aS1jb2xvci1ncmF5LWdsYXNzLTAwMik7XG4gICAgYm9yZGVyLXdpZHRoOiAwcHg7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4IHZhcigtLXd1aS1jb2xvci1ncmF5LWdsYXNzLTAwMik7XG4gIH1cblxuICA6aG9zdCA+IGJ1dHRvbiB3dWktaW1hZ2Uge1xuICAgIHdpZHRoOiAyNHB4O1xuICAgIGhlaWdodDogMjRweDtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS13dWktYm9yZGVyLXJhZGl1cy1zKTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggdmFyKC0td3VpLWNvbG9yLWdyYXktZ2xhc3MtMDEwKTtcbiAgfVxuYDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlcy5qcy5tYXAiLCJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5pbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0ICcuLi8uLi9jb21wb25lbnRzL3d1aS1pbWFnZS9pbmRleC5qcyc7XG5pbXBvcnQgJy4uLy4uL2NvbXBvbmVudHMvd3VpLXRleHQvaW5kZXguanMnO1xuaW1wb3J0IHsgZWxlbWVudFN0eWxlcywgcmVzZXRTdHlsZXMgfSBmcm9tICcuLi8uLi91dGlscy9UaGVtZVV0aWwuanMnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gJy4uLy4uL3V0aWxzL1dlYkNvbXBvbmVudHNVdGlsLmpzJztcbmltcG9ydCAnLi4vd3VpLWljb24tYm94L2luZGV4LmpzJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuanMnO1xubGV0IFd1aVRva2VuQnV0dG9uID0gY2xhc3MgV3VpVG9rZW5CdXR0b24gZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50ZXh0ID0gJyc7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPGJ1dHRvbj5cbiAgICAgICAgJHt0aGlzLnRva2VuVGVtcGxhdGUoKX1cbiAgICAgICAgPHd1aS10ZXh0IHZhcmlhbnQ9XCJwYXJhZ3JhcGgtNjAwXCIgY29sb3I9XCJmZy0xMDBcIj4ke3RoaXMudGV4dH08L3d1aS10ZXh0PlxuICAgICAgPC9idXR0b24+XG4gICAgYDtcbiAgICB9XG4gICAgdG9rZW5UZW1wbGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VTcmMpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sIGA8d3VpLWltYWdlIHNyYz0ke3RoaXMuaW1hZ2VTcmN9Pjwvd3VpLWltYWdlPmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPHd1aS1pY29uLWJveFxuICAgICAgICBzaXplPVwic21cIlxuICAgICAgICBpY29uQ29sb3I9XCJmZy0yMDBcIlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJmZy0zMDBcIlxuICAgICAgICBpY29uPVwibmV0d29ya1BsYWNlaG9sZGVyXCJcbiAgICAgID48L3d1aS1pY29uLWJveD5cbiAgICBgO1xuICAgIH1cbn07XG5XdWlUb2tlbkJ1dHRvbi5zdHlsZXMgPSBbcmVzZXRTdHlsZXMsIGVsZW1lbnRTdHlsZXMsIHN0eWxlc107XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSgpXG5dLCBXdWlUb2tlbkJ1dHRvbi5wcm90b3R5cGUsIFwiaW1hZ2VTcmNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KClcbl0sIFd1aVRva2VuQnV0dG9uLnByb3RvdHlwZSwgXCJ0ZXh0XCIsIHZvaWQgMCk7XG5XdWlUb2tlbkJ1dHRvbiA9IF9fZGVjb3JhdGUoW1xuICAgIGN1c3RvbUVsZW1lbnQoJ3d1aS10b2tlbi1idXR0b24nKVxuXSwgV3VpVG9rZW5CdXR0b24pO1xuZXhwb3J0IHsgV3VpVG9rZW5CdXR0b24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJTd2FwQXBpVXRpbCIsImNhaXBOZXR3b3JrIiwiQ2hhaW5Db250cm9sbGVyIiwiQmxvY2tjaGFpbkFwaUNvbnRyb2xsZXIiLCJ0b2tlbiIsImxhbXBvcnRzUGVyU2lnbmF0dXJlIiwiQ29ubmVjdGlvbkNvbnRyb2xsZXIiLCJ0b2tlbkFkZHJlc3MiLCJ1c2VyQWRkcmVzcyIsInNvdXJjZVRva2VuQW1vdW50Iiwic291cmNlVG9rZW5EZWNpbWFscyIsInJlc3BvbnNlIiwicGFyc2VkVmFsdWUiLCJmb3JjZVVwZGF0ZSIsImFkZHJlc3MiLCJBY2NvdW50Q29udHJvbGxlciIsImJhbGFuY2VzIiwiYmFsYW5jZSIsIlN3YXBDYWxjdWxhdGlvblV0aWwiLCJnYXMiLCJnYXNQcmljZSIsInRvdGFsR2FzQ29zdEluV2VpIiwibmV0d29ya1ByaWNlIiwidG90YWxHYXNDb3N0SW5FdGhlciIsIk51bWJlclV0aWwiLCJzb3VyY2VUb2tlblByaWNlSW5VU0QiLCJ0b1Rva2VuUHJpY2VJblVTRCIsInRvVG9rZW5BbW91bnQiLCJpbnB1dFZhbHVlIiwib3V0cHV0VmFsdWUiLCJzbGlwcGFnZSIsInNsaXBwYWdlVG9sZXJhbmNlRGVjaW1hbCIsImZlZVBlcmNlbnRhZ2UiLCJuZXR3b3JrQmFsYW5jZUluVVNEIiwiZ2FzUHJpY2VJblVTRCIsInNvdXJjZVRva2VuQWRkcmVzcyIsInNvdXJjZVRva2VuQmFsYW5jZSIsInNvdXJjZVRva2VuIiwidG9Ub2tlbiIsInNvdXJjZVRva2VuUHJpY2UiLCJ0b1Rva2VuUHJpY2UiLCJ0b1Rva2VuRGVjaW1hbHMiLCJwcm92aWRlckZlZSIsInNvdXJjZUFtb3VudEluU21hbGxlc3RVbml0IiwicHJpY2VSYXRpbyIsImRlY2ltYWxEaWZmZXJlbmNlIiwiSU5JVElBTF9HQVNfTElNSVQiLCJUT19BTU9VTlRfREVDSU1BTFMiLCJpbml0aWFsU3RhdGUiLCJDb25zdGFudHNVdGlsIiwic3RhdGUiLCJwcm94eSIsImNvbnRyb2xsZXIiLCJjYWxsYmFjayIsInN1YiIsImtleSIsInN1YktleSIsImNhaXBBZGRyZXNzIiwibmFtZXNwYWNlIiwiQ29yZUhlbHBlclV0aWwiLCJuZXR3b3JrQWRkcmVzcyIsImNvbm5lY3RvcklkIiwiQ29ubmVjdG9yQ29udHJvbGxlciIsImludmFsaWRUb1Rva2VuIiwiaW52YWxpZFNvdXJjZVRva2VuIiwiaW52YWxpZFNvdXJjZVRva2VuQW1vdW50IiwiQ29tbW9uQ29uc3RhbnRzVXRpbCIsIlN3YXBDb250cm9sbGVyIiwiYW1vdW50IiwidGFyZ2V0IiwicHJpY2UiLCJuZXdTb3VyY2VUb2tlbiIsIm5ld1RvVG9rZW4iLCJuZXdTb3VyY2VUb2tlbkFtb3VudCIsIm5ldHdvcmtUb2tlbiIsIlNuYWNrQ29udHJvbGxlciIsIlJvdXRlckNvbnRyb2xsZXIiLCJ0b2tlbnMiLCJhVG9rZW5JbmZvIiwiYlRva2VuSW5mbyIsImV4aXN0UHJpY2UiLCJmdW5naWJsZXMiLCJzeW1ib2wiLCJwcmljZUFzRmxvYXQiLCJTZW5kQXBpVXRpbCIsInN3YXBCYWxhbmNlcyIsInJlcyIsInZhbHVlIiwiZ2FzRmVlIiwiZ2FzTGltaXQiLCJoYXZlU291cmNlVG9rZW5BbW91bnQiLCJhbW91bnREZWNpbWFsIiwicXVvdGVSZXNwb25zZSIsInF1b3RlVG9BbW91bnQiLCJBbGVydENvbnRyb2xsZXIiLCJmcm9tQ2FpcEFkZHJlc3MiLCJhdmFpbGFibGVUb1N3YXAiLCJoYXNBbGxvd2FuY2UiLCJ0cmFuc2FjdGlvbiIsInRvVG9rZW5BZGRyZXNzIiwiaXNTb3VyY2VUb2tlbklzTmV0d29ya1Rva2VuIiwiZGF0YSIsImZyb21BZGRyZXNzIiwiaXNBdXRoQ29ubmVjdG9yIiwiYXBwcm92ZUxpbWl0TWVzc2FnZSIsImVyciIsImVycm9yIiwiRXZlbnRzQ29udHJvbGxlciIsIlczbUZyYW1lUnBjQ29uc3RhbnRzIiwic25hY2tiYXJQZW5kaW5nTWVzc2FnZSIsInNuYWNrYmFyU3VjY2Vzc01lc3NhZ2UiLCJmb3JjZVVwZGF0ZUFkZHJlc3NlcyIsInRyYW5zYWN0aW9uSGFzaCIsIndpdGhFcnJvckJvdW5kYXJ5Iiwic3R5bGVzIiwiY3NzIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJkZXNjIiwiYyIsInIiLCJkIiwiaSIsIld1aVRva2VuQnV0dG9uIiwiTGl0RWxlbWVudCIsImh0bWwiLCJyZXNldFN0eWxlcyIsImVsZW1lbnRTdHlsZXMiLCJwcm9wZXJ0eSIsImN1c3RvbUVsZW1lbnQiXSwibWFwcGluZ3MiOiJxVEFLTyxNQUFNQSxFQUFjLENBQ3ZCLE1BQU0sY0FBZSxDQUNqQixNQUFNQyxFQUFjQyxFQUFnQixNQUFNLGtCQWMxQyxPQWJpQixNQUFNQyxFQUF3QixnQkFBZ0IsQ0FDM0QsUUFBU0YsR0FBYSxhQUNsQyxDQUFTLElBQ3dCLFFBQVEsSUFBSUcsSUFBVSxDQUMzQyxHQUFHQSxFQUNILFFBQVMsR0FDVCxTQUFVLENBQ04sU0FBVSxJQUNWLFFBQVMsR0FDWixFQUNELE1BQU8sRUFDUCxN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aUJBQWlCLEVBQ3RGLENBQ0EsRUFFYWlCLEVBQWlCOEMsRUFBa0I3RCxDQUFVLEVDOW9CMUQ4RCxFQUFlQztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQSxFQ0RmLElBQUlDLEVBQTBDLFNBQVVDLEVBQVloRCxFQUFRZCxFQUFLK0QsRUFBTSxDQUNuRixJQUFJQyxFQUFJLFVBQVUsT0FBUUMsRUFBSUQsRUFBSSxFQUFJbEQsRUFBU2lELElBQVMsS0FBT0EsRUFBTyxPQUFPLHlCQUF5QmpELEVBQVFkLENBQUcsRUFBSStELEVBQU1HLEVBQzNILEdBQUksT0FBTyxTQUFZLFVBQVksT0FBTyxRQUFRLFVBQWEsV0FBWUQsRUFBSSxRQUFRLFNBQVNILEVBQVloRCxFQUFRZCxFQUFLK0QsQ0FBSSxNQUN4SCxTQUFTSSxFQUFJTCxFQUFXLE9BQVMsRUFBR0ssR0FBSyxFQUFHQSxLQUFTRCxFQUFJSixFQUFXSyxDQUFDLEtBQUdGLEdBQUtELEVBQUksRUFBSUUsRUFBRUQsQ0FBQyxFQUFJRCxFQUFJLEVBQUlFLEVBQUVwRCxFQUFRZCxFQUFLaUUsQ0FBQyxFQUFJQyxFQUFFcEQsRUFBUWQsQ0FBRyxJQUFNaUUsR0FDaEosT0FBT0QsRUFBSSxHQUFLQyxHQUFLLE9BQU8sZUFBZW5ELEVBQVFkLEVBQUtpRSxDQUFDLEVBQUdBLENBQ2hFLEVBU0EsSUFBSUcsRUFBaUIsY0FBNkJDLENBQVcsQ0FDekQsYUFBYyxDQUNWLE1BQU0sR0FBRyxTQUFTLEVBQ2xCLEtBQUssS0FBTyxFQUNwQixDQUNJLFFBQVMsQ0FDTCxPQUFPQztBQUFBQTtBQUFBQSxVQUVMLEtBQUssY0FBZSxDQUFBO0FBQUEsMkRBQzZCLEtBQUssSUFBSTtBQUFBO0FBQUEsS0FHcEUsQ0FDSSxlQUFnQixDQUNaLE9BQUksS0FBSyxTQUNFQSxtQkFBdUIsS0FBSyxRQUFRLGdCQUV4Q0E7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsS0FRZixDQUNBLEVBQ0FGLEVBQWUsT0FBUyxDQUFDRyxFQUFhQyxFQUFlYixDQUFNLEVBQzNERSxFQUFXLENBQ1BZLEVBQVEsQ0FDWixFQUFHTCxFQUFlLFVBQVcsV0FBWSxNQUFNLEVBQy9DUCxFQUFXLENBQ1BZLEVBQVEsQ0FDWixFQUFHTCxFQUFlLFVBQVcsT0FBUSxNQUFNLEVBQzNDQSxFQUFpQlAsRUFBVyxDQUN4QmEsRUFBYyxrQkFBa0IsQ0FDcEMsRUFBR04sQ0FBYyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDRdfQ==
