import{i as E,a as L,C as S,O as b,R as g,b as A,x as l,d as C,m as W,n as D,A as d,o as F,e as _,f as u,k as R,p as T,S as y,q as j,M as O,T as P}from"./index-C4QAg8YX.js";import{n as q,r as c,c as k,o as v}from"./if-defined-BYYrXBY0.js";import{O as I}from"./index-Cil4hSyZ.js";import{e as z}from"./index-DmN8p6Zo.js";import"./index-DQcN5B-F.js";import"./index-DhYXixcu.js";import"./index-9f6LuDk9.js";import"./index-DX2qWijH.js";import"./index-BykbajPo.js";import"./index-B9RM8SMB.js";import"./ref-DqiK23uq.js";import"./ConstantsUtil-Dmg8YACJ.js";import"./index-BTa2w2R5.js";import"./index-BRbX2CYq.js";const M=E`
  :host {
    margin-top: var(--wui-spacing-3xs);
  }
  wui-separator {
    margin: var(--wui-spacing-m) calc(var(--wui-spacing-m) * -1) var(--wui-spacing-xs)
      calc(var(--wui-spacing-m) * -1);
    width: calc(100% + var(--wui-spacing-s) * 2);
  }
`;var w=function(s,e,i,o){var r=arguments.length,t=r<3?e:o===null?o=Object.getOwnPropertyDescriptor(e,i):o,n;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")t=Reflect.decorate(s,e,i,o);else for(var a=s.length-1;a>=0;a--)(n=s[a])&&(t=(r<3?n(t):r>3?n(e,i,t):n(e,i))||t);return r>3&&t&&Object.defineProperty(e,i,t),t};let h=class extends L{constructor(){super(),this.unsubscribe=[],this.tabIdx=void 0,this.connectors=S.state.connectors,this.authConnector=this.connectors.find(e=>e.type==="AUTH"),this.remoteFeatures=b.state.remoteFeatures,this.isPwaLoading=!1,this.unsubscribe.push(S.subscribeKey("connectors",e=>{this.connectors=e,this.authConnector=this.connectors.find(i=>i.type==="AUTH")}),b.subscribeKey("remoteFeatures",e=>this.remoteFeatures=e))}connectedCallback(){super.connectedCallback(),this.handlePwaFrameLoad()}disconnectedCallback(){this.unsubscribe.forEach(e=>e())}render(){let e=this.remoteFeatures?.socials||[];const i=!!this.authConnector,o=e?.length,r=g.state.view==="ConnectSocials";return(!i||!o)&&!r?null:(r&&!o&&(e=A.DEFAULT_SOCIALS),l` <wui-flex flexDirection="column" gap="xs">
      ${e.map(t=>l`<wui-list-social
            @click=${()=>{this.onSocialClick(t)}}
            data-testid=${`social-selector-${t}`}
            name=${t}
            logo=${t}
            ?disabled=${this.isPwaLoading}
          ></wui-list-social>`)}
    </wui-flex>`)}async onSocialClick(e){e&&await z(e)}async handlePwaFrameLoad(){if(C.isPWA()){this.isPwaLoading=!0;try{this.authConnector?.provider instanceof W&&await this.authConnector.provider.init()}catch(e){D.open({shortMessage:"Error loading embedded wallet in PWA",longMessage:e.message},"error")}finally{this.isPwaLoading=!1}}}};h.styles=M;w([q()],h.prototype,"tabIdx",void 0);w([c()],h.prototype,"connectors",void 0);w([c()],h.prototype,"authConnector",void 0);w([c()],h.prototype,"remoteFeatures",void 0);w([c()],h.prototype,"isPwaLoading",void 0);h=w([k("w3m-social-login-list")],h);const N=E`
  wui-flex {
    max-height: clamp(360px, 540px, 80vh);
    overflow: scroll;
    scrollbar-width: none;
    transition: opacity var(--wui-ease-out-power-1) var(--wui-duration-md);
    will-change: opacity;
  }
  wui-flex::-webkit-scrollbar {
    display: none;
  }
  wui-flex.disabled {
    opacity: 0.3;
    pointer-events: none;
    user-select: none;
  }
`;var U=function(s,e,i,o){var r=arguments.length,t=r<3?e:o===null?o=Object.getOwnPropertyDescriptor(e,i):o,n;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")t=Reflect.decorate(s,e,i,o);else for(var a=s.length-1;a>=0;a--)(n=s[a])&&(t=(r<3?n(t):r>3?n(e,i,t):n(e,i))||t);return r>3&&t&&Object.defineProperty(e,i,t),t};let $=class extends L{constructor(){super(),this.unsubscribe=[],this.checked=I.state.isLegalCheckboxChecked,this.unsubscribe.push(I.subscribeKey("isLegalCheckboxChecked",e=>{this.checked=e}))}disconnectedCallback(){this.unsubscribe.forEach(e=>e())}render(){const{termsConditionsUrl:e,privacyPolicyUrl:i}=b.state,o=b.state.features?.legalCheckbox,t=!!(e||i)&&!!o,n=t&&!this.checked,a=n?-1:void 0;return l`
      <w3m-legal-checkbox></w3m-legal-checkbox>
      <wui-flex
        flexDirection="column"
        .padding=${t?["0","s","s","s"]:"s"}
        gap="xs"
        class=${v(n?"disabled":void 0)}
      >
        <w3m-social-login-list tabIdx=${v(a)}></w3m-social-login-list>
      </wui-flex>
      <w3m-legal-footer></w3m-legal-footer>
    `}};$.styles=N;U([c()],$.prototype,"checked",void 0);$=U([k("w3m-connect-socials-view")],$);const V=E`
  wui-logo {
    width: 80px;
    height: 80px;
    border-radius: var(--wui-border-radius-m);
  }
  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(3px);
    }
    50% {
      transform: translateX(-3px);
    }
    75% {
      transform: translateX(3px);
    }
    100% {
      transform: translateX(0);
    }
  }
  wui-flex:first-child:not(:only-child) {
    position: relative;
  }
  wui-loading-thumbnail {
    position: absolute;
  }
  wui-icon-box {
    position: absolute;
    right: calc(var(--wui-spacing-3xs) * -1);
    bottom: calc(var(--wui-spacing-3xs) * -1);
    opacity: 0;
    transform: scale(0.5);
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-lg);
  }
  wui-text[align='center'] {
    width: 100%;
    padding: 0px var(--wui-spacing-l);
  }
  [data-error='true'] wui-icon-box {
    opacity: 1;
    transform: scale(1);
  }
  [data-error='true'] > wui-flex:first-child {
    animation: shake 250ms cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  }
  .capitalize {
    text-transform: capitalize;
  }
`;var m=function(s,e,i,o){var r=arguments.length,t=r<3?e:o===null?o=Object.getOwnPropertyDescriptor(e,i):o,n;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")t=Reflect.decorate(s,e,i,o);else for(var a=s.length-1;a>=0;a--)(n=s[a])&&(t=(r<3?n(t):r>3?n(e,i,t):n(e,i))||t);return r>3&&t&&Object.defineProperty(e,i,t),t};let p=class extends L{constructor(){super(),this.unsubscribe=[],this.socialProvider=d.state.socialProvider,this.socialWindow=d.state.socialWindow,this.error=!1,this.connecting=!1,this.message="Connect in the provider window",this.authConnector=S.getAuthConnector(),this.handleSocialConnection=async i=>{if(i.data?.resultUri)if(i.origin===F.SECURE_SITE_ORIGIN){window.removeEventListener("message",this.handleSocialConnection,!1);try{if(this.authConnector&&!this.connecting){this.socialWindow&&(this.socialWindow.close(),d.setSocialWindow(void 0,_.state.activeChain)),this.connecting=!0,this.updateMessage();const o=i.data.resultUri;this.socialProvider&&u.sendEvent({type:"track",event:"SOCIAL_LOGIN_REQUEST_USER_DATA",properties:{provider:this.socialProvider}}),await R.connectExternal({id:this.authConnector.id,type:this.authConnector.type,socialUri:o},this.authConnector.chain),this.socialProvider&&(T.setConnectedSocialProvider(this.socialProvider),u.sendEvent({type:"track",event:"SOCIAL_LOGIN_SUCCESS",properties:{provider:this.socialProvider}}))}}catch{this.error=!0,this.updateMessage(),this.socialProvider&&u.sendEvent({type:"track",event:"SOCIAL_LOGIN_ERROR",properties:{provider:this.socialProvider}})}}else g.goBack(),y.showError("Untrusted Origin"),this.socialProvider&&u.sendEvent({type:"track",event:"SOCIAL_LOGIN_ERROR",properties:{provider:this.socialProvider}})},j.EmbeddedWalletAbortController.signal.addEventListener("abort",()=>{this.socialWindow&&(this.socialWindow.close(),d.setSocialWindow(void 0,_.state.activeChain))}),this.unsubscribe.push(d.subscribe(i=>{i.socialProvider&&(this.socialProvider=i.socialProvider),i.socialWindow&&(this.socialWindow=i.socialWindow),i.address&&(O.state.open||b.state.enableEmbedded)&&O.close()})),this.authConnector&&this.connectSocial()}disconnectedCallback(){this.unsubscribe.forEach(e=>e()),window.removeEventListener("message",this.handleSocialConnection,!1),this.socialWindow?.close(),d.setSocialWindow(void 0,_.state.activeChain)}render(){return l`
      <wui-flex
        data-error=${v(this.error)}
        flexDirection="column"
        alignItems="center"
        .padding=${["3xl","xl","xl","xl"]}
        gap="xl"
      >
        <wui-flex justifyContent="center" alignItems="center">
          <wui-logo logo=${v(this.socialProvider)}></wui-logo>
          ${this.error?null:this.loaderTemplate()}
          <wui-icon-box
            backgroundColor="error-100"
            background="opaque"
            iconColor="error-100"
            icon="close"
            size="sm"
            border
            borderColor="wui-color-bg-125"
          ></wui-icon-box>
        </wui-flex>
        <wui-flex flexDirection="column" alignItems="center" gap="xs">
          <wui-text align="center" variant="paragraph-500" color="fg-100"
            >Log in with
            <span class="capitalize">${this.socialProvider??"Social"}</span></wui-text
          >
          <wui-text align="center" variant="small-400" color=${this.error?"error-100":"fg-200"}
            >${this.message}</wui-text
          ></wui-flex
        >
      </wui-flex>
    `}loaderTemplate(){const e=P.state.themeVariables["--w3m-border-radius-master"],i=e?parseInt(e.replace("px",""),10):4;return l`<wui-loading-thumbnail radius=${i*9}></wui-loading-thumbnail>`}connectSocial(){const e=setInterval(()=>{this.socialWindow?.closed&&(!this.connecting&&g.state.view==="ConnectingSocial"&&(this.socialProvider&&u.sendEvent({type:"track",event:"SOCIAL_LOGIN_CANCELED",properties:{provider:this.socialProvider}}),g.goBack()),clearInterval(e))},1e3);window.addEventListener("message",this.handleSocialConnection,!1)}updateMessage(){this.error?this.message="Something went wrong":this.connecting?this.message="Retrieving user data":this.message="Connect in the provider window"}};p.styles=V;m([c()],p.prototype,"socialProvider",void 0);m([c()],p.prototype,"socialWindow",void 0);m([c()],p.prototype,"error",void 0);m([c()],p.prototype,"connecting",void 0);m([c()],p.prototype,"message",void 0);p=m([k("w3m-connecting-social-view")],p);const G=E`
  @keyframes fadein {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  wui-shimmer {
    width: 100%;
    aspect-ratio: 1 / 1;
    border-radius: clamp(0px, var(--wui-border-radius-l), 40px) !important;
  }

  wui-qr-code {
    opacity: 0;
    animation-duration: 200ms;
    animation-timing-function: ease;
    animation-name: fadein;
    animation-fill-mode: forwards;
  }

  wui-logo {
    width: 80px;
    height: 80px;
    border-radius: var(--wui-border-radius-m);
  }

  wui-flex:first-child:not(:only-child) {
    position: relative;
  }
  wui-loading-thumbnail {
    position: absolute;
  }
  wui-icon-box {
    position: absolute;
    right: calc(var(--wui-spacing-3xs) * -1);
    bottom: calc(var(--wui-spacing-3xs) * -1);
    opacity: 0;
    transform: scale(0.5);
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-lg);
  }
`;var x=function(s,e,i,o){var r=arguments.length,t=r<3?e:o===null?o=Object.getOwnPropertyDescriptor(e,i):o,n;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")t=Reflect.decorate(s,e,i,o);else for(var a=s.length-1;a>=0;a--)(n=s[a])&&(t=(r<3?n(t):r>3?n(e,i,t):n(e,i))||t);return r>3&&t&&Object.defineProperty(e,i,t),t};let f=class extends L{constructor(){super(),this.unsubscribe=[],this.timeout=void 0,this.socialProvider=d.state.socialProvider,this.uri=d.state.farcasterUrl,this.ready=!1,this.loading=!1,this.authConnector=S.getAuthConnector(),this.forceUpdate=()=>{this.requestUpdate()},this.unsubscribe.push(d.subscribeKey("farcasterUrl",e=>{e&&(this.uri=e,this.connectFarcaster())}),d.subscribeKey("socialProvider",e=>{e&&(this.socialProvider=e)})),window.addEventListener("resize",this.forceUpdate)}disconnectedCallback(){super.disconnectedCallback(),clearTimeout(this.timeout),window.removeEventListener("resize",this.forceUpdate)}render(){return this.onRenderProxy(),l`${this.platformTemplate()}`}platformTemplate(){return C.isMobile()?l`${this.mobileTemplate()}`:l`${this.desktopTemplate()}`}desktopTemplate(){return this.loading?l`${this.loadingTemplate()}`:l`${this.qrTemplate()}`}qrTemplate(){return l` <wui-flex
      flexDirection="column"
      alignItems="center"
      .padding=${["0","xl","xl","xl"]}
      gap="xl"
    >
      <wui-shimmer borderRadius="l" width="100%"> ${this.qrCodeTemplate()} </wui-shimmer>

      <wui-text variant="paragraph-500" color="fg-100">
        Scan this QR Code with your phone
      </wui-text>
      ${this.copyTemplate()}
    </wui-flex>`}loadingTemplate(){return l`
      <wui-flex
        flexDirection="column"
        alignItems="center"
        .padding=${["xl","xl","xl","xl"]}
        gap="xl"
      >
        <wui-flex justifyContent="center" alignItems="center">
          <wui-logo logo="farcaster"></wui-logo>
          ${this.loaderTemplate()}
          <wui-icon-box
            backgroundColor="error-100"
            background="opaque"
            iconColor="error-100"
            icon="close"
            size="sm"
            border
            borderColor="wui-color-bg-125"
          ></wui-icon-box>
        </wui-flex>
        <wui-flex flexDirection="column" alignItems="center" gap="xs">
          <wui-text align="center" variant="paragraph-500" color="fg-100">
            Loading user data
          </wui-text>
          <wui-text align="center" variant="small-400" color="fg-200">
            Please wait a moment while we load your data.
          </wui-text>
        </wui-flex>
      </wui-flex>
    `}mobileTemplate(){return l` <wui-flex
      flexDirection="column"
      alignItems="center"
      .padding=${["3xl","xl","xl","xl"]}
      gap="xl"
    >
      <wui-flex justifyContent="center" alignItems="center">
        <wui-logo logo="farcaster"></wui-logo>
        ${this.loaderTemplate()}
        <wui-icon-box
          backgroundColor="error-100"
          background="opaque"
          iconColor="error-100"
          icon="close"
          size="sm"
          border
          borderColor="wui-color-bg-125"
        ></wui-icon-box>
      </wui-flex>
      <wui-flex flexDirection="column" alignItems="center" gap="xs">
        <wui-text align="center" variant="paragraph-500" color="fg-100"
          >Continue in Farcaster</span></wui-text
        >
        <wui-text align="center" variant="small-400" color="fg-200"
          >Accept connection request in the app</wui-text
        ></wui-flex
      >
      ${this.mobileLinkTemplate()}
    </wui-flex>`}loaderTemplate(){const e=P.state.themeVariables["--w3m-border-radius-master"],i=e?parseInt(e.replace("px",""),10):4;return l`<wui-loading-thumbnail radius=${i*9}></wui-loading-thumbnail>`}async connectFarcaster(){if(this.authConnector)try{await this.authConnector?.provider.connectFarcaster(),this.socialProvider&&(T.setConnectedSocialProvider(this.socialProvider),u.sendEvent({type:"track",event:"SOCIAL_LOGIN_REQUEST_USER_DATA",properties:{provider:this.socialProvider}})),this.loading=!0,await R.connectExternal(this.authConnector,this.authConnector.chain),this.socialProvider&&u.sendEvent({type:"track",event:"SOCIAL_LOGIN_SUCCESS",properties:{provider:this.socialProvider}}),this.loading=!1,O.close()}catch(e){this.socialProvider&&u.sendEvent({type:"track",event:"SOCIAL_LOGIN_ERROR",properties:{provider:this.socialProvider}}),g.goBack(),y.showError(e)}}mobileLinkTemplate(){return l`<wui-button
      size="md"
      ?loading=${this.loading}
      ?disabled=${!this.uri||this.loading}
      @click=${()=>{this.uri&&C.openHref(this.uri,"_blank")}}
    >
      Open farcaster</wui-button
    >`}onRenderProxy(){!this.ready&&this.uri&&(this.timeout=setTimeout(()=>{this.ready=!0},200))}qrCodeTemplate(){if(!this.uri||!this.ready)return null;const e=this.getBoundingClientRect().width-40;return l` <wui-qr-code
      size=${e}
      theme=${P.state.themeMode}
      uri=${this.uri}
      ?farcaster=${!0}
      data-testid="wui-qr-code"
      color=${v(P.state.themeVariables["--w3m-qr-color"])}
    ></wui-qr-code>`}copyTemplate(){const e=!this.uri||!this.ready;return l`<wui-link
      .disabled=${e}
      @click=${this.onCopyUri}
      color="fg-200"
      data-testid="copy-wc2-uri"
    >
      <wui-icon size="xs" color="fg-200" slot="iconLeft" name="copy"></wui-icon>
      Copy link
    </wui-link>`}onCopyUri(){try{this.uri&&(C.copyToClopboard(this.uri),y.showSuccess("Link copied"))}catch{y.showError("Failed to copy")}}};f.styles=G;x([c()],f.prototype,"socialProvider",void 0);x([c()],f.prototype,"uri",void 0);x([c()],f.prototype,"ready",void 0);x([c()],f.prototype,"loading",void 0);f=x([k("w3m-connecting-farcaster-view")],f);export{$ as W3mConnectSocialsView,f as W3mConnectingFarcasterView,p as W3mConnectingSocialView};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFscy1FVjU5MEcwdS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL0ByZW93bi9hcHBraXQtc2NhZmZvbGQtdWkvZGlzdC9lc20vc3JjL3BhcnRpYWxzL3czbS1zb2NpYWwtbG9naW4tbGlzdC9zdHlsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHJlb3duL2FwcGtpdC1zY2FmZm9sZC11aS9kaXN0L2VzbS9zcmMvcGFydGlhbHMvdzNtLXNvY2lhbC1sb2dpbi1saXN0L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0ByZW93bi9hcHBraXQtc2NhZmZvbGQtdWkvZGlzdC9lc20vc3JjL3ZpZXdzL3czbS1jb25uZWN0LXNvY2lhbHMtdmlldy9zdHlsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHJlb3duL2FwcGtpdC1zY2FmZm9sZC11aS9kaXN0L2VzbS9zcmMvdmlld3MvdzNtLWNvbm5lY3Qtc29jaWFscy12aWV3L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0ByZW93bi9hcHBraXQtc2NhZmZvbGQtdWkvZGlzdC9lc20vc3JjL3ZpZXdzL3czbS1jb25uZWN0aW5nLXNvY2lhbC12aWV3L3N0eWxlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AcmVvd24vYXBwa2l0LXNjYWZmb2xkLXVpL2Rpc3QvZXNtL3NyYy92aWV3cy93M20tY29ubmVjdGluZy1zb2NpYWwtdmlldy9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AcmVvd24vYXBwa2l0LXNjYWZmb2xkLXVpL2Rpc3QvZXNtL3NyYy92aWV3cy93M20tY29ubmVjdGluZy1mYXJjYXN0ZXItdmlldy9zdHlsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHJlb3duL2FwcGtpdC1zY2FmZm9sZC11aS9kaXN0L2VzbS9zcmMvdmlld3MvdzNtLWNvbm5lY3RpbmctZmFyY2FzdGVyLXZpZXcvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIDpob3N0IHtcbiAgICBtYXJnaW4tdG9wOiB2YXIoLS13dWktc3BhY2luZy0zeHMpO1xuICB9XG4gIHd1aS1zZXBhcmF0b3Ige1xuICAgIG1hcmdpbjogdmFyKC0td3VpLXNwYWNpbmctbSkgY2FsYyh2YXIoLS13dWktc3BhY2luZy1tKSAqIC0xKSB2YXIoLS13dWktc3BhY2luZy14cylcbiAgICAgIGNhbGModmFyKC0td3VpLXNwYWNpbmctbSkgKiAtMSk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSArIHZhcigtLXd1aS1zcGFjaW5nLXMpICogMik7XG4gIH1cbmA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZXMuanMubWFwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBBbGVydENvbnRyb2xsZXIsIENvbm5lY3RvckNvbnRyb2xsZXIsIENvbnN0YW50c1V0aWwsIE9wdGlvbnNDb250cm9sbGVyLCBSb3V0ZXJDb250cm9sbGVyIH0gZnJvbSAnQHJlb3duL2FwcGtpdC1jb250cm9sbGVycyc7XG5pbXBvcnQgeyBleGVjdXRlU29jaWFsTG9naW4gfSBmcm9tICdAcmVvd24vYXBwa2l0LWNvbnRyb2xsZXJzL3V0aWxzJztcbmltcG9ydCB7IENvcmVIZWxwZXJVdGlsIH0gZnJvbSAnQHJlb3duL2FwcGtpdC1jb250cm9sbGVycy91dGlscyc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnQHJlb3duL2FwcGtpdC11aSc7XG5pbXBvcnQgJ0ByZW93bi9hcHBraXQtdWkvd3VpLWZsZXgnO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS1saXN0LXNvY2lhbCc7XG5pbXBvcnQgeyBXM21GcmFtZVByb3ZpZGVyIH0gZnJvbSAnQHJlb3duL2FwcGtpdC13YWxsZXQnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5qcyc7XG5sZXQgVzNtU29jaWFsTG9naW5MaXN0ID0gY2xhc3MgVzNtU29jaWFsTG9naW5MaXN0IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBbXTtcbiAgICAgICAgdGhpcy50YWJJZHggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdG9ycyA9IENvbm5lY3RvckNvbnRyb2xsZXIuc3RhdGUuY29ubmVjdG9ycztcbiAgICAgICAgdGhpcy5hdXRoQ29ubmVjdG9yID0gdGhpcy5jb25uZWN0b3JzLmZpbmQoYyA9PiBjLnR5cGUgPT09ICdBVVRIJyk7XG4gICAgICAgIHRoaXMucmVtb3RlRmVhdHVyZXMgPSBPcHRpb25zQ29udHJvbGxlci5zdGF0ZS5yZW1vdGVGZWF0dXJlcztcbiAgICAgICAgdGhpcy5pc1B3YUxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZS5wdXNoKENvbm5lY3RvckNvbnRyb2xsZXIuc3Vic2NyaWJlS2V5KCdjb25uZWN0b3JzJywgdmFsID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9ycyA9IHZhbDtcbiAgICAgICAgICAgIHRoaXMuYXV0aENvbm5lY3RvciA9IHRoaXMuY29ubmVjdG9ycy5maW5kKGMgPT4gYy50eXBlID09PSAnQVVUSCcpO1xuICAgICAgICB9KSwgT3B0aW9uc0NvbnRyb2xsZXIuc3Vic2NyaWJlS2V5KCdyZW1vdGVGZWF0dXJlcycsIHZhbCA9PiAodGhpcy5yZW1vdGVGZWF0dXJlcyA9IHZhbCkpKTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuaGFuZGxlUHdhRnJhbWVMb2FkKCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLmZvckVhY2godW5zdWJzY3JpYmUgPT4gdW5zdWJzY3JpYmUoKSk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHNvY2lhbHMgPSB0aGlzLnJlbW90ZUZlYXR1cmVzPy5zb2NpYWxzIHx8IFtdO1xuICAgICAgICBjb25zdCBpc0F1dGhDb25uZWN0b3JFeGlzdCA9IEJvb2xlYW4odGhpcy5hdXRoQ29ubmVjdG9yKTtcbiAgICAgICAgY29uc3QgaXNTb2NpYWxzRW5hYmxlZCA9IHNvY2lhbHM/Lmxlbmd0aDtcbiAgICAgICAgY29uc3QgaXNDb25uZWN0U29jaWFsc1ZpZXcgPSBSb3V0ZXJDb250cm9sbGVyLnN0YXRlLnZpZXcgPT09ICdDb25uZWN0U29jaWFscyc7XG4gICAgICAgIGlmICgoIWlzQXV0aENvbm5lY3RvckV4aXN0IHx8ICFpc1NvY2lhbHNFbmFibGVkKSAmJiAhaXNDb25uZWN0U29jaWFsc1ZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Nvbm5lY3RTb2NpYWxzVmlldyAmJiAhaXNTb2NpYWxzRW5hYmxlZCkge1xuICAgICAgICAgICAgc29jaWFscyA9IENvbnN0YW50c1V0aWwuREVGQVVMVF9TT0NJQUxTO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sIGAgPHd1aS1mbGV4IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBnYXA9XCJ4c1wiPlxuICAgICAgJHtzb2NpYWxzLm1hcChzb2NpYWwgPT4gaHRtbCBgPHd1aS1saXN0LXNvY2lhbFxuICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblNvY2lhbENsaWNrKHNvY2lhbCk7XG4gICAgICAgIH19XG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0ke2Bzb2NpYWwtc2VsZWN0b3ItJHtzb2NpYWx9YH1cbiAgICAgICAgICAgIG5hbWU9JHtzb2NpYWx9XG4gICAgICAgICAgICBsb2dvPSR7c29jaWFsfVxuICAgICAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5pc1B3YUxvYWRpbmd9XG4gICAgICAgICAgPjwvd3VpLWxpc3Qtc29jaWFsPmApfVxuICAgIDwvd3VpLWZsZXg+YDtcbiAgICB9XG4gICAgYXN5bmMgb25Tb2NpYWxDbGljayhzb2NpYWxQcm92aWRlcikge1xuICAgICAgICBpZiAoc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGF3YWl0IGV4ZWN1dGVTb2NpYWxMb2dpbihzb2NpYWxQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlUHdhRnJhbWVMb2FkKCkge1xuICAgICAgICBpZiAoQ29yZUhlbHBlclV0aWwuaXNQV0EoKSkge1xuICAgICAgICAgICAgdGhpcy5pc1B3YUxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRoQ29ubmVjdG9yPy5wcm92aWRlciBpbnN0YW5jZW9mIFczbUZyYW1lUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hdXRoQ29ubmVjdG9yLnByb3ZpZGVyLmluaXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBBbGVydENvbnRyb2xsZXIub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHNob3J0TWVzc2FnZTogJ0Vycm9yIGxvYWRpbmcgZW1iZWRkZWQgd2FsbGV0IGluIFBXQScsXG4gICAgICAgICAgICAgICAgICAgIGxvbmdNZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgfSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUHdhTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblczbVNvY2lhbExvZ2luTGlzdC5zdHlsZXMgPSBzdHlsZXM7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSgpXG5dLCBXM21Tb2NpYWxMb2dpbkxpc3QucHJvdG90eXBlLCBcInRhYklkeFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgc3RhdGUoKVxuXSwgVzNtU29jaWFsTG9naW5MaXN0LnByb3RvdHlwZSwgXCJjb25uZWN0b3JzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZSgpXG5dLCBXM21Tb2NpYWxMb2dpbkxpc3QucHJvdG90eXBlLCBcImF1dGhDb25uZWN0b3JcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHN0YXRlKClcbl0sIFczbVNvY2lhbExvZ2luTGlzdC5wcm90b3R5cGUsIFwicmVtb3RlRmVhdHVyZXNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHN0YXRlKClcbl0sIFczbVNvY2lhbExvZ2luTGlzdC5wcm90b3R5cGUsIFwiaXNQd2FMb2FkaW5nXCIsIHZvaWQgMCk7XG5XM21Tb2NpYWxMb2dpbkxpc3QgPSBfX2RlY29yYXRlKFtcbiAgICBjdXN0b21FbGVtZW50KCd3M20tc29jaWFsLWxvZ2luLWxpc3QnKVxuXSwgVzNtU29jaWFsTG9naW5MaXN0KTtcbmV4cG9ydCB7IFczbVNvY2lhbExvZ2luTGlzdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIHd1aS1mbGV4IHtcbiAgICBtYXgtaGVpZ2h0OiBjbGFtcCgzNjBweCwgNTQwcHgsIDgwdmgpO1xuICAgIG92ZXJmbG93OiBzY3JvbGw7XG4gICAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0td3VpLWVhc2Utb3V0LXBvd2VyLTEpIHZhcigtLXd1aS1kdXJhdGlvbi1tZCk7XG4gICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gIH1cbiAgd3VpLWZsZXg6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG4gIHd1aS1mbGV4LmRpc2FibGVkIHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIH1cbmA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZXMuanMubWFwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgT3B0aW9uc0NvbnRyb2xsZXIsIE9wdGlvbnNTdGF0ZUNvbnRyb2xsZXIgfSBmcm9tICdAcmVvd24vYXBwa2l0LWNvbnRyb2xsZXJzJztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tICdAcmVvd24vYXBwa2l0LXVpJztcbmltcG9ydCAnQHJlb3duL2FwcGtpdC11aS93dWktZmxleCc7XG5pbXBvcnQgJy4uLy4uL3BhcnRpYWxzL3czbS1sZWdhbC1jaGVja2JveC9pbmRleC5qcyc7XG5pbXBvcnQgJy4uLy4uL3BhcnRpYWxzL3czbS1sZWdhbC1mb290ZXIvaW5kZXguanMnO1xuaW1wb3J0ICcuLi8uLi9wYXJ0aWFscy93M20tc29jaWFsLWxvZ2luLWxpc3QvaW5kZXguanMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5qcyc7XG5sZXQgVzNtQ29ubmVjdFNvY2lhbHNWaWV3ID0gY2xhc3MgVzNtQ29ubmVjdFNvY2lhbHNWaWV3IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBbXTtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gT3B0aW9uc1N0YXRlQ29udHJvbGxlci5zdGF0ZS5pc0xlZ2FsQ2hlY2tib3hDaGVja2VkO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLnB1c2goT3B0aW9uc1N0YXRlQ29udHJvbGxlci5zdWJzY3JpYmVLZXkoJ2lzTGVnYWxDaGVja2JveENoZWNrZWQnLCB2YWwgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gdmFsO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLmZvckVhY2godW5zdWJzY3JpYmUgPT4gdW5zdWJzY3JpYmUoKSk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyB0ZXJtc0NvbmRpdGlvbnNVcmwsIHByaXZhY3lQb2xpY3lVcmwgfSA9IE9wdGlvbnNDb250cm9sbGVyLnN0YXRlO1xuICAgICAgICBjb25zdCBsZWdhbENoZWNrYm94ID0gT3B0aW9uc0NvbnRyb2xsZXIuc3RhdGUuZmVhdHVyZXM/LmxlZ2FsQ2hlY2tib3g7XG4gICAgICAgIGNvbnN0IGxlZ2FsVXJsID0gdGVybXNDb25kaXRpb25zVXJsIHx8IHByaXZhY3lQb2xpY3lVcmw7XG4gICAgICAgIGNvbnN0IHNob3dMZWdhbENoZWNrYm94ID0gQm9vbGVhbihsZWdhbFVybCkgJiYgQm9vbGVhbihsZWdhbENoZWNrYm94KTtcbiAgICAgICAgY29uc3QgZGlzYWJsZWQgPSBzaG93TGVnYWxDaGVja2JveCAmJiAhdGhpcy5jaGVja2VkO1xuICAgICAgICBjb25zdCB0YWJJbmRleCA9IGRpc2FibGVkID8gLTEgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgIDx3M20tbGVnYWwtY2hlY2tib3g+PC93M20tbGVnYWwtY2hlY2tib3g+XG4gICAgICA8d3VpLWZsZXhcbiAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICAgIC5wYWRkaW5nPSR7c2hvd0xlZ2FsQ2hlY2tib3ggPyBbJzAnLCAncycsICdzJywgJ3MnXSA6ICdzJ31cbiAgICAgICAgZ2FwPVwieHNcIlxuICAgICAgICBjbGFzcz0ke2lmRGVmaW5lZChkaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiB1bmRlZmluZWQpfVxuICAgICAgPlxuICAgICAgICA8dzNtLXNvY2lhbC1sb2dpbi1saXN0IHRhYklkeD0ke2lmRGVmaW5lZCh0YWJJbmRleCl9PjwvdzNtLXNvY2lhbC1sb2dpbi1saXN0PlxuICAgICAgPC93dWktZmxleD5cbiAgICAgIDx3M20tbGVnYWwtZm9vdGVyPjwvdzNtLWxlZ2FsLWZvb3Rlcj5cbiAgICBgO1xuICAgIH1cbn07XG5XM21Db25uZWN0U29jaWFsc1ZpZXcuc3R5bGVzID0gc3R5bGVzO1xuX19kZWNvcmF0ZShbXG4gICAgc3RhdGUoKVxuXSwgVzNtQ29ubmVjdFNvY2lhbHNWaWV3LnByb3RvdHlwZSwgXCJjaGVja2VkXCIsIHZvaWQgMCk7XG5XM21Db25uZWN0U29jaWFsc1ZpZXcgPSBfX2RlY29yYXRlKFtcbiAgICBjdXN0b21FbGVtZW50KCd3M20tY29ubmVjdC1zb2NpYWxzLXZpZXcnKVxuXSwgVzNtQ29ubmVjdFNvY2lhbHNWaWV3KTtcbmV4cG9ydCB7IFczbUNvbm5lY3RTb2NpYWxzVmlldyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIHd1aS1sb2dvIHtcbiAgICB3aWR0aDogODBweDtcbiAgICBoZWlnaHQ6IDgwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0td3VpLWJvcmRlci1yYWRpdXMtbSk7XG4gIH1cbiAgQGtleWZyYW1lcyBzaGFrZSB7XG4gICAgMCUge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICAgIH1cbiAgICAyNSUge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDNweCk7XG4gICAgfVxuICAgIDUwJSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTNweCk7XG4gICAgfVxuICAgIDc1JSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoM3B4KTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgfVxuICB9XG4gIHd1aS1mbGV4OmZpcnN0LWNoaWxkOm5vdCg6b25seS1jaGlsZCkge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICB3dWktbG9hZGluZy10aHVtYm5haWwge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgfVxuICB3dWktaWNvbi1ib3gge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogY2FsYyh2YXIoLS13dWktc3BhY2luZy0zeHMpICogLTEpO1xuICAgIGJvdHRvbTogY2FsYyh2YXIoLS13dWktc3BhY2luZy0zeHMpICogLTEpO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjUpO1xuICAgIHRyYW5zaXRpb246IGFsbCB2YXIoLS13dWktZWFzZS1vdXQtcG93ZXItMikgdmFyKC0td3VpLWR1cmF0aW9uLWxnKTtcbiAgfVxuICB3dWktdGV4dFthbGlnbj0nY2VudGVyJ10ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDBweCB2YXIoLS13dWktc3BhY2luZy1sKTtcbiAgfVxuICBbZGF0YS1lcnJvcj0ndHJ1ZSddIHd1aS1pY29uLWJveCB7XG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICB9XG4gIFtkYXRhLWVycm9yPSd0cnVlJ10gPiB3dWktZmxleDpmaXJzdC1jaGlsZCB7XG4gICAgYW5pbWF0aW9uOiBzaGFrZSAyNTBtcyBjdWJpYy1iZXppZXIoMC4zNiwgMC4wNywgMC4xOSwgMC45NykgYm90aDtcbiAgfVxuICAuY2FwaXRhbGl6ZSB7XG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gIH1cbmA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZXMuanMubWFwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgQWNjb3VudENvbnRyb2xsZXIsIENoYWluQ29udHJvbGxlciwgQ29ubmVjdGlvbkNvbnRyb2xsZXIsIENvbm5lY3RvckNvbnRyb2xsZXIsIEV2ZW50c0NvbnRyb2xsZXIsIE1vZGFsQ29udHJvbGxlciwgT3B0aW9uc0NvbnRyb2xsZXIsIFJvdXRlckNvbnRyb2xsZXIsIFNuYWNrQ29udHJvbGxlciwgU3RvcmFnZVV0aWwsIFRoZW1lQ29udHJvbGxlciB9IGZyb20gJ0ByZW93bi9hcHBraXQtY29udHJvbGxlcnMnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gJ0ByZW93bi9hcHBraXQtdWknO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS1mbGV4JztcbmltcG9ydCAnQHJlb3duL2FwcGtpdC11aS93dWktaWNvbi1ib3gnO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS1sb2FkaW5nLXRodW1ibmFpbCc7XG5pbXBvcnQgJ0ByZW93bi9hcHBraXQtdWkvd3VpLWxvZ28nO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS10ZXh0JztcbmltcG9ydCB7IEVycm9yVXRpbCB9IGZyb20gJ0ByZW93bi9hcHBraXQtdXRpbHMnO1xuaW1wb3J0IHsgQ29uc3RhbnRzVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL0NvbnN0YW50c1V0aWwuanMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5qcyc7XG5sZXQgVzNtQ29ubmVjdGluZ1NvY2lhbFZpZXcgPSBjbGFzcyBXM21Db25uZWN0aW5nU29jaWFsVmlldyBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlID0gW107XG4gICAgICAgIHRoaXMuc29jaWFsUHJvdmlkZXIgPSBBY2NvdW50Q29udHJvbGxlci5zdGF0ZS5zb2NpYWxQcm92aWRlcjtcbiAgICAgICAgdGhpcy5zb2NpYWxXaW5kb3cgPSBBY2NvdW50Q29udHJvbGxlci5zdGF0ZS5zb2NpYWxXaW5kb3c7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdDb25uZWN0IGluIHRoZSBwcm92aWRlciB3aW5kb3cnO1xuICAgICAgICB0aGlzLmF1dGhDb25uZWN0b3IgPSBDb25uZWN0b3JDb250cm9sbGVyLmdldEF1dGhDb25uZWN0b3IoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTb2NpYWxDb25uZWN0aW9uID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YT8ucmVzdWx0VXJpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbiA9PT0gQ29uc3RhbnRzVXRpbC5TRUNVUkVfU0lURV9PUklHSU4pIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmhhbmRsZVNvY2lhbENvbm5lY3Rpb24sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dGhDb25uZWN0b3IgJiYgIXRoaXMuY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvY2lhbFdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvY2lhbFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY2NvdW50Q29udHJvbGxlci5zZXRTb2NpYWxXaW5kb3codW5kZWZpbmVkLCBDaGFpbkNvbnRyb2xsZXIuc3RhdGUuYWN0aXZlQ2hhaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTWVzc2FnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVyaSA9IGV2ZW50LmRhdGEucmVzdWx0VXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvY2lhbFByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50c0NvbnRyb2xsZXIuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0cmFjaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogJ1NPQ0lBTF9MT0dJTl9SRVFVRVNUX1VTRVJfREFUQScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHByb3ZpZGVyOiB0aGlzLnNvY2lhbFByb3ZpZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IENvbm5lY3Rpb25Db250cm9sbGVyLmNvbm5lY3RFeHRlcm5hbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmF1dGhDb25uZWN0b3IuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuYXV0aENvbm5lY3Rvci50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2NpYWxVcmk6IHVyaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuYXV0aENvbm5lY3Rvci5jaGFpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVV0aWwuc2V0Q29ubmVjdGVkU29jaWFsUHJvdmlkZXIodGhpcy5zb2NpYWxQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50c0NvbnRyb2xsZXIuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0cmFjaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogJ1NPQ0lBTF9MT0dJTl9TVUNDRVNTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgcHJvdmlkZXI6IHRoaXMuc29jaWFsUHJvdmlkZXIgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTWVzc2FnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudHNDb250cm9sbGVyLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0cmFjaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnU09DSUFMX0xPR0lOX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogeyBwcm92aWRlcjogdGhpcy5zb2NpYWxQcm92aWRlciB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFJvdXRlckNvbnRyb2xsZXIuZ29CYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93RXJyb3IoJ1VudHJ1c3RlZCBPcmlnaW4nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50c0NvbnRyb2xsZXIuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndHJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnU09DSUFMX0xPR0lOX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHByb3ZpZGVyOiB0aGlzLnNvY2lhbFByb3ZpZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBFcnJvclV0aWwuRW1iZWRkZWRXYWxsZXRBYm9ydENvbnRyb2xsZXI7XG4gICAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zb2NpYWxXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2lhbFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIEFjY291bnRDb250cm9sbGVyLnNldFNvY2lhbFdpbmRvdyh1bmRlZmluZWQsIENoYWluQ29udHJvbGxlci5zdGF0ZS5hY3RpdmVDaGFpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLnB1c2goLi4uW1xuICAgICAgICAgICAgQWNjb3VudENvbnRyb2xsZXIuc3Vic2NyaWJlKHZhbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbC5zb2NpYWxQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvY2lhbFByb3ZpZGVyID0gdmFsLnNvY2lhbFByb3ZpZGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsLnNvY2lhbFdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvY2lhbFdpbmRvdyA9IHZhbC5zb2NpYWxXaW5kb3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWwuYWRkcmVzcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoTW9kYWxDb250cm9sbGVyLnN0YXRlLm9wZW4gfHwgT3B0aW9uc0NvbnRyb2xsZXIuc3RhdGUuZW5hYmxlRW1iZWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vZGFsQ29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh0aGlzLmF1dGhDb25uZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFNvY2lhbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLmZvckVhY2godW5zdWJzY3JpYmUgPT4gdW5zdWJzY3JpYmUoKSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5oYW5kbGVTb2NpYWxDb25uZWN0aW9uLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc29jaWFsV2luZG93Py5jbG9zZSgpO1xuICAgICAgICBBY2NvdW50Q29udHJvbGxlci5zZXRTb2NpYWxXaW5kb3codW5kZWZpbmVkLCBDaGFpbkNvbnRyb2xsZXIuc3RhdGUuYWN0aXZlQ2hhaW4pO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgIDx3dWktZmxleFxuICAgICAgICBkYXRhLWVycm9yPSR7aWZEZWZpbmVkKHRoaXMuZXJyb3IpfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgIC5wYWRkaW5nPSR7WyczeGwnLCAneGwnLCAneGwnLCAneGwnXX1cbiAgICAgICAgZ2FwPVwieGxcIlxuICAgICAgPlxuICAgICAgICA8d3VpLWZsZXgganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgPHd1aS1sb2dvIGxvZ289JHtpZkRlZmluZWQodGhpcy5zb2NpYWxQcm92aWRlcil9Pjwvd3VpLWxvZ28+XG4gICAgICAgICAgJHt0aGlzLmVycm9yID8gbnVsbCA6IHRoaXMubG9hZGVyVGVtcGxhdGUoKX1cbiAgICAgICAgICA8d3VpLWljb24tYm94XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJlcnJvci0xMDBcIlxuICAgICAgICAgICAgYmFja2dyb3VuZD1cIm9wYXF1ZVwiXG4gICAgICAgICAgICBpY29uQ29sb3I9XCJlcnJvci0xMDBcIlxuICAgICAgICAgICAgaWNvbj1cImNsb3NlXCJcbiAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICBib3JkZXJcbiAgICAgICAgICAgIGJvcmRlckNvbG9yPVwid3VpLWNvbG9yLWJnLTEyNVwiXG4gICAgICAgICAgPjwvd3VpLWljb24tYm94PlxuICAgICAgICA8L3d1aS1mbGV4PlxuICAgICAgICA8d3VpLWZsZXggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBnYXA9XCJ4c1wiPlxuICAgICAgICAgIDx3dWktdGV4dCBhbGlnbj1cImNlbnRlclwiIHZhcmlhbnQ9XCJwYXJhZ3JhcGgtNTAwXCIgY29sb3I9XCJmZy0xMDBcIlxuICAgICAgICAgICAgPkxvZyBpbiB3aXRoXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcGl0YWxpemVcIj4ke3RoaXMuc29jaWFsUHJvdmlkZXIgPz8gJ1NvY2lhbCd9PC9zcGFuPjwvd3VpLXRleHRcbiAgICAgICAgICA+XG4gICAgICAgICAgPHd1aS10ZXh0IGFsaWduPVwiY2VudGVyXCIgdmFyaWFudD1cInNtYWxsLTQwMFwiIGNvbG9yPSR7dGhpcy5lcnJvciA/ICdlcnJvci0xMDAnIDogJ2ZnLTIwMCd9XG4gICAgICAgICAgICA+JHt0aGlzLm1lc3NhZ2V9PC93dWktdGV4dFxuICAgICAgICAgID48L3d1aS1mbGV4XG4gICAgICAgID5cbiAgICAgIDwvd3VpLWZsZXg+XG4gICAgYDtcbiAgICB9XG4gICAgbG9hZGVyVGVtcGxhdGUoKSB7XG4gICAgICAgIGNvbnN0IGJvcmRlclJhZGl1c01hc3RlciA9IFRoZW1lQ29udHJvbGxlci5zdGF0ZS50aGVtZVZhcmlhYmxlc1snLS13M20tYm9yZGVyLXJhZGl1cy1tYXN0ZXInXTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gYm9yZGVyUmFkaXVzTWFzdGVyID8gcGFyc2VJbnQoYm9yZGVyUmFkaXVzTWFzdGVyLnJlcGxhY2UoJ3B4JywgJycpLCAxMCkgOiA0O1xuICAgICAgICByZXR1cm4gaHRtbCBgPHd1aS1sb2FkaW5nLXRodW1ibmFpbCByYWRpdXM9JHtyYWRpdXMgKiA5fT48L3d1aS1sb2FkaW5nLXRodW1ibmFpbD5gO1xuICAgIH1cbiAgICBjb25uZWN0U29jaWFsKCkge1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNvY2lhbFdpbmRvdz8uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RpbmcgJiYgUm91dGVyQ29udHJvbGxlci5zdGF0ZS52aWV3ID09PSAnQ29ubmVjdGluZ1NvY2lhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50c0NvbnRyb2xsZXIuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndHJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnU09DSUFMX0xPR0lOX0NBTkNFTEVEJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHByb3ZpZGVyOiB0aGlzLnNvY2lhbFByb3ZpZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFJvdXRlckNvbnRyb2xsZXIuZ29CYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmhhbmRsZVNvY2lhbENvbm5lY3Rpb24sIGZhbHNlKTtcbiAgICB9XG4gICAgdXBkYXRlTWVzc2FnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnUmV0cmlldmluZyB1c2VyIGRhdGEnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gJ0Nvbm5lY3QgaW4gdGhlIHByb3ZpZGVyIHdpbmRvdyc7XG4gICAgICAgIH1cbiAgICB9XG59O1xuVzNtQ29ubmVjdGluZ1NvY2lhbFZpZXcuc3R5bGVzID0gc3R5bGVzO1xuX19kZWNvcmF0ZShbXG4gICAgc3RhdGUoKVxuXSwgVzNtQ29ubmVjdGluZ1NvY2lhbFZpZXcucHJvdG90eXBlLCBcInNvY2lhbFByb3ZpZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZSgpXG5dLCBXM21Db25uZWN0aW5nU29jaWFsVmlldy5wcm90b3R5cGUsIFwic29jaWFsV2luZG93XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZSgpXG5dLCBXM21Db25uZWN0aW5nU29jaWFsVmlldy5wcm90b3R5cGUsIFwiZXJyb3JcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHN0YXRlKClcbl0sIFczbUNvbm5lY3RpbmdTb2NpYWxWaWV3LnByb3RvdHlwZSwgXCJjb25uZWN0aW5nXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZSgpXG5dLCBXM21Db25uZWN0aW5nU29jaWFsVmlldy5wcm90b3R5cGUsIFwibWVzc2FnZVwiLCB2b2lkIDApO1xuVzNtQ29ubmVjdGluZ1NvY2lhbFZpZXcgPSBfX2RlY29yYXRlKFtcbiAgICBjdXN0b21FbGVtZW50KCd3M20tY29ubmVjdGluZy1zb2NpYWwtdmlldycpXG5dLCBXM21Db25uZWN0aW5nU29jaWFsVmlldyk7XG5leHBvcnQgeyBXM21Db25uZWN0aW5nU29jaWFsVmlldyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIEBrZXlmcmFtZXMgZmFkZWluIHtcbiAgICBmcm9tIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuICAgIHRvIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuICB9XG5cbiAgd3VpLXNoaW1tZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGFzcGVjdC1yYXRpbzogMSAvIDE7XG4gICAgYm9yZGVyLXJhZGl1czogY2xhbXAoMHB4LCB2YXIoLS13dWktYm9yZGVyLXJhZGl1cy1sKSwgNDBweCkgIWltcG9ydGFudDtcbiAgfVxuXG4gIHd1aS1xci1jb2RlIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMjAwbXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZWluO1xuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xuICB9XG5cbiAgd3VpLWxvZ28ge1xuICAgIHdpZHRoOiA4MHB4O1xuICAgIGhlaWdodDogODBweDtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS13dWktYm9yZGVyLXJhZGl1cy1tKTtcbiAgfVxuXG4gIHd1aS1mbGV4OmZpcnN0LWNoaWxkOm5vdCg6b25seS1jaGlsZCkge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICB3dWktbG9hZGluZy10aHVtYm5haWwge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgfVxuICB3dWktaWNvbi1ib3gge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogY2FsYyh2YXIoLS13dWktc3BhY2luZy0zeHMpICogLTEpO1xuICAgIGJvdHRvbTogY2FsYyh2YXIoLS13dWktc3BhY2luZy0zeHMpICogLTEpO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjUpO1xuICAgIHRyYW5zaXRpb246IGFsbCB2YXIoLS13dWktZWFzZS1vdXQtcG93ZXItMikgdmFyKC0td3VpLWR1cmF0aW9uLWxnKTtcbiAgfVxuYDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlcy5qcy5tYXAiLCJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5pbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyc7XG5pbXBvcnQgeyBBY2NvdW50Q29udHJvbGxlciwgQ29ubmVjdGlvbkNvbnRyb2xsZXIsIENvbm5lY3RvckNvbnRyb2xsZXIsIENvcmVIZWxwZXJVdGlsLCBFdmVudHNDb250cm9sbGVyLCBNb2RhbENvbnRyb2xsZXIsIFJvdXRlckNvbnRyb2xsZXIsIFNuYWNrQ29udHJvbGxlciwgU3RvcmFnZVV0aWwsIFRoZW1lQ29udHJvbGxlciB9IGZyb20gJ0ByZW93bi9hcHBraXQtY29udHJvbGxlcnMnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gJ0ByZW93bi9hcHBraXQtdWknO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS1idXR0b24nO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS1mbGV4JztcbmltcG9ydCAnQHJlb3duL2FwcGtpdC11aS93dWktaWNvbic7XG5pbXBvcnQgJ0ByZW93bi9hcHBraXQtdWkvd3VpLWljb24tYm94JztcbmltcG9ydCAnQHJlb3duL2FwcGtpdC11aS93dWktbGluayc7XG5pbXBvcnQgJ0ByZW93bi9hcHBraXQtdWkvd3VpLWxvYWRpbmctdGh1bWJuYWlsJztcbmltcG9ydCAnQHJlb3duL2FwcGtpdC11aS93dWktbG9nbyc7XG5pbXBvcnQgJ0ByZW93bi9hcHBraXQtdWkvd3VpLXFyLWNvZGUnO1xuaW1wb3J0ICdAcmVvd24vYXBwa2l0LXVpL3d1aS1zaGltbWVyJztcbmltcG9ydCAnQHJlb3duL2FwcGtpdC11aS93dWktdGV4dCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLmpzJztcbmxldCBXM21Db25uZWN0aW5nRmFyY2FzdGVyVmlldyA9IGNsYXNzIFczbUNvbm5lY3RpbmdGYXJjYXN0ZXJWaWV3IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBbXTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNvY2lhbFByb3ZpZGVyID0gQWNjb3VudENvbnRyb2xsZXIuc3RhdGUuc29jaWFsUHJvdmlkZXI7XG4gICAgICAgIHRoaXMudXJpID0gQWNjb3VudENvbnRyb2xsZXIuc3RhdGUuZmFyY2FzdGVyVXJsO1xuICAgICAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmF1dGhDb25uZWN0b3IgPSBDb25uZWN0b3JDb250cm9sbGVyLmdldEF1dGhDb25uZWN0b3IoKTtcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLnB1c2goLi4uW1xuICAgICAgICAgICAgQWNjb3VudENvbnRyb2xsZXIuc3Vic2NyaWJlS2V5KCdmYXJjYXN0ZXJVcmwnLCB2YWwgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cmkgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdEZhcmNhc3RlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgQWNjb3VudENvbnRyb2xsZXIuc3Vic2NyaWJlS2V5KCdzb2NpYWxQcm92aWRlcicsIHZhbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvY2lhbFByb3ZpZGVyID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5mb3JjZVVwZGF0ZSk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZm9yY2VVcGRhdGUpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMub25SZW5kZXJQcm94eSgpO1xuICAgICAgICByZXR1cm4gaHRtbCBgJHt0aGlzLnBsYXRmb3JtVGVtcGxhdGUoKX1gO1xuICAgIH1cbiAgICBwbGF0Zm9ybVRlbXBsYXRlKCkge1xuICAgICAgICBpZiAoQ29yZUhlbHBlclV0aWwuaXNNb2JpbGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGh0bWwgYCR7dGhpcy5tb2JpbGVUZW1wbGF0ZSgpfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0bWwgYCR7dGhpcy5kZXNrdG9wVGVtcGxhdGUoKX1gO1xuICAgIH1cbiAgICBkZXNrdG9wVGVtcGxhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sIGAke3RoaXMubG9hZGluZ1RlbXBsYXRlKCl9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHRtbCBgJHt0aGlzLnFyVGVtcGxhdGUoKX1gO1xuICAgIH1cbiAgICBxclRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gaHRtbCBgIDx3dWktZmxleFxuICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIC5wYWRkaW5nPSR7WycwJywgJ3hsJywgJ3hsJywgJ3hsJ119XG4gICAgICBnYXA9XCJ4bFwiXG4gICAgPlxuICAgICAgPHd1aS1zaGltbWVyIGJvcmRlclJhZGl1cz1cImxcIiB3aWR0aD1cIjEwMCVcIj4gJHt0aGlzLnFyQ29kZVRlbXBsYXRlKCl9IDwvd3VpLXNoaW1tZXI+XG5cbiAgICAgIDx3dWktdGV4dCB2YXJpYW50PVwicGFyYWdyYXBoLTUwMFwiIGNvbG9yPVwiZmctMTAwXCI+XG4gICAgICAgIFNjYW4gdGhpcyBRUiBDb2RlIHdpdGggeW91ciBwaG9uZVxuICAgICAgPC93dWktdGV4dD5cbiAgICAgICR7dGhpcy5jb3B5VGVtcGxhdGUoKX1cbiAgICA8L3d1aS1mbGV4PmA7XG4gICAgfVxuICAgIGxvYWRpbmdUZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPHd1aS1mbGV4XG4gICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgLnBhZGRpbmc9JHtbJ3hsJywgJ3hsJywgJ3hsJywgJ3hsJ119XG4gICAgICAgIGdhcD1cInhsXCJcbiAgICAgID5cbiAgICAgICAgPHd1aS1mbGV4IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgIDx3dWktbG9nbyBsb2dvPVwiZmFyY2FzdGVyXCI+PC93dWktbG9nbz5cbiAgICAgICAgICAke3RoaXMubG9hZGVyVGVtcGxhdGUoKX1cbiAgICAgICAgICA8d3VpLWljb24tYm94XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJlcnJvci0xMDBcIlxuICAgICAgICAgICAgYmFja2dyb3VuZD1cIm9wYXF1ZVwiXG4gICAgICAgICAgICBpY29uQ29sb3I9XCJlcnJvci0xMDBcIlxuICAgICAgICAgICAgaWNvbj1cImNsb3NlXCJcbiAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICBib3JkZXJcbiAgICAgICAgICAgIGJvcmRlckNvbG9yPVwid3VpLWNvbG9yLWJnLTEyNVwiXG4gICAgICAgICAgPjwvd3VpLWljb24tYm94PlxuICAgICAgICA8L3d1aS1mbGV4PlxuICAgICAgICA8d3VpLWZsZXggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBnYXA9XCJ4c1wiPlxuICAgICAgICAgIDx3dWktdGV4dCBhbGlnbj1cImNlbnRlclwiIHZhcmlhbnQ9XCJwYXJhZ3JhcGgtNTAwXCIgY29sb3I9XCJmZy0xMDBcIj5cbiAgICAgICAgICAgIExvYWRpbmcgdXNlciBkYXRhXG4gICAgICAgICAgPC93dWktdGV4dD5cbiAgICAgICAgICA8d3VpLXRleHQgYWxpZ249XCJjZW50ZXJcIiB2YXJpYW50PVwic21hbGwtNDAwXCIgY29sb3I9XCJmZy0yMDBcIj5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGEgbW9tZW50IHdoaWxlIHdlIGxvYWQgeW91ciBkYXRhLlxuICAgICAgICAgIDwvd3VpLXRleHQ+XG4gICAgICAgIDwvd3VpLWZsZXg+XG4gICAgICA8L3d1aS1mbGV4PlxuICAgIGA7XG4gICAgfVxuICAgIG1vYmlsZVRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gaHRtbCBgIDx3dWktZmxleFxuICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIC5wYWRkaW5nPSR7WyczeGwnLCAneGwnLCAneGwnLCAneGwnXX1cbiAgICAgIGdhcD1cInhsXCJcbiAgICA+XG4gICAgICA8d3VpLWZsZXgganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIDx3dWktbG9nbyBsb2dvPVwiZmFyY2FzdGVyXCI+PC93dWktbG9nbz5cbiAgICAgICAgJHt0aGlzLmxvYWRlclRlbXBsYXRlKCl9XG4gICAgICAgIDx3dWktaWNvbi1ib3hcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJlcnJvci0xMDBcIlxuICAgICAgICAgIGJhY2tncm91bmQ9XCJvcGFxdWVcIlxuICAgICAgICAgIGljb25Db2xvcj1cImVycm9yLTEwMFwiXG4gICAgICAgICAgaWNvbj1cImNsb3NlXCJcbiAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgIGJvcmRlclxuICAgICAgICAgIGJvcmRlckNvbG9yPVwid3VpLWNvbG9yLWJnLTEyNVwiXG4gICAgICAgID48L3d1aS1pY29uLWJveD5cbiAgICAgIDwvd3VpLWZsZXg+XG4gICAgICA8d3VpLWZsZXggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBnYXA9XCJ4c1wiPlxuICAgICAgICA8d3VpLXRleHQgYWxpZ249XCJjZW50ZXJcIiB2YXJpYW50PVwicGFyYWdyYXBoLTUwMFwiIGNvbG9yPVwiZmctMTAwXCJcbiAgICAgICAgICA+Q29udGludWUgaW4gRmFyY2FzdGVyPC9zcGFuPjwvd3VpLXRleHRcbiAgICAgICAgPlxuICAgICAgICA8d3VpLXRleHQgYWxpZ249XCJjZW50ZXJcIiB2YXJpYW50PVwic21hbGwtNDAwXCIgY29sb3I9XCJmZy0yMDBcIlxuICAgICAgICAgID5BY2NlcHQgY29ubmVjdGlvbiByZXF1ZXN0IGluIHRoZSBhcHA8L3d1aS10ZXh0XG4gICAgICAgID48L3d1aS1mbGV4XG4gICAgICA+XG4gICAgICAke3RoaXMubW9iaWxlTGlua1RlbXBsYXRlKCl9XG4gICAgPC93dWktZmxleD5gO1xuICAgIH1cbiAgICBsb2FkZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzTWFzdGVyID0gVGhlbWVDb250cm9sbGVyLnN0YXRlLnRoZW1lVmFyaWFibGVzWyctLXczbS1ib3JkZXItcmFkaXVzLW1hc3RlciddO1xuICAgICAgICBjb25zdCByYWRpdXMgPSBib3JkZXJSYWRpdXNNYXN0ZXIgPyBwYXJzZUludChib3JkZXJSYWRpdXNNYXN0ZXIucmVwbGFjZSgncHgnLCAnJyksIDEwKSA6IDQ7XG4gICAgICAgIHJldHVybiBodG1sIGA8d3VpLWxvYWRpbmctdGh1bWJuYWlsIHJhZGl1cz0ke3JhZGl1cyAqIDl9Pjwvd3VpLWxvYWRpbmctdGh1bWJuYWlsPmA7XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3RGYXJjYXN0ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmF1dGhDb25uZWN0b3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hdXRoQ29ubmVjdG9yPy5wcm92aWRlci5jb25uZWN0RmFyY2FzdGVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVV0aWwuc2V0Q29ubmVjdGVkU29jaWFsUHJvdmlkZXIodGhpcy5zb2NpYWxQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50c0NvbnRyb2xsZXIuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0cmFjaycsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogJ1NPQ0lBTF9MT0dJTl9SRVFVRVNUX1VTRVJfREFUQScsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHByb3ZpZGVyOiB0aGlzLnNvY2lhbFByb3ZpZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXdhaXQgQ29ubmVjdGlvbkNvbnRyb2xsZXIuY29ubmVjdEV4dGVybmFsKHRoaXMuYXV0aENvbm5lY3RvciwgdGhpcy5hdXRoQ29ubmVjdG9yLmNoYWluKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zb2NpYWxQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICBFdmVudHNDb250cm9sbGVyLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndHJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdTT0NJQUxfTE9HSU5fU1VDQ0VTUycsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHByb3ZpZGVyOiB0aGlzLnNvY2lhbFByb3ZpZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIE1vZGFsQ29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc29jaWFsUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRzQ29udHJvbGxlci5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RyYWNrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnU09DSUFMX0xPR0lOX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgcHJvdmlkZXI6IHRoaXMuc29jaWFsUHJvdmlkZXIgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUm91dGVyQ29udHJvbGxlci5nb0JhY2soKTtcbiAgICAgICAgICAgICAgICBTbmFja0NvbnRyb2xsZXIuc2hvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBtb2JpbGVMaW5rVGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBodG1sIGA8d3VpLWJ1dHRvblxuICAgICAgc2l6ZT1cIm1kXCJcbiAgICAgID9sb2FkaW5nPSR7dGhpcy5sb2FkaW5nfVxuICAgICAgP2Rpc2FibGVkPSR7IXRoaXMudXJpIHx8IHRoaXMubG9hZGluZ31cbiAgICAgIEBjbGljaz0keygpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnVyaSkge1xuICAgICAgICAgICAgICAgIENvcmVIZWxwZXJVdGlsLm9wZW5IcmVmKHRoaXMudXJpLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgPlxuICAgICAgT3BlbiBmYXJjYXN0ZXI8L3d1aS1idXR0b25cbiAgICA+YDtcbiAgICB9XG4gICAgb25SZW5kZXJQcm94eSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlYWR5ICYmIHRoaXMudXJpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXJDb2RlVGVtcGxhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy51cmkgfHwgIXRoaXMucmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gNDA7XG4gICAgICAgIHJldHVybiBodG1sIGAgPHd1aS1xci1jb2RlXG4gICAgICBzaXplPSR7c2l6ZX1cbiAgICAgIHRoZW1lPSR7VGhlbWVDb250cm9sbGVyLnN0YXRlLnRoZW1lTW9kZX1cbiAgICAgIHVyaT0ke3RoaXMudXJpfVxuICAgICAgP2ZhcmNhc3Rlcj0ke3RydWV9XG4gICAgICBkYXRhLXRlc3RpZD1cInd1aS1xci1jb2RlXCJcbiAgICAgIGNvbG9yPSR7aWZEZWZpbmVkKFRoZW1lQ29udHJvbGxlci5zdGF0ZS50aGVtZVZhcmlhYmxlc1snLS13M20tcXItY29sb3InXSl9XG4gICAgPjwvd3VpLXFyLWNvZGU+YDtcbiAgICB9XG4gICAgY29weVRlbXBsYXRlKCkge1xuICAgICAgICBjb25zdCBpbmFjdGl2ZSA9ICF0aGlzLnVyaSB8fCAhdGhpcy5yZWFkeTtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDx3dWktbGlua1xuICAgICAgLmRpc2FibGVkPSR7aW5hY3RpdmV9XG4gICAgICBAY2xpY2s9JHt0aGlzLm9uQ29weVVyaX1cbiAgICAgIGNvbG9yPVwiZmctMjAwXCJcbiAgICAgIGRhdGEtdGVzdGlkPVwiY29weS13YzItdXJpXCJcbiAgICA+XG4gICAgICA8d3VpLWljb24gc2l6ZT1cInhzXCIgY29sb3I9XCJmZy0yMDBcIiBzbG90PVwiaWNvbkxlZnRcIiBuYW1lPVwiY29weVwiPjwvd3VpLWljb24+XG4gICAgICBDb3B5IGxpbmtcbiAgICA8L3d1aS1saW5rPmA7XG4gICAgfVxuICAgIG9uQ29weVVyaSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnVyaSkge1xuICAgICAgICAgICAgICAgIENvcmVIZWxwZXJVdGlsLmNvcHlUb0Nsb3Bib2FyZCh0aGlzLnVyaSk7XG4gICAgICAgICAgICAgICAgU25hY2tDb250cm9sbGVyLnNob3dTdWNjZXNzKCdMaW5rIGNvcGllZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIFNuYWNrQ29udHJvbGxlci5zaG93RXJyb3IoJ0ZhaWxlZCB0byBjb3B5Jyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuVzNtQ29ubmVjdGluZ0ZhcmNhc3RlclZpZXcuc3R5bGVzID0gc3R5bGVzO1xuX19kZWNvcmF0ZShbXG4gICAgc3RhdGUoKVxuXSwgVzNtQ29ubmVjdGluZ0ZhcmNhc3RlclZpZXcucHJvdG90eXBlLCBcInNvY2lhbFByb3ZpZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZSgpXG5dLCBXM21Db25uZWN0aW5nRmFyY2FzdGVyVmlldy5wcm90b3R5cGUsIFwidXJpXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZSgpXG5dLCBXM21Db25uZWN0aW5nRmFyY2FzdGVyVmlldy5wcm90b3R5cGUsIFwicmVhZHlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHN0YXRlKClcbl0sIFczbUNvbm5lY3RpbmdGYXJjYXN0ZXJWaWV3LnByb3RvdHlwZSwgXCJsb2FkaW5nXCIsIHZvaWQgMCk7XG5XM21Db25uZWN0aW5nRmFyY2FzdGVyVmlldyA9IF9fZGVjb3JhdGUoW1xuICAgIGN1c3RvbUVsZW1lbnQoJ3czbS1jb25uZWN0aW5nLWZhcmNhc3Rlci12aWV3Jylcbl0sIFczbUNvbm5lY3RpbmdGYXJjYXN0ZXJWaWV3KTtcbmV4cG9ydCB7IFczbUNvbm5lY3RpbmdGYXJjYXN0ZXJWaWV3IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsic3R5bGVzJDMiLCJjc3MiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiciIsImQiLCJpIiwiVzNtU29jaWFsTG9naW5MaXN0IiwiTGl0RWxlbWVudCIsIkNvbm5lY3RvckNvbnRyb2xsZXIiLCJPcHRpb25zQ29udHJvbGxlciIsInZhbCIsInVuc3Vic2NyaWJlIiwic29jaWFscyIsImlzQXV0aENvbm5lY3RvckV4aXN0IiwiaXNTb2NpYWxzRW5hYmxlZCIsImlzQ29ubmVjdFNvY2lhbHNWaWV3IiwiUm91dGVyQ29udHJvbGxlciIsIkNvbnN0YW50c1V0aWwiLCJodG1sIiwic29jaWFsIiwic29jaWFsUHJvdmlkZXIiLCJleGVjdXRlU29jaWFsTG9naW4iLCJDb3JlSGVscGVyVXRpbCIsIlczbUZyYW1lUHJvdmlkZXIiLCJlcnJvciIsIkFsZXJ0Q29udHJvbGxlciIsInN0eWxlcyIsInByb3BlcnR5Iiwic3RhdGUiLCJjdXN0b21FbGVtZW50Iiwic3R5bGVzJDIiLCJXM21Db25uZWN0U29jaWFsc1ZpZXciLCJPcHRpb25zU3RhdGVDb250cm9sbGVyIiwidGVybXNDb25kaXRpb25zVXJsIiwicHJpdmFjeVBvbGljeVVybCIsImxlZ2FsQ2hlY2tib3giLCJzaG93TGVnYWxDaGVja2JveCIsImRpc2FibGVkIiwidGFiSW5kZXgiLCJpZkRlZmluZWQiLCJzdHlsZXMkMSIsIlczbUNvbm5lY3RpbmdTb2NpYWxWaWV3IiwiQWNjb3VudENvbnRyb2xsZXIiLCJldmVudCIsIkNoYWluQ29udHJvbGxlciIsInVyaSIsIkV2ZW50c0NvbnRyb2xsZXIiLCJDb25uZWN0aW9uQ29udHJvbGxlciIsIlN0b3JhZ2VVdGlsIiwiU25hY2tDb250cm9sbGVyIiwiRXJyb3JVdGlsIiwiTW9kYWxDb250cm9sbGVyIiwiYm9yZGVyUmFkaXVzTWFzdGVyIiwiVGhlbWVDb250cm9sbGVyIiwicmFkaXVzIiwiaW50ZXJ2YWwiLCJXM21Db25uZWN0aW5nRmFyY2FzdGVyVmlldyIsInNpemUiLCJpbmFjdGl2ZSJdLCJtYXBwaW5ncyI6IjZsQkFDQSxNQUFBQSxFQUFlQztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQSxFQ0RmLElBQUlDLEVBQTBDLFNBQVVDLEVBQVlDLEVBQVFDLEVBQUtDLEVBQU0sQ0FDbkYsSUFBSUMsRUFBSSxVQUFVLE9BQVFDLEVBQUlELEVBQUksRUFBSUgsRUFBU0UsSUFBUyxLQUFPQSxFQUFPLE9BQU8seUJBQXlCRixFQUFRQyxDQUFHLEVBQUlDLEVBQU1HLEVBQzNILEdBQUksT0FBTyxTQUFZLFVBQVksT0FBTyxRQUFRLFVBQWEsV0FBWUQsRUFBSSxRQUFRLFNBQVNMLEVBQVlDLEVBQVFDLEVBQUtDLENBQUksTUFDeEgsU0FBU0ksRUFBSVAsRUFBVyxPQUFTLEVBQUdPLEdBQUssRUFBR0EsS0FBU0QsRUFBSU4sRUFBV08sQ0FBQyxLQUFHRixHQUFLRCxFQUFJLEVBQUlFLEVBQUVELENBQUMsRUFBSUQsRUFBSSxFQUFJRSxFQUFFTCxFQUFRQyxFQUFLRyxDQUFDLEVBQUlDLEVBQUVMLEVBQVFDLENBQUcsSUFBTUcsR0FDaEosT0FBT0QsRUFBSSxHQUFLQyxHQUFLLE9BQU8sZUFBZUosRUFBUUMsRUFBS0csQ0FBQyxFQUFHQSxDQUNoRSxFQVdBLElBQUlHLEVBQXFCLGNBQWlDQyxDQUFXLENBQ2pFLGFBQWMsQ0FDVixNQUFPLEVBQ1AsS0FBSyxZQUFjLENBQUUsRUFDckIsS0FBSyxPQUFTLE9BQ2QsS0FBSyxXQUFhQyxFQUFvQixNQUFN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
